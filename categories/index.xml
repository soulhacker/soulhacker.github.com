
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Categories on Paradigm X</title>
   <link>/categories/</link>
   <description>Recent content in Categories on Paradigm X</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2024 - Neo Lee</copyright>
   
       <atom:link href="/categories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>自然叫牌法和防守系统（十七队）</title>
       <link>/posts/bridge-17/</link>
       <pubDate>Thu, 29 Dec 2022 00:00:00 +0800</pubDate>
       
       <guid>/posts/bridge-17/</guid>
       <description>&lt;blockquote&gt;&lt;p&gt;现代化、可以灵活定制的自然叫牌法。&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5&#34;&gt;基本概念&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99&#34;&gt;基本原则&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E4%B8%BB%E8%A6%81%E5%BC%80%E5%8F%AB%E8%BF%9B%E7%A8%8B&#34;&gt;主要开叫进程&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#1nt&#34;&gt;1NT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#2nt&#34;&gt;2NT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#2c&#34;&gt;2C&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#1%E9%98%B6%E9%AB%98%E8%8A%B1&#34;&gt;1阶高花&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#1%E9%98%B6%E4%BD%8E%E8%8A%B1&#34;&gt;1阶低花&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%BC%B1%E4%BA%8C&#34;&gt;弱二&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%BA%94%E5%8F%AB%E5%92%8C%E5%86%8D%E5%8F%AB%E9%80%9A%E7%94%A8%E8%BF%9B%E7%A8%8B&#34;&gt;应叫和再叫通用进程&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#%E8%B7%B3%E5%86%8D%E5%8F%AB&#34;&gt;跳再叫&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E5%BA%94%E5%8F%AB%E4%BA%BA%E8%8A%B1%E8%89%B2%E7%9A%84%E5%8A%A0%E5%8F%AB&#34;&gt;对应叫人花色的加叫&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E7%AC%AC%E5%9B%9B%E8%8A%B1%E8%89%B2%E9%80%BC%E5%8F%AB&#34;&gt;第四花色逼叫&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E8%B7%B3%E5%8F%AB%E6%96%B0%E8%8A%B1&#34;&gt;跳叫新花&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%B8%B8%E7%94%A8%E7%BA%A6%E5%AE%9A%E5%8F%AB&#34;&gt;常用约定叫&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#%E7%BD%97%E9%A9%AC%E5%85%B3%E9%94%AE%E5%BC%A0%E9%97%AE%E5%8F%AB-rkcb&#34;&gt;罗马关键张问叫（RKCB）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#rkcb-%E5%90%8E%E7%9A%84%E9%97%AE%E5%8F%AB&#34;&gt;RKCB 后的问叫&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E7%9B%96%E4%BC%AF-gerber-%E9%97%AE%E5%8F%AB&#34;&gt;盖伯（Gerber）问叫&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E6%9D%B0%E5%8F%AF%E6%AF%94-jacoby-2nt&#34;&gt;杰可比（Jacoby）2NT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E6%89%A3%E5%8F%AB-cue-bid&#34;&gt;扣叫（Cue Bid）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E7%AB%9E%E5%8F%AB%E8%BF%9B%E7%A8%8B&#34;&gt;竞叫进程&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#%E6%80%BB%E5%A2%A9%E6%95%B0%E5%8E%9F%E7%90%86&#34;&gt;总墩数原理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E6%95%8C%E6%96%B9%E5%BC%80%E5%8F%AB%E5%90%8E&#34;&gt;敌方开叫后&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E6%95%8C%E6%96%B9%E4%BA%89%E5%8F%AB%E5%90%8E&#34;&gt;敌方争叫后&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E9%99%84-%E9%A6%96%E6%94%BB&#34;&gt;附：首攻&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#%E5%85%B1%E9%80%9A%E5%8E%9F%E5%88%99&#34;&gt;共通原则&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E6%97%A0%E5%B0%86%E5%AE%9A%E7%BA%A6%E7%9A%84%E9%A6%96%E6%94%BB&#34;&gt;对无将定约的首攻&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E8%8A%B1%E8%89%B2%E5%AE%9A%E7%BA%A6%E7%9A%84%E9%A6%96%E6%94%BB&#34;&gt;对花色定约的首攻&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E5%AF%B9%E6%BB%A1%E8%B4%AF%E5%AE%9A%E7%BA%A6%E7%9A%84%E9%A6%96%E6%94%BB&#34;&gt;对满贯定约的首攻&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E8%BF%9B%E9%98%B6&#34;&gt;进阶&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#%E9%99%84-%E9%98%B2%E5%AE%88%E4%BF%A1%E5%8F%B7&#34;&gt;附：防守信号&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!--endtoc--&gt;&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;开叫：第一个非 Pass 的叫品&lt;/li&gt;&lt;li&gt;应叫：开叫人的伙伴对开叫立刻做出的回应叫牌&lt;/li&gt;&lt;li&gt;再叫：开叫人或应叫人后续的叫牌&lt;/li&gt;&lt;li&gt;争叫：敌方开叫后任何时候做出的叫品&lt;/li&gt;&lt;li&gt;平衡叫：连续两家不叫之后做出的叫品，如果此时不叫则叫牌结束，做出平衡叫通常表示不满足于之前最后一个叫品（无论来自敌我方），希望维持叫牌进程&lt;/li&gt;&lt;li&gt;平均牌型：简称“均型”，指没有单缺，4-3-3-3 或 4-4-3-2 或 5-3-3-2 的牌型，其中5张为低花或很弱的高花；通常不把 5-4-2-2 当做平均牌型&lt;/li&gt;&lt;li&gt;牌型点：在试探花色定约时，可以在大牌点基础上加上牌型点来估算牌例，一个缺门算3点，单张算2点，双张算1点；注意如果单双张含大牌则不宜加算&lt;/li&gt;&lt;li&gt;加叫：在高一阶水平上叫出同伴所叫（真实）花色&lt;/li&gt;&lt;li&gt;跳叫：在高两阶或以上水平上叫牌，如果叫的是同伴的花色，又叫“跳加叫”；如果叫的是新花色，则叫“跳叫新花”&lt;/li&gt;&lt;li&gt;限定叫：对点力有明确上下限约定的叫品&lt;/li&gt;&lt;li&gt;逼叫：正常情况下同伴必须叫牌；未约定点力上限的应叫大多是逼叫，限定叫则通常不逼叫；逼叫可以逼叫一轮、逼叫到局、满贯逼叫等&lt;/li&gt;&lt;li&gt;邀叫：邀请同伴在持牌理想时叫到更高阶定约，包括邀请成局或邀请（大）满贯，邀叫不是逼叫&lt;/li&gt;&lt;li&gt;约定叫：非自然的人为约定叫品，在特定进程下表达特殊含义，比赛中做出约定叫的牌手的同伴须轻敲桌面提示对手，并在对手询问时作出解释；本系统中约定叫均注明其英文名称（如果有的话）&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;基本原则&#34;&gt;基本原则&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;12+点开叫，有5张较好高花套时11点亦可&lt;/li&gt;&lt;li&gt;15-17点平均牌型开叫 1NT，20-21点平均牌型开叫 2NT&lt;/li&gt;&lt;li&gt;22+点或9+赢墩开叫强 2C&lt;/li&gt;&lt;li&gt;开叫1阶高花保证5张，开叫1阶低花保证3张&lt;/li&gt;&lt;li&gt;不叫（Pass）是合法叫品，除注明逼叫的场合，任一方都可以不叫&lt;ul&gt;&lt;li&gt;不满足开叫条件&lt;/li&gt;&lt;li&gt;同伴开叫后点力不足7点&lt;/li&gt;&lt;li&gt;满足于现定约而无更多想法&lt;/li&gt;&lt;li&gt;现定约虽不理想但再叫风险更大&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;主要开叫进程&#34;&gt;主要开叫进程&lt;/h2&gt;&lt;h3 id=&#34;1nt&#34;&gt;1NT&lt;/h3&gt;&lt;p&gt;开叫 1NT 表示15-17点，平均牌型，应叫进程：&lt;/p&gt;&lt;h4 id=&#34;2c&#34;&gt;2C&lt;/h4&gt;&lt;p&gt;Stayman，寻求4-4高花配合，开叫人答叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2D：无4张高花&lt;ul&gt;&lt;li&gt;2H/2S：所叫花色5张，另一高花4张，邀叫&lt;/li&gt;&lt;li&gt;2NT：邀请 3NT，不承诺4张高花套&lt;/li&gt;&lt;li&gt;3C/3D：所叫花色5张以上，逼叫到局&lt;/li&gt;&lt;li&gt;3H/3S：Smolen，所叫花色4张，另一高花套5张，逼叫到局&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2H：4张红心，同时可能有4张黑桃&lt;ul&gt;&lt;li&gt;2S：4张黑桃，邀叫&lt;/li&gt;&lt;li&gt;2NT：无4张黑桃，邀叫 3NT&lt;/li&gt;&lt;li&gt;3C/3D：所叫花色5张以上，逼叫到局&lt;/li&gt;&lt;li&gt;3H：邀叫 4H 或 3NT&lt;/li&gt;&lt;li&gt;3S：约定叫，4张以上红心，有满贯兴趣，通常均型&lt;/li&gt;&lt;li&gt;4C/4D：Splinters，所叫花色单缺，4张以上红心，满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2S：4张黑桃，同时否定4张红心&lt;ul&gt;&lt;li&gt;2NT：不保证4张高花，邀叫 3NT&lt;/li&gt;&lt;li&gt;3C/3D：所叫花色5张以上，逼叫到局&lt;/li&gt;&lt;li&gt;3H：约定叫，4张以上黑桃，有满贯兴趣，通常均型&lt;/li&gt;&lt;li&gt;3S：邀叫 4S 或者 3NT&lt;/li&gt;&lt;li&gt;4C/4D/4H：Splinters，所叫花色单缺，4张以上黑桃，满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2d&#34;&gt;2D&lt;/h4&gt;&lt;p&gt;Jacoby 转移叫，表示5张以上红心，开叫人无条件转移至 2H；其后应叫人再叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2S：5张以上红心，5张以上黑桃，成局邀叫&lt;/li&gt;&lt;li&gt;2NT：正好5张红心，成局邀叫&lt;/li&gt;&lt;li&gt;3C/3D：5张以上红心，所叫花色4张以上，逼叫到局&lt;/li&gt;&lt;li&gt;3H：6张以上红心，邀叫&lt;/li&gt;&lt;li&gt;3NT：正好5张红心，定约选择 3NT/4H&lt;/li&gt;&lt;li&gt;3S/4C/4D：Splinters，所叫花色单缺，6张以上红心，满贯兴趣&lt;/li&gt;&lt;li&gt;4H：6张以上红心，无单缺，温和的满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：正好5张红心，邀请 6H 或 6NT&lt;/li&gt;&lt;li&gt;5NT：满贯逼叫，定约选择 6H 或 6NT&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2h&#34;&gt;2H&lt;/h4&gt;&lt;p&gt;Jacoby 转移叫，表示5张以上黑桃，开叫人无条件转移至 2S；其后应叫人再叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2NT：正好5张黑桃，成局邀叫&lt;/li&gt;&lt;li&gt;3C/3D：5张以上黑桃，所叫花色4张以上，逼叫到局&lt;/li&gt;&lt;li&gt;3H：5张以上红心，5张以上黑桃，逼叫到局&lt;/li&gt;&lt;li&gt;3S：6张以上黑桃，邀叫&lt;/li&gt;&lt;li&gt;3NT：正好5张黑桃，定约选择 3NT/4S&lt;/li&gt;&lt;li&gt;4C/4D/4H：Splinters，所叫花色单缺，6张以上黑桃，强烈满贯兴趣&lt;/li&gt;&lt;li&gt;4S：6张以上黑桃，无单缺，温和的满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：正好5张黑桃，邀请 6S 或 6NT&lt;/li&gt;&lt;li&gt;5NT：满贯逼叫，定约选择 6S 或 6NT&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2s&#34;&gt;2S&lt;/h4&gt;&lt;p&gt;低花 Stayman，表示5-4以上低花，逼叫到局；开叫人通常答叫自己的4张以上低花，但也可以叫 2NT 表示 3-3-4-3 或者 3-3-3-4 牌型，之后应叫人可叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3H/3S：所叫花色单缺，但不代表满贯兴趣，可能只是帮助开叫人选择定约&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2nt-3c&#34;&gt;2NT/3C&lt;/h4&gt;&lt;p&gt;低花转移叫，保证6张以上低花，开叫人无条件转移至 3C/3D；其后应叫人可叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3H/3S：所叫花色单缺，但不代表满贯兴趣，可能只是帮助开叫人选择定约&lt;/li&gt;&lt;li&gt;3NT：温和的满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：RKCB（罗马关键张问叫，见下《满贯叫牌》节）&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3d-3h-3s&#34;&gt;3D/3H/3S&lt;/h4&gt;&lt;p&gt;所叫花色为单缺，其余花色不少于4张，无5张高花，逼叫到局&lt;/p&gt;&lt;h4 id=&#34;3nt&#34;&gt;3NT&lt;/h4&gt;&lt;p&gt;止叫&lt;/p&gt;&lt;h4 id=&#34;4c&#34;&gt;4C&lt;/h4&gt;&lt;p&gt;Gerber（盖伯问叫，见下《满贯叫牌》节）&lt;/p&gt;&lt;h4 id=&#34;4d-4h&#34;&gt;4D/4H&lt;/h4&gt;&lt;p&gt;Texas 转移叫，6张以上红心/黑桃，开叫人无条件转移到 4H/4S，之后应叫人可叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;任何非将牌花色为扣叫（见下《满贯叫牌》节）&lt;/li&gt;&lt;li&gt;4NT：RKCB&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;4nt-5nt&#34;&gt;4NT/5NT&lt;/h4&gt;&lt;p&gt;邀叫 6NT/7NT&lt;/p&gt;&lt;h3 id=&#34;2nt&#34;&gt;2NT&lt;/h3&gt;&lt;p&gt;开叫 2NT 表示 20-21 点平均牌型，应叫进程与 1NT 开叫之后的进程基本相当：&lt;/p&gt;&lt;h4 id=&#34;3c&#34;&gt;3C&lt;/h4&gt;&lt;p&gt;Stayman，保证至少一个4张高花套，开叫人答叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3D：无4张高花&lt;ul&gt;&lt;li&gt;3H/3S：Smolen，所叫花色4张，另一高花套5张，逼叫到局&lt;/li&gt;&lt;li&gt;4C/4D：所叫花色5张以上，满贯兴趣&lt;/li&gt;&lt;li&gt;4H/4S：止叫&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;3H：4张红心，同时可能有4张黑桃&lt;ul&gt;&lt;li&gt;3S：约定叫，4张以上红心，试探满贯&lt;/li&gt;&lt;li&gt;3NT：4张以上黑桃，定约选择 3NT 或 4S&lt;/li&gt;&lt;li&gt;4C/4D：所叫花色5张以上，满贯兴趣&lt;/li&gt;&lt;li&gt;4H/4S：止叫&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;3S：4张黑桃，同时否定4张红心&lt;ul&gt;&lt;li&gt;3NT：止叫，承诺4张红心&lt;/li&gt;&lt;li&gt;4C/4D：所叫花色5张以上，满贯兴趣&lt;/li&gt;&lt;li&gt;4H：约定叫，4张以上黑桃，试探满贯&lt;/li&gt;&lt;li&gt;4S：止叫&lt;/li&gt;&lt;li&gt;4NT：邀请 6NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3d&#34;&gt;3D&lt;/h4&gt;&lt;p&gt;Jacoby 转移叫，表示5张以上红心，开叫人无条件转移至 3H；其后应叫人再叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3S：5张以上红心，5张以上黑桃，满贯兴趣&lt;/li&gt;&lt;li&gt;3NT：正好5张红心，定约选择 3NT/4H&lt;/li&gt;&lt;li&gt;4C/4D：5张以上红心，所叫花色4张以上，逼叫到局&lt;/li&gt;&lt;li&gt;4H：6张以上红心，温和的满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：正好5张红心，邀请 6H 或 6NT&lt;/li&gt;&lt;li&gt;5NT：满贯逼叫，定约选择 6H 或 6NT&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3h&#34;&gt;3H&lt;/h4&gt;&lt;p&gt;Jacoby 转移叫，表示5张以上黑桃，开叫人无条件转移至 3S；其后应叫人再叫及后续进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3NT：正好5张黑桃，定约选择 3NT/4S&lt;/li&gt;&lt;li&gt;4C/4D：5张以上黑桃，所叫花色4张以上，逼叫到局&lt;/li&gt;&lt;li&gt;4H：5张以上红心，5张以上黑桃，定约选择 4H/4S&lt;/li&gt;&lt;li&gt;4S：6张以上黑桃，温和的满贯兴趣&lt;/li&gt;&lt;li&gt;4NT：正好5张黑桃，邀请 6S 或 6NT&lt;/li&gt;&lt;li&gt;5NT：满贯逼叫，定约选择 6S 或 6NT&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3s&#34;&gt;3S&lt;/h4&gt;&lt;p&gt;低花 Stayman，表示5-4以上低花，逼叫到局；开叫人答叫自己的4张以上低花，如无则叫 3NT，之后应叫人可叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4H/4S：所叫花色单缺&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3nt&#34;&gt;3NT&lt;/h4&gt;&lt;p&gt;止叫&lt;/p&gt;&lt;h4 id=&#34;4c&#34;&gt;4C&lt;/h4&gt;&lt;p&gt;Gerber（盖伯问叫，见下《满贯叫牌》节）&lt;/p&gt;&lt;h4 id=&#34;4d-4h&#34;&gt;4D/4H&lt;/h4&gt;&lt;p&gt;Texas 转移叫，保证6张以上 H/S，开叫人无条件转移到 4H/4S，之后应叫人可叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;任何非将牌花色为扣叫（见下《满贯叫牌》节）&lt;/li&gt;&lt;li&gt;4NT：RKCB&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;4nt-5nt&#34;&gt;4NT/5NT&lt;/h4&gt;&lt;p&gt;邀叫 6NT/7NT&lt;/p&gt;&lt;h3 id=&#34;2c&#34;&gt;2C&lt;/h3&gt;&lt;p&gt;强 2C 开叫表示22+大牌点，或17+大牌点且9+赢墩（高花定约）或10+赢墩（低花定约），局况有利时可以考虑降低半个赢墩要求；2C 开叫是逼叫，同伴持任何点力牌型均必须应叫，进程如下：&lt;/p&gt;&lt;h4 id=&#34;2d&#34;&gt;2D&lt;/h4&gt;&lt;p&gt;约定叫，示弱，0-7 点，任意牌型，开叫人后续叫品基本自然：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2H/2S/3C/3D：17+点，所叫花色5张以上，逼叫一轮&lt;ul&gt;&lt;li&gt;应叫人加叫一级表示高限牌力和满贯兴趣&lt;/li&gt;&lt;li&gt;其他叫品均为止叫&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2NT：22-24点，平均牌型（如果 20-21 点平均牌型则应开叫 2NT）&lt;/li&gt;&lt;li&gt;3NT：25-27点，平均牌型&lt;/li&gt;&lt;li&gt;4NT：28-30点，平均牌型&lt;/li&gt;&lt;li&gt;5NT：31-32点，平均牌型&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2h-2s-3c-3d&#34;&gt;2H/2S/3C/3D&lt;/h4&gt;&lt;p&gt;8+点，所叫花色5张以上，开叫人后续再叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2NT：23-24点，平均牌型i&lt;/li&gt;&lt;li&gt;3NT：对 3C/3D 应叫表示23-24点平均牌型；对 2H/2S 应叫则表示25-27点平均牌型&lt;/li&gt;&lt;li&gt;对应叫花色的加叫：自然，17+点，3张以上支持&lt;/li&gt;&lt;li&gt;任何新花色叫牌：自然，17+点，所叫花色5张以上&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2nt&#34;&gt;2NT&lt;/h4&gt;&lt;p&gt;8+点，平均牌型&lt;/p&gt;&lt;ul&gt;&lt;li&gt;后续叫牌就像应叫人开叫 2NT 一样&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;被敌方争叫时&#34;&gt;被敌方争叫时&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;如果被 Double，应叫人可以 Re-double 表示4张以上好的梅花，或者仍按上述体系叫牌&lt;/li&gt;&lt;li&gt;如果被盖叫，应叫人：&lt;ul&gt;&lt;li&gt;弱牌（0-7点）选择 Pass&lt;/li&gt;&lt;li&gt;Double 为惩罚性&lt;/li&gt;&lt;li&gt;所有花色叫品均为自然&lt;/li&gt;&lt;li&gt;无将叫品承诺对敌花色止张&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;1阶高花&#34;&gt;1阶高花&lt;/h3&gt;&lt;p&gt;开叫 1H 或 1S 表示11-21点，保证开叫花色5张以上；应叫人可以：&lt;/p&gt;&lt;h4 id=&#34;不叫&#34;&gt;不叫&lt;/h4&gt;&lt;p&gt;0-6点&lt;/p&gt;&lt;h4 id=&#34;1nt&#34;&gt;1NT&lt;/h4&gt;&lt;p&gt;7+点，无3张支持，逼叫一轮&lt;/p&gt;&lt;h4 id=&#34;加叫一阶-2h-2s&#34;&gt;加叫一阶（2H/2S）&lt;/h4&gt;&lt;p&gt;7-10点，3张以上支持，之后开叫人可以进行成局试探：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1H-2H-2S/1S-2S-2NT：直接的接力（relay）叫牌为短套试探，表示开叫人有一短套，应叫人再加一级接力问短套，开叫人叫出短套或者叫回开叫花色表示短套是已经越过的某个花色，应叫人可据此判断成局可能&lt;/li&gt;&lt;li&gt;除此以外的任何花色的3阶及以下再叫为长套试探，通常是带有大牌且3张以上，应叫人如果在该花色只有2或更少输墩则可进局，否则停在3阶；注意 1H-2H-2NT 是黑桃套的长套试探，因为 1H-2H-2S 是短套试探&lt;/li&gt;&lt;li&gt;3阶开叫花色：基于点力的进局邀请，通常是 17 点和没有单缺的情况&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;2nt&#34;&gt;2NT&lt;/h4&gt;&lt;p&gt;Jacoby，13+点，4张或3张好的开叫花色支持，要求开叫人进一步描述持牌，具体见下《满贯叫牌》节&lt;/p&gt;&lt;h4 id=&#34;4阶非开叫花色&#34;&gt;4阶非开叫花色&lt;/h4&gt;&lt;p&gt;Splinters，对开叫花色4张以上支持，所叫花色单缺，满贯兴趣&lt;/p&gt;&lt;h3 id=&#34;1阶低花&#34;&gt;1阶低花&lt;/h3&gt;&lt;p&gt;开叫 1C 或 1D 表示12-21点，保证开叫花色3张以上；4-4低花一般选择开叫 1D；应叫基本逻辑：&lt;/p&gt;&lt;h4 id=&#34;1h-1s&#34;&gt;1H/1S&lt;/h4&gt;&lt;p&gt;7-10点，所叫高花4张以上&lt;/p&gt;&lt;h4 id=&#34;2h-2s&#34;&gt;2H/2S&lt;/h4&gt;&lt;p&gt;11+点，所叫高花4张以上&lt;/p&gt;&lt;h4 id=&#34;1nt&#34;&gt;1NT&lt;/h4&gt;&lt;p&gt;8-10点，平均牌型&lt;/p&gt;&lt;h4 id=&#34;2nt&#34;&gt;2NT&lt;/h4&gt;&lt;p&gt;11+点，平均牌型&lt;/p&gt;&lt;h4 id=&#34;pass&#34;&gt;Pass&lt;/h4&gt;&lt;p&gt;0-6点且无5张低花&lt;/p&gt;&lt;h4 id=&#34;低花应叫&#34;&gt;低花应叫&lt;/h4&gt;&lt;p&gt;采用反加叫体系，即：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;1C-2C 和 1D-2D 表示10+点和4张开叫花色的好牌（通常没有4张高花，否则应该如前条叫高花），逼叫&lt;/li&gt;&lt;li&gt;1C-3C 和 1D-3D 表示6点以下但有5张开叫花色的弱牌&lt;/li&gt;&lt;li&gt;1D-2C：逼叫到局&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1C-2C 之后的开叫人再叫进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2D：自然，4张以上，通常为非均型牌（因为没有再叫 2NT），逼叫&lt;/li&gt;&lt;li&gt;2H/2S：自然，3张以上，逼叫，经常只为展示止张&lt;/li&gt;&lt;li&gt;2NT：12-14点，不逼叫&lt;/li&gt;&lt;li&gt;3C：自然，5张以上，不逼叫&lt;/li&gt;&lt;li&gt;3D：自然，4张以上，逼叫&lt;/li&gt;&lt;li&gt;3NT：18-19点，平均牌型&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;1D-2D 之后的开叫人再叫进程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2H/2S：自然，3张以上，逼叫，经常只为展示止张&lt;/li&gt;&lt;li&gt;2NT：12-14点，不逼叫&lt;/li&gt;&lt;li&gt;3C：自然，4张以上，逼叫&lt;/li&gt;&lt;li&gt;3D：自然，5张以上，不逼叫&lt;/li&gt;&lt;li&gt;3NT：18-19点，平均牌型&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;弱二&#34;&gt;弱二&lt;/h3&gt;&lt;p&gt;开叫 2D/2H/2S 是弱二开叫，表示10点以下，6张以上，主要点力集中于开叫花色，主要目的为阻击对手。&lt;/p&gt;&lt;p&gt;弱二开叫后，应叫方如果叫出任何新花色，都是强牌，强烈的进局愿望，至少逼叫一轮。应叫方如果牌力不足以成局，一般情况下应接受弱二定约。&lt;/p&gt;&lt;h2 id=&#34;应叫和再叫通用进程&#34;&gt;应叫和再叫通用进程&lt;/h2&gt;&lt;h3 id=&#34;跳再叫&#34;&gt;跳再叫&lt;/h3&gt;&lt;p&gt;开叫方跳叫自己的开叫花色（如 1C-1x-3C 或 1S-2D-3S）表示17-20点，所叫花色6张以上；相应的，一阶高花开叫在2盖1应叫后再叫原花色（如 1S-2C-2S）不承诺6张。&lt;/p&gt;&lt;h3 id=&#34;对应叫人花色的加叫&#34;&gt;对应叫人花色的加叫&lt;/h3&gt;&lt;p&gt;对应叫人所叫花色的加叫通常承诺4张支持，虽然偶尔也会持3张支持进行加叫。&lt;/p&gt;&lt;h3 id=&#34;第四花色逼叫&#34;&gt;第四花色逼叫&lt;/h3&gt;&lt;p&gt;当同伴间前三次叫牌为三种不同花色时，再叫第四花色是人为约定叫，至少逼叫一轮，如 1C-1D-1H-1S，或者 1D-1S-2C-2H 等；进行第四花色逼叫需要10+点和进局希望；此后开叫人应遵循下述优先级再叫：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;展示对同伴所叫花色的3张支持&lt;/li&gt;&lt;li&gt;再叫自己叫过的有额外实力的花色&lt;/li&gt;&lt;li&gt;叫 NT 承诺在第四花色持有止张&lt;/li&gt;&lt;li&gt;加叫第四花色表示持4张支持（很罕见）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;第四花色逼叫是一种保险机制，只在没有更好选择时采用；应叫人如果可以选择下列叫品则应该优先选择这些叫品：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;再叫自己的6张套&lt;/li&gt;&lt;li&gt;自己持有第四花色止张时叫 NT&lt;/li&gt;&lt;li&gt;对同伴花色持3张支持时进行延迟加叫&lt;/li&gt;&lt;li&gt;对同伴所叫第二套持4张支持时进行加叫&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;跳叫新花&#34;&gt;跳叫新花&lt;/h3&gt;&lt;p&gt;在同伴开叫1阶花色之后进行的新花跳叫采用 Soloway Jump Shift，可能是如下三种持牌之一：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;18-19点，平均牌型，跳叫自己最长的花色&lt;/li&gt;&lt;li&gt;15-18点，好的单套牌型，跳叫自己的长套&lt;/li&gt;&lt;li&gt;15-18点，对同伴开叫花色有3（如果开叫为高花）或4（如果开叫为低花）张支持，此外另有一个好的5张套，跳叫自己的5张套&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;开叫人看到同伴跳叫的新花之后应做接力（relay），即叫出此上最低的叫品，比如 1C-2H-2S，1C-2D-2H，此后应叫人依下述规则进一步澄清自己的持牌：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在最经济的水平再叫 NT，表示上述第1型，均型牌&lt;/li&gt;&lt;li&gt;再叫跳叫的花色，表示上述第2型，强的单套牌&lt;/li&gt;&lt;li&gt;再叫同伴开叫花色，表示上述第3型，对同伴有支持的双套牌，且没有单缺&lt;/li&gt;&lt;li&gt;叫出新的花色，表示上述第3型，对同伴有支持的双套牌，且再叫花色单缺&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;常用约定叫&#34;&gt;常用约定叫&lt;/h2&gt;&lt;h3 id=&#34;罗马关键张问叫-rkcb&#34;&gt;罗马关键张问叫（RKCB）&lt;/h3&gt;&lt;p&gt;用于花色定约的满贯问叫，关键张指A或将牌K，在一方用 4NT 开始 RKCB 问叫之后，同伴答叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;5C：1 或 4 张关键张&lt;/li&gt;&lt;li&gt;5D：0 或 3 张关键张&lt;/li&gt;&lt;li&gt;5H：2 或 5 张关键张，无将牌 Q&lt;/li&gt;&lt;li&gt;5S：2 或 5 张关键张，有将牌 Q&lt;/li&gt;&lt;li&gt;5NT：偶数张关键张，另加一个缺门&lt;/li&gt;&lt;li&gt;6阶叫牌：奇数张关键张，另加一个缺门&lt;ul&gt;&lt;li&gt;如果所叫花色低于将牌花色，单缺就是所叫花色&lt;/li&gt;&lt;li&gt;如果所叫花色就是将牌花色，单缺是比将牌花色高的某个花色&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果 4NT 后被干扰，采用 DOPI 约定，即 Double 表示 0 关键张而 Pass 表示 1 关键张。&lt;/p&gt;&lt;h3 id=&#34;rkcb-后的问叫&#34;&gt;RKCB 后的问叫&lt;/h3&gt;&lt;h4 id=&#34;将牌q问叫&#34;&gt;将牌Q问叫&lt;/h4&gt;&lt;p&gt;RKCB 答叫 5C/5D 之后，问叫方做接力叫（跳过将牌花色）是将牌Q问叫，答叫如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;叫回将牌：无将牌Q&lt;/li&gt;&lt;li&gt;5NT：有将牌Q，无边花K，有足以完成小满贯的余力&lt;/li&gt;&lt;li&gt;新花色：有将牌Q，所叫花色有K&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;大满贯试探&#34;&gt;大满贯试探&lt;/h4&gt;&lt;p&gt;问叫方6阶任何非将牌花色叫牌为大满贯试探，询问该花色控制，答叫如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;持第二轮以上控制（A或K或缺门或单张）时叫上大满贯&lt;/li&gt;&lt;li&gt;否则停在小满贯定约&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此叫品只适合问叫方有特定持牌的情况，不需要或不适合或无法使用5NT问K的情况。&lt;/p&gt;&lt;h3 id=&#34;盖伯-gerber-问叫&#34;&gt;盖伯（Gerber）问叫&lt;/h3&gt;&lt;p&gt;用于无将定约的满贯问叫，在无将开叫后任一方用 4C 开始 Gerber 问叫之后，同伴答叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;4D：0 或 4 张 A&lt;/li&gt;&lt;li&gt;4H：1 张 A&lt;/li&gt;&lt;li&gt;4S：2 张 A&lt;/li&gt;&lt;li&gt;4NT：3 张 A&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;杰可比-jacoby-2nt&#34;&gt;杰可比（Jacoby）2NT&lt;/h3&gt;&lt;p&gt;1H/1S 开叫后应叫 2NT 表示13+点（含牌型点），4张或3张好的开叫花色支持，并要求开叫人进一步描述持牌，以便确定满贯可能；Jacoby 2NT 是逼叫到局；开叫人按如下方法答叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;3C：草花单缺，如果下一轮再叫 4C 则表示草花缺门&lt;/li&gt;&lt;li&gt;3D：方块单缺，如果下一轮再叫 4D 则表示方块缺门&lt;/li&gt;&lt;li&gt;3H：如果红心是开叫花色，表示16+点和满贯兴趣，并要求应叫人进一步描述持牌；如果黑桃是开叫花色，表示红心单缺，下一轮再叫 4H 表示红心缺门&lt;/li&gt;&lt;li&gt;3S：如果黑桃是开叫花色，表示16+点和满贯兴趣，并要求应叫人进一步描述持牌；如果红心是开叫花色，表示黑桃单缺，下一轮再叫 4S 表示黑桃缺门&lt;/li&gt;&lt;li&gt;3NT：14-15点，平均牌型&lt;/li&gt;&lt;li&gt;4C：5张以上草花&lt;/li&gt;&lt;li&gt;4D：5张以上方块&lt;/li&gt;&lt;li&gt;4H：如果红心是开叫花色，表示低限点力（12-14），平均牌型（5-3-3-2 或 5-4-2-2），止叫；如果黑桃是开叫花色，表示另有5张红心&lt;/li&gt;&lt;li&gt;4S：如果黑桃是开叫花色，表示低限点力（12-14），平均牌型（5-3-3-2 或 5-4-2-2），止叫&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述叫品有时并不互斥，开叫人应该遵循下述优先级来做出取舍：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;优先展示第二个5张套，如果有的话（参见下面的说明）&lt;/li&gt;&lt;li&gt;否则优先展示单缺花色&lt;/li&gt;&lt;li&gt;对14-15点平均牌型叫 3NT&lt;/li&gt;&lt;li&gt;对12-14点较弱的牌叫到成局止叫&lt;/li&gt;&lt;li&gt;如果不是以上情况，则在3阶再叫开叫花色&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;需要注意的是，如果第二套很弱，则应该跳过上述第1条；关于“够强的第二套”的主流标准有两套：三顶张中的两张或五顶张中的三张（David Lindop），或者带 A 或 K 的坚实套（Larry Cohen）；我们倾向于前一种标准。&lt;/p&gt;&lt;p&gt;在上述开叫人的任何3阶再叫后，应叫人叫出任何非将牌花色为扣叫，表示第一轮控制（A 或缺门）；之后双方扣叫第一轮控制，如无则最低级别叫回将牌；或在有满贯希望时用 RKCB；在上述开叫人的任何再叫后，应叫人叫 4NT 为 RKCB。&lt;/p&gt;&lt;h3 id=&#34;扣叫-cue-bid&#34;&gt;扣叫（Cue Bid）&lt;/h3&gt;&lt;p&gt;在将牌已经确定之后的特定进程中叫出非将牌花色，表示在该花色中持有“控制”，是试探成局或满贯的重要手段；基本原理和方法如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;控制包括第一轮控制（A 或缺门）和第二轮控制（K 或单张）两级&lt;/li&gt;&lt;li&gt;通常先扣叫有第一轮控制的花色，只有第一轮控制齐全之后扣叫第二轮控制才有意义&lt;/li&gt;&lt;li&gt;扣叫进程开始后双方都依据“最经济”原则交替扣叫自己有第一轮控制的花色；如果乙方没有可扣的花色则在最经济水平叫回将牌；此后如果同伴继续扣叫则默认第一轮控制齐全，开始扣第二轮控制的花色&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;竞叫进程&#34;&gt;竞叫进程&lt;/h2&gt;&lt;h3 id=&#34;总墩数原理&#34;&gt;总墩数原理&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://www.bridgebum.com/law_of_total_tricks.php&#34;&gt;The Law of Total Tricks&lt;/a&gt;：在花色竞叫进程中，双方最长配合花色张数之和等于双方能获得最多赢墩数之和。&lt;/p&gt;&lt;h3 id=&#34;敌方开叫后&#34;&gt;敌方开叫后&lt;/h3&gt;&lt;p&gt;在敌方开叫后，我们任一方进行争叫：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;简单争叫：8-17点，5张以上；之后同伴如叫新花是逼叫&lt;/li&gt;&lt;li&gt;弱跳争叫：3-9点，6张以上，通常无局时采用&lt;/li&gt;&lt;li&gt;加倍：排除式加倍（&lt;a href=&#34;https://www.bridgebum.com/takeout_double.php&#34;&gt;Takeout Double&lt;/a&gt;），要求同伴叫出另外三套里最好的一套&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bridgebum.com/cappelletti.php&#34;&gt;Cappelletti&lt;/a&gt;：敌方开叫 1NT 之后的体系&lt;ul&gt;&lt;li&gt;Double：15+点，惩罚性加倍&lt;/li&gt;&lt;li&gt;2C：11-14点，6张以上单套（不确定花色），此后同伴叫牌：&lt;ul&gt;&lt;li&gt;Pass：6张以上草花&lt;/li&gt;&lt;li&gt;2D：人为接力（relay）叫，要求同伴叫 Pass/2H/2S/3C 分别表示方块/红心/黑桃/草花套&lt;/li&gt;&lt;li&gt;2H：6张以上红心&lt;/li&gt;&lt;li&gt;2S：6张以上黑桃&lt;/li&gt;&lt;li&gt;2NT：10+点，平均牌型，逼叫一轮，同伴可以叫自己的套或 3NT&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2D：5-4或4-5以上双高花，请同伴改叫到任一高花，此后同伴叫牌：&lt;ul&gt;&lt;li&gt;Pass：6张以上方块&lt;/li&gt;&lt;li&gt;2H/2S：自然叫&lt;/li&gt;&lt;li&gt;2NT：人为约定叫，10+点，逼叫一轮&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2H：5-5以上红心加一个低花&lt;ul&gt;&lt;li&gt;Pass：弱牌&lt;/li&gt;&lt;li&gt;2S：6张以上黑桃，无红心支持&lt;/li&gt;&lt;li&gt;2NT：无红心支持，要求叫出低花套&lt;/li&gt;&lt;li&gt;3C/3D：6张以上好套，无红心支持&lt;/li&gt;&lt;li&gt;3H：3张以上支持&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2S：5-5以上黑桃加一个低花&lt;ul&gt;&lt;li&gt;Pass：弱牌&lt;/li&gt;&lt;li&gt;2NT：无黑桃支持，要求叫出低花套&lt;/li&gt;&lt;li&gt;3C/3D/3H：6张以上好套，无黑桃支持&lt;/li&gt;&lt;li&gt;3S：3张以上支持&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;2NT：5-5以上双低花&lt;ul&gt;&lt;li&gt;3C/3D：弱牌，示选&lt;/li&gt;&lt;li&gt;3H/3S：6张以上好套，无低花支持&lt;/li&gt;&lt;li&gt;3NT：就打这个&lt;/li&gt;&lt;li&gt;4C/4D：3张以上&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bridgebum.com/michaels_cuebid.php&#34;&gt;Michaels Cue Bid&lt;/a&gt;：直接扣叫敌方开叫花色表示5-5以上双套&lt;ul&gt;&lt;li&gt;2C over 1C：5-5双高花&lt;/li&gt;&lt;li&gt;2D over 1D：5-5双高花&lt;/li&gt;&lt;li&gt;2H over 1H：5张黑桃加5张任一低花&lt;/li&gt;&lt;li&gt;2S over 1S：5张红心加5张任一低花&lt;/li&gt;&lt;li&gt;之后同伴通常选择自己较好的一套即可；再次扣叫敌方花色表示强牌、配合和成局/满贯兴趣；更高的叫牌都是关煞叫&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.bridgebum.com/unusual_2nt.php&#34;&gt;Unusual 2NT&lt;/a&gt;：在敌方花色开叫之后直接争叫 2NT 表示 5-5 以上双套&lt;ul&gt;&lt;li&gt;2NT over 1C：5-5红心加方块&lt;/li&gt;&lt;li&gt;2NT over 1D：5-5红心加梅花&lt;/li&gt;&lt;li&gt;2NT over 1H：5-5双低花&lt;/li&gt;&lt;li&gt;2NT over 1S：5-5双低花&lt;/li&gt;&lt;li&gt;之后同伴通常选择自己较好的一套即可&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;敌方争叫后&#34;&gt;敌方争叫后&lt;/h3&gt;&lt;p&gt;在我方开叫后敌方如进行争叫或 Double，应叫人：&lt;/p&gt;&lt;h4 id=&#34;叫新花&#34;&gt;叫新花&lt;/h4&gt;&lt;p&gt;逼叫&lt;/p&gt;&lt;h4 id=&#34;跳加叫开叫花色&#34;&gt;跳加叫开叫花色&lt;/h4&gt;&lt;p&gt;关煞性止叫&lt;/p&gt;&lt;h4 id=&#34;跳叫新花&#34;&gt;跳叫新花&lt;/h4&gt;&lt;p&gt;长套且开叫花色有配合&lt;/p&gt;&lt;h4 id=&#34;扣叫敌方花色&#34;&gt;扣叫敌方花色&lt;/h4&gt;&lt;p&gt;表示对开叫花色的限制性加叫&lt;/p&gt;&lt;h4 id=&#34;否定性加倍&#34;&gt;否定性加倍&lt;/h4&gt;&lt;p&gt;开叫方被敌人立刻争叫，应叫方立刻加倍是否定性加倍（&lt;a href=&#34;https://www.bridgebum.com/negative_double.php&#34;&gt;Negative Double&lt;/a&gt;），表示6+点，至少一个未叫花色4张，如果对敌方1阶争叫加倍通常有两个4张套&lt;/p&gt;&lt;ul&gt;&lt;li&gt;此后如敌方加叫上述敌方争叫花色，开叫方再次加倍为响应式加倍（&lt;a href=&#34;https://www.bridgebum.com/responsive_double.php&#34;&gt;Responsive Double&lt;/a&gt;），表示4-4以上双高套或双低套（与敌方所叫花色互斥）&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;支持性加倍&#34;&gt;支持性加倍&lt;/h4&gt;&lt;p&gt;应叫方被敌人立刻争叫，开叫方立刻加倍是支持性加倍（&lt;a href=&#34;https://www.bridgebum.com/support_double.php&#34;&gt;Support Double&lt;/a&gt;），表示对应叫方所叫花色3张支持。&lt;/p&gt;&lt;h4 id=&#34;莱本索尔-lebensohl&#34;&gt;莱本索尔 &lt;a href=&#34;https://www.bridgebum.com/lebensohl_after_1nt.php&#34;&gt;Lebensohl&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;同伴开叫 1NT，敌方争叫后我们如叫 2NT，为人为约定叫，要求同伴接力叫出 3C，然后我们 Pass 或叫出自己的花色即可，这一进程不逼叫，主要用于适时停叫；这一约定使所有其他进程都变得更具限定性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;任何3阶花色叫牌都是逼叫，之后同伴叫新花也是逼叫&lt;/li&gt;&lt;li&gt;加倍：排除式加倍（&lt;a href=&#34;https://www.bridgebum.com/takeout_double.php&#34;&gt;Takeout Double&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;Pass：逼叫式不叫，同伴可 Double 惩罚&lt;/li&gt;&lt;li&gt;3NT：否定4张以上未叫高花套，否定敌方花色止张&lt;ul&gt;&lt;li&gt;相反，2NT-3C-3NT 则表示有止张&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;扣叫敌方花色：保证4张以上未叫高花套，否定敌方花色止张&lt;ul&gt;&lt;li&gt;相反，2NT-3C-扣叫 则表示有止张&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;附-首攻&#34;&gt;附：首攻&lt;/h2&gt;&lt;h3 id=&#34;共通原则&#34;&gt;共通原则&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;不从带 A 的花色中首攻小牌&lt;/li&gt;&lt;li&gt;通常情况下不攻没有 K 支持的 A&lt;/li&gt;&lt;li&gt;通常情况下不攻自己含间张的花色，如 AQx、KJx、Qxx 等&lt;/li&gt;&lt;li&gt;如果看上去定约很可能达成，则宜采取较进取或反常规的首攻；反之如果定约看上去岌岌可危，宜采取保守的首攻&lt;/li&gt;&lt;li&gt;熟悉约定的首攻定式，避免同伴对自己持牌的错误猜断&lt;/li&gt;&lt;li&gt;同一花色中先出小再出大表示奇数张，先出大再出小表示偶数张，详见下《防守信号》节&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;对无将定约的首攻&#34;&gt;对无将定约的首攻&lt;/h3&gt;&lt;p&gt;首攻花色：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果从叫牌中得知同伴有某长套花色，通常首攻同伴叫过的花色&lt;/li&gt;&lt;li&gt;如果其他花色有进手张，首攻自己的长套是相当理想的选择&lt;/li&gt;&lt;li&gt;如果同伴未叫过牌，自己也无长套，则宜攻对方没叫过的花色，且优先高花&lt;/li&gt;&lt;li&gt;通常不攻庄家叫过的花色，但可以考虑明手叫过的花色&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;选定花色后依以下约定做出首攻：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;有 AK 时攻 A&lt;/li&gt;&lt;li&gt;大牌连张攻最大的一张，如 KQJ42 和 KQ93 攻 K，QJ1032 和 QJ952 攻 Q，J10985和 J1083 攻 J&lt;ul&gt;&lt;li&gt;攻 Q 表示有 J 没有 K，但可能有 A；攻 J 表示有 10 没有 Q，但可能有 K；所以 AJ10xx 和 KJ10x 攻 J，AQJx 攻 Q，Q109xx 攻 10&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;没有连张的长套攻第四张大牌（长四）&lt;/li&gt;&lt;li&gt;三张带一张大牌的套，攻最小的一张&lt;ul&gt;&lt;li&gt;所以看到小点数的首攻表示上面有大牌&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;三张小牌，首攻中间一张，后续按照中-大-小出&lt;ul&gt;&lt;li&gt;所以看到大点数的首攻表示上面没有大牌，要么是双张，要么是三张小牌&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;对花色定约的首攻&#34;&gt;对花色定约的首攻&lt;/h3&gt;&lt;p&gt;首攻花色：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果敌方可能利用短将牌将吃，或者有交叉将吃机会，宜首攻将牌&lt;/li&gt;&lt;li&gt;如果我方有将吃机会，宜首攻自己或同伴的短套&lt;/li&gt;&lt;li&gt;如果敌方有可能快速垫牌，宜尽快兑现我方赢墩，尤其是敌方短套&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;选定花色后依以下约定做出首攻：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;双张攻大牌&lt;/li&gt;&lt;li&gt;有 AK 时攻 A&lt;/li&gt;&lt;li&gt;大牌连张攻最大的一张，如 KQJ42 和 KQ93 攻 K，QJ1032 和 QJ952 攻 Q，J10985和 J1083 攻 J&lt;ul&gt;&lt;li&gt;攻 Q 表示有 J 没有 K，但可能有 A；攻 J 表示有 10 没有 Q，但可能有 K；所以 AJ10xx 和 KJ10x 攻 J，AQJx 攻 Q，Q109xx 攻 10&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;没有连张的套攻第三或第五张大牌（长三长五）&lt;ul&gt;&lt;li&gt;后续出牌正确表达张数信号，与无将定约的差异是因为花色定约更关注张数，而无将定约更关心态度&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;对满贯定约的首攻&#34;&gt;对满贯定约的首攻&lt;/h3&gt;&lt;p&gt;对敌方自愿叫到的满贯定约的首攻有特殊性，可能与前述原则相悖。&lt;/p&gt;&lt;h4 id=&#34;对大满贯定约的首攻&#34;&gt;对大满贯定约的首攻&lt;/h4&gt;&lt;p&gt;无论什么赛制，好的牌手对叫上大满贯都会相对保守，主动叫到大满贯定约很少会有明显的失墩（除非叫牌出现失误），所以对大满贯定约通常采取保护性首攻，以不吃亏为主要目标，即使有 A 也不宜贸然兑现。&lt;/p&gt;&lt;h4 id=&#34;对小满贯定约的首攻&#34;&gt;对小满贯定约的首攻&lt;/h4&gt;&lt;p&gt;对抗花色小满贯定约：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可以考虑攻边花 A（即使没有 K），目的是看到明手的牌和同伴的信号后再作出关键一击；但此策略并非万能，也有可能导致损失&lt;/li&gt;&lt;li&gt;如果有一个边花 A 的同时还有一个与同伴有配合、有望建立的花色，应优先攻配合的花色，保留 A 作为之后的进手张&lt;/li&gt;&lt;li&gt;如果敌方主要依赖牌型而非点力叫到满贯，首攻将牌是不错的选择&lt;/li&gt;&lt;li&gt;如果自己有边花单张，且同伴可能有进手张，首攻单张是不错的选择&lt;/li&gt;&lt;li&gt;如果自己有边花缺门，宜攻同伴有望进手的花色，并用花色选择信号告知自己的缺门花色，以期获得将吃&lt;/li&gt;&lt;li&gt;如果同伴可能有边花缺门，可以考虑首攻该花色&lt;ul&gt;&lt;li&gt;如果可能是单张，同时自己有额外进手（尤其是将牌中的进手）也可考虑&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对抗无将小满贯定约：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对无将小满贯定约不宜首攻 A&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;同伴加倍敌方满贯之后&#34;&gt;同伴加倍敌方满贯之后&lt;/h4&gt;&lt;p&gt;对敌方主动叫上的满贯的加倍非惩罚，而是 &lt;a href=&#34;https://www.bridgebum.com/lightner_double.php&#34;&gt;Lightner Double&lt;/a&gt;，即针对满贯的首攻指示性加倍，我们须按约定作出首攻：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不要首攻我方叫过的任何花色&lt;/li&gt;&lt;li&gt;不要首攻将牌&lt;/li&gt;&lt;li&gt;如果明手做过花色叫牌，优先攻该花色&lt;/li&gt;&lt;li&gt;如果庄家做过将牌以外的花色叫牌，攻该花色&lt;/li&gt;&lt;li&gt;反常的首攻，通常是同伴有一个缺门，努力找出这个花色&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;进阶&#34;&gt;进阶&lt;/h3&gt;&lt;p&gt;经验丰富的搭档可以考虑参考 &lt;a href=&#34;http://www.dgbrg.com/13P/a/13p/articles/04-gfjq/04-gfjq-048/04-gfjq-048-01.htm&#34;&gt;桥牌杂志首攻法&lt;/a&gt;。&lt;/p&gt;&lt;h2 id=&#34;附-防守信号&#34;&gt;附：防守信号&lt;/h2&gt;&lt;p&gt;防守方无法看到对方的牌，就需要利用小牌在跟牌、垫牌上的选择和变化来描述自己的牌型、牌点位置和意图；信号规则是公开的，任一方的信息双方牌手都应共享，不得隐藏。最常见的防守信号包括：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;态度信号：表达对该花色的态度，先大后小表示欢迎，先小后大表示不欢迎；常用于同伴首攻后的跟牌&lt;/li&gt;&lt;li&gt;张数信号：表示自己在该花色中张数的奇偶性，先大后小表示偶数张，先小后大表示奇数张&lt;ul&gt;&lt;li&gt;花色定约的将牌花色中的张数信号与一般张数信号相反，先大后小表示3张将牌，先小后大表示2或4张将牌&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;花色选择信号：通过牌点大小告诉同伴自己对其他花色的态度，常见用法：&lt;ul&gt;&lt;li&gt;花色定约中打出让同伴将吃的牌张时，小牌表示自己在除将牌和本花色以外较低的花色中有进手，大牌表示自己在除将牌和本花色以外较高的花色中有进手，同伴可以据此回攻让自己进手从而获得第二次将吃机会&lt;/li&gt;&lt;li&gt;无将定约中同伴兑现长套赢墩时垫牌，小牌表示比较欢迎转攻除垫的花色以外较低花色，大牌表示比较欢迎转攻除垫的花色以外较高花色&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;垫牌信号：在第一次垫牌时，奇数点表示喜欢所垫花色，偶数点表示不喜欢&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;前三种防守信号有时并不容易分辨，尤其是态度信号和花色选择信号，当无法准确判断信号类型时，可以按照上列优先级判断，即：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不确定时按态度信号处理&lt;/li&gt;&lt;li&gt;确定不是态度信号时按张数信号处理&lt;/li&gt;&lt;li&gt;确定不是态度和张数信号时才是花色选择信号&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上面列出的两种花色选择信号的场景都是不易混淆的，也是最常用的场景。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Doom Emacs 配置</title>
       <link>/posts/doom-emacs-config/</link>
       <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
       
       <guid>/posts/doom-emacs-config/</guid>
       <description>&lt;blockquote&gt;&lt;p&gt;这份配置基于 Emacs 模式的按键组合，没有启用 Doom Emacs 缺省的 &lt;code&gt;evil&lt;/code&gt; 模式，如果希望使用类 Vim 的按键方式，可以参考其他一些大牛，比如的 &lt;a href=&#34;https://tecosaur.github.io/emacs-config/config.html&#34;&gt;Tec Osaur&lt;/a&gt; 的非常有教益的版本。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&lt;p&gt;Doom Emacs 的配置都在变量 &lt;code&gt;doom-user-dir&lt;/code&gt; 指向的目录下（根据安装时的选择可能是 &lt;code&gt;~/.doom.d/&lt;/code&gt; 或 &lt;code&gt;~/.config/doom/&lt;/code&gt; ），主要是三个文件：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;init.el&lt;/code&gt; ：启用/停用 Doom 预先配置好的模块（ &lt;em&gt;modules&lt;/em&gt; ）；&lt;/li&gt;&lt;li&gt;&lt;code&gt;package.el&lt;/code&gt; ：自己另行下载安装的软件包（ &lt;em&gt;packages&lt;/em&gt; ），或对已启用的软件包版本进行配置，Doom Emacs 使用 &lt;code&gt;straight.el&lt;/code&gt; 包管理器 &lt;a href=&#34;https://github.com/radian-software/straight.el&#34;&gt;→&lt;/a&gt;；&lt;/li&gt;&lt;li&gt;&lt;code&gt;config.el&lt;/code&gt; ：各种配置，大部分预制模块不需要或者只需要少许配置，因为 Doom 已经做了相对好的缺省安排，自行安装的包则需要做相应的配置；当然如果对 Doom 提供的缺省安排不满意，也可以在此动手覆盖。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要更改配置就编辑这三个文件即可，但我们有更好的选择，那就是 &lt;em&gt;literate config&lt;/em&gt; ，这是个很酷的功能 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，我们把所有配置代码都用 &lt;code&gt;org-babel&lt;/code&gt; 的源码块（ &lt;em&gt;source block&lt;/em&gt; ）写在这个 &lt;code&gt;config.org&lt;/code&gt; 文件中（对，你现在看到的就是这个文件本身），然后用 &lt;code&gt;org-babel&lt;/code&gt; 提供的 &lt;code&gt;org-babel-tangle-file&lt;/code&gt; 函数来自动生成上述三个文件。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;emacs --batch --eval &lt;span class=&#34;s2&#34;&gt;&amp;#34;(progn (require &amp;#39;org) (setq org-confirm-babel-evaluate nil) (org-babel-tangle-file \&amp;#34;~/.config/doom/config.org\&amp;#34;))&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 &lt;em&gt;bootstrap&lt;/em&gt; 过程只需要做一次，之后 Doom 提供的 &lt;code&gt;literate&lt;/code&gt; 模块会自动维护。&lt;/p&gt;&lt;p&gt;无论通过什么方式，配置文件变化后要使用 &lt;code&gt;doom sync&lt;/code&gt; 命令来更新环境（这个命令首先会自动从本文件出发重新构造新的配置文件），还可以用 &lt;code&gt;doom doctor&lt;/code&gt; 来检查配置中可能存在的问题（最常见的问题是依赖的外部程序找不到或者没配好）；Doom Emacs 更新比较频繁，而且鼓励用户滚动更新紧跟开发分支，所以可以定期用 &lt;code&gt;doom upgrade&lt;/code&gt; 来更新 Doom Emacs 本身及所有启用的包。&lt;/p&gt;&lt;p&gt;本着不折腾的原则，我对功能实现方案总的选择标准是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;能用预制模块的尽量用；&lt;/li&gt;&lt;li&gt;能用缺省配置的尽量用；&lt;/li&gt;&lt;li&gt;重视持续维护和移植的代价；&lt;/li&gt;&lt;li&gt;还是不喜欢 &lt;code&gt;evil&lt;/code&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;预制模块&#34;&gt;预制模块&lt;/h2&gt;&lt;p&gt;Doom 提供的大量预制模块大多是当前优选，难以确定的地方也提供了主流方案多选一，并进行了比较恰当的配置，是宝藏，我的配置主要以这些预制模块为主。&lt;/p&gt;&lt;p&gt;如果不清楚某个模块效果到底如何，可以启用试试；&lt;a href=&#34;https://docs.doomemacs.org/latest/#/modules&#34;&gt;官方文档&lt;/a&gt;虽然还不完整，但已经挺有用了，可以了解每个模块的基本配置项、依赖和一些常见问题，千万不要错过。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--init.el&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34; collapsed=&#34;t&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; init.el -*- lexical-binding: t; -*-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;doom!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:input&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-input&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:completion&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-completion&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:ui&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-ui&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:editor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-editor&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-emacs&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:term&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-term&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:checkers&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-checkers&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:tools&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-tools&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:os&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-os&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:lang&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-lang&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:email&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-email&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:app&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-app&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nv&#34;&gt;&amp;lt;&amp;lt;doom-config&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本设置&#34;&gt;基本设置&lt;/h3&gt;&lt;p&gt;Doom 的 &lt;code&gt;:config&lt;/code&gt; 缺省配置大多很好，少数需要定制的后面再说；另外很重要的是启用 &lt;code&gt;literate&lt;/code&gt; 模块。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-config&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;literate&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+bindings&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+smartparens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;用户界面&#34;&gt;用户界面&lt;/h3&gt;&lt;p&gt;这部分包含了 Doom 的 &lt;code&gt;:completion&lt;/code&gt; &lt;code&gt;:ui&lt;/code&gt; &lt;code&gt;:editor&lt;/code&gt; &lt;code&gt;:emacs&lt;/code&gt; &lt;code&gt;:term&lt;/code&gt; &lt;code&gt;:checkers&lt;/code&gt; &lt;code&gt;:tools&lt;/code&gt; &lt;code&gt;:os&lt;/code&gt; 几大类别。&lt;/p&gt;&lt;p&gt;无处不在的自动补全功能，目前最简单好用的还是 &lt;code&gt;company&lt;/code&gt; 搭配 &lt;code&gt;vertico&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-completion&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;company&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+childframe&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; the ultimate code completion backend&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(corfu +orderless +dabbrev +icons)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;c1&#34;&gt;; complete with cap(f), cape and a flying feather!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;helm                      ; the *other* search engine for love and life&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ido                       ; the other *other* search engine...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ivy                       ; a search engine for love and life&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vertico&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+childframe&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;; the search engine of the future&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里面有偏视觉和娱乐的（前者如 &lt;code&gt;hl-todo&lt;/code&gt; &lt;code&gt;ligatures&lt;/code&gt; 后者如 &lt;code&gt;doom-quit&lt;/code&gt; ），但大多数是很实用的，比如 &lt;code&gt;window-select&lt;/code&gt; 大幅强化了多窗口时切换窗口 &lt;code&gt;C-x o&lt;/code&gt; 的体验（实际使用的是 &lt;code&gt;ace-window&lt;/code&gt; ）。另外 &lt;code&gt;unicode&lt;/code&gt; 这个非常重要，如果不打开会有很多中文显示方面的问题。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-ui&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;deft                      ; notational velocity for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;doom&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; what makes DOOM look the way it does&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;doom-dashboard&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; a nifty splash screen for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;doom-quit                 ; DOOM quit-message prompts when you quit Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;emoji&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+unicode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; 🙂&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;hl-todo&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;hydra&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;indent-guides             ; highlighted indent columns&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ligatures&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+extra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; ligatures and symbols to make your code pretty again&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;minimap                   ; show a map of the code on the side&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;modeline&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;; snazzy, Atom-inspired modeline, plus API&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;nav-flash&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;; blink cursor line after big motions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;neotree                   ; a project drawer, like NERDTree for vim&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ophints&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; highlight the region an operation acts on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;popup&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+all&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+defaults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; tame sudden yet inevitable temporary windows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;tabs                      ; a tab bar for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;treemacs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; a project drawer, like neotree but cooler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;unicode&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;; extended unicode support for various languages&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vc-gutter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+pretty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;; vcs diff in the fringe&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;vi-tilde-fringe           ; fringe tildes to mark beyond EOB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;window-select&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; visually switch windows&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;workspaces&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; tab emulation, persistence &amp;amp; separate workspaces&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;zen                       ; distraction-free coding or writing&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编辑相关的模块这里，我做的最大选择是不用 &lt;code&gt;evil&lt;/code&gt; ，当然很多 Spacemacs 和 Doom 用户都会选择这个模式。这里要特别提一下的是 &lt;code&gt;lipsy&lt;/code&gt; ，这是针对 Lisp 类语言的一个编辑模式，非常巧妙的实现了单按键的光标快速移动和编辑操作，但不需要切 Vim 模式，我认为比传统的 &lt;code&gt;paredit&lt;/code&gt; 和 &lt;code&gt;smartparens&lt;/code&gt; 都更高明。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-editor&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(evil +everywhere)        ; come to the dark side, we have cookies&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;file-templates&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; auto-snippets for empty files&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;fold&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; (nigh) universal code folding&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(format +onsave)          ; automated prettiness&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;god                       ; run Emacs commands without modifier keys&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;lispy&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; vim for lisp, for people who don&amp;#39;t like vim&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;multiple-cursors&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; editing in many places at once&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;objed                     ; text object editing for the innocent&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;parinfer                  ; turn lisp into python, sort of&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;rotate-text               ; cycle region at point between text candidates&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;snippets&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;; my elves. They type so I don&amp;#39;t have to&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;word-wrap&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;; soft wrapping with language-aware indent&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些 Emacs 常规功能，基本都开启就行了。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-emacs&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dired&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+dirvish&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; making dired pretty [functional]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;electric&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;; smarter, keyword-based electric-indent&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ibuffer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+icons&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; interactive buffer management&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;undo&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; persistent, smarter undo for your inevitable mistakes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;vc&lt;/span&gt;                          &lt;span class=&#34;c1&#34;&gt;; version-control and Emacs, sitting in a tree&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Doom 支持几种内置的终端模拟器，效果最好的应该是 &lt;code&gt;vterm&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-term&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;eshell                    ; the elisp shell that works everywhere&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;shell                     ; simple shell REPL for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;term                      ; basic terminal emulator for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;vterm&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; the best terminal emulation in Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于拼写检查，我试了各种组合，目前最好的应该还是 &lt;code&gt;flyspell&lt;/code&gt; 和 &lt;code&gt;aspell&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-checkers&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+childframe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; tasing you for every semicolon you forget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;spell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+aspell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+flyspell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; tasing you for misspelling mispelling&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;grammar                   ; tasing grammar mistake every you make&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一组工具我基本都是缺省选择，值得一提的是 &lt;code&gt;magit&lt;/code&gt; 真棒，用起来简直上瘾，连写 &lt;em&gt;commit message&lt;/em&gt; 都变得香甜了。注意 &lt;code&gt;lsp&lt;/code&gt; 要打开，后面配置很多编程语言时会用到。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-tools&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ansible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;biblio                    ; Writes a PhD for you (citation needed)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;collab                    ; buffers with friends&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debugger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; FIXME stepping through code, to help you add bugs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;direnv&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;docker&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;editorconfig              ; let someone else argue about tabs vs spaces&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ein&lt;/span&gt;                         &lt;span class=&#34;c1&#34;&gt;; tame Jupyter notebooks with emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+overlay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;; run code, run (also, repls)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lookup&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+dictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;; navigate your code and its documentation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+peek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; M-x vscode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;magit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+forge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; a git porcelain for Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;make&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; run make tasks from Emacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;pass                      ; password manager for nerds&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;pdf&lt;/span&gt;                         &lt;span class=&#34;c1&#34;&gt;; pdf enhancements&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;prodigy                   ; FIXME managing external services &amp;amp; code builders&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;taskrunner                ; taskrunner for all your projects&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;terraform                 ; infrastructure as code&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;tmux                      ; an API for interacting with tmux&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;tree-sitter&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; syntax and parsing, sitting in a tree...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;upload                    ; map local to remote projects via ssh/ftp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个都是与操作系统有关的补丁，前一个 Mac 用户启用，后一个则都应该启用。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-os&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IS-MAC&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;macos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; improve compatibility with macOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tty&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+osc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; improve the terminal Emacs experience&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编程语言&#34;&gt;编程语言&lt;/h3&gt;&lt;p&gt;Doom 提供了几乎所有主流语言的预制模块，大部分都提供了对 LSP 的支持，有些 &lt;em&gt;language server&lt;/em&gt; 可以直接在 Emacs 中下载配置，但有些需要另外安装配置。有不少 &lt;em&gt;language server&lt;/em&gt; 实现不太好，所以需要自己判断，下面是我启用的一些用得到的语言，大部分都启用了 LSP，可以用 &lt;code&gt;doom doctor&lt;/code&gt; 来确认需要另外配置的外部支持软件。另一个值得尝试的选项是 &lt;code&gt;+tree-sitter&lt;/code&gt; ，一个强大的静态代码分析插件，官方文档中没有，但实际上存在。另外，无论你主要用什么编程语言， &lt;code&gt;emacs-lisp&lt;/code&gt; 和 &lt;code&gt;org&lt;/code&gt; 这俩都应该启用，否则还用什么 Emacs 啊！&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-lang&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;agda                      ; types of types of types of types...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;beancount                 ; mind the GAAP&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(cc +lsp)                 ; C &amp;gt; C++ == 1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;clojure&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; java with a lisp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;common-lisp               ; if you&amp;#39;ve seen one lisp, you&amp;#39;ve seen them all&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;coq                       ; proofs-as-programs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;crystal                   ; ruby at the speed of c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;csharp                    ; unity, .NET, and mono shenanigans&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; config/data formats&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(dart +flutter)           ; paint ui and not much else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;dhall&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;elixir                    ; erlang done right&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;elm                       ; care for a cup of TEA?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;emacs-lisp&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; drown in parentheses&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;erlang                    ; an elegant language for a more civilized age&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ess                       ; emacs speaks statistics&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;factor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;faust                     ; dsp, but you get to keep your soul&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;fortran                   ; in FORTRAN, GOD is REAL (unless declared INTEGER)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;fsharp                    ; ML stands for Microsoft&amp;#39;s Language&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;fstar                     ; (dependent) types and (monadic) effects and Z3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;gdscript                  ; the language you waited for&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;; the hipster dialect&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(graphql +lsp)            ; Give queries a REST&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;haskell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;              &lt;span class=&#34;c1&#34;&gt;; a language that&amp;#39;s lazier than I am&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;hy                        ; readability of scheme w/ speed of python&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;idris                     ; a language you can depend on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+tree-sitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; At least it ain&amp;#39;t XML&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;java&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;; the poster child for carpal tunnel syndrome&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;javascript&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+tree-sitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;c1&#34;&gt;; all(hope(abandon(ye(who(enter(here))))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;julia                     ; a better, faster MATLAB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;kotlin                    ; a better, slicker Java(Script)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;latex&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;; writing papers in Emacs has never been so fun&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;lean                      ; for folks with too much to prove&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ledger                    ; be audit you can be&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;lua                       ; one-based indices? one-based indices&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;markdown&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+grip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; writing docs for people to ignore&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;nim                       ; python + lisp at the speed of c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;nix                       ; I hereby declare &amp;#34;nix geht mehr!&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;ocaml                     ; an objective camel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+dragdrop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+gnuplot&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; organize your plain life in plain text&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nv&#34;&gt;+hugo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+journal&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nv&#34;&gt;+jupyter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+noter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nv&#34;&gt;+pandoc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+present&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nv&#34;&gt;+pretty&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+roam2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;php                       ; perl&amp;#39;s insecure younger brother&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;plantuml&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;; diagrams for confusing people more&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;purescript                ; javascript, but functional&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+pyright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; beautiful is better than ugly&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;qt                        ; the &amp;#39;cutest&amp;#39; gui framework ever&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;racket                    ; a DSL for DSLs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;raku                      ; the artist formerly known as perl6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;rest&lt;/span&gt;                        &lt;span class=&#34;c1&#34;&gt;; Emacs as a REST client&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;rst                       ; ReST in peace&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(ruby +rails)             ; 1.step {|i| p &amp;#34;Ruby is #{i.even? ? &amp;#39;love&amp;#39; : &amp;#39;life&amp;#39;}&amp;#34;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rust&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+tree-sitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; Fe2O3.unwrap().unwrap().unwrap().unwrap()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;scala                     ; java, but good&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(scheme +guile)           ; a fully conniving family of lisps&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sh&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+tree-sitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;; she sells {ba,z,fi}sh shells on the C xor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;sml&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;solidity                  ; do you need a blockchain? No.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;swift                     ; who asked for emoji variables?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;terra                     ; Earth and Moon in alignment for performance.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;web&lt;/span&gt;                         &lt;span class=&#34;c1&#34;&gt;; the tubes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;yaml                      ; JSON, but readable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zig&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;; C, but simpler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;输入法&#34;&gt;输入法&lt;/h3&gt;&lt;p&gt;增加一些输入法，在 macOS 系统下基本不需要。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-input&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;bidi                      ; (tfel ot) thgir etirw uoy gnipleh&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;chinese&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;japanese&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;layout                    ; auie,ctsrnm is the superior home row&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;万能的-emacs&#34;&gt;万能的 Emacs&lt;/h3&gt;&lt;p&gt;有人会用 Emacs 来做任何事，包括电子邮件、IRC、RSS 等等，甚至听歌看视频，目前我只用邮件。&lt;/p&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-email&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;executable-find&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+org&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+gmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;notmuch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(wanderlust +gmail)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a id=&#34;code-snippet--doom-app&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;calendar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;emms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;everywhere                ; *leave* Emacs!? You must be joking&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;irc                       ; how neckbeards socialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;(rss +org)                ; emacs as an RSS reader&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;twitter                   ; twitter client https://twitter.com/vnought&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;基本设置&#34;&gt;基本设置&lt;/h2&gt;&lt;p&gt;这里是一些只要 Emacs 启动就需要尽快设置的内容，不需要考虑延迟加载的一些设置，包括一些 Emacs 本身的全局设置，也包括一些需要尽快加载的模块和包的基本设置。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; config.el -*- lexical-binding: t; -*-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;个人信息&#34;&gt;个人信息&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;user-full-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Neo Lee&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;user-mail-address&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;neo@soulhacker.me&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更好的缺省值&#34;&gt;更好的缺省值&lt;/h3&gt;&lt;p&gt;Doom 大部分的缺省配置都是优化且实用的，但还是有少量的需要修改。其中 &lt;code&gt;word-wrap-by-category&lt;/code&gt; 这个选项是 Emacs 28 新加的，修复了 CJK 语言文本自动换行的老 bug。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq-default&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;window-combination-resize&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;x-stretch-cursor&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;yas-triggers-in-field&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;undo-limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;auto-save-default&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;scroll-preserve-screen-position&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;always&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;scroll-margin&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;word-wrap-by-category&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nv&#34;&gt;all-the-icons-scale-factor&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-subword-mode&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为我不用 &lt;code&gt;evil&lt;/code&gt; 所以需要给 &lt;em&gt;local leader&lt;/em&gt; 一个方便的组合键。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C-z&amp;#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-localleader-alt-key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C-z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想显示行号，将这两个变量设为 &lt;code&gt;t&lt;/code&gt; ；如果想显示相对行号，将第二个变量值设为 &lt;code&gt;&#39;relative&lt;/code&gt; 或 &lt;code&gt;&#39;visual&lt;/code&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;display-line-numbers&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;display-line-numbers-type&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Org 的根目录需要尽早设置。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/Code/Org/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;缺省配置下 &lt;code&gt;treemacs&lt;/code&gt; 只会显示文件的 &lt;code&gt;git&lt;/code&gt; 状态，改为 &lt;code&gt;&#39;extended&lt;/code&gt; 可以显示文件和目录的状态，另一个选项 &lt;code&gt;&#39;deferred&lt;/code&gt; 似乎有问题；这个选项要在 &lt;code&gt;treemacs&lt;/code&gt; 加载前设置。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+treemacs-git-mode&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;extended&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个开关可以让 &lt;code&gt;treemacs&lt;/code&gt; 将空目录尽可能合并为一项来显示，数值代表同时能合并显示的目录数上限。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;treemacs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;treemacs-collapse-dirs&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外我们习惯自动打开 &lt;code&gt;treemacs&lt;/code&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;window-setup-hook&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;treemacs&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 PlantUML 用本地模式比较靠谱。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;plantuml-jar-path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;user-emacs-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;plantuml/plantuml.jar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;plantuml-default-exec-mode&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;jar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;非图形界面下运行&#34;&gt;非图形界面下运行&lt;/h3&gt;&lt;p&gt;有时我们无法在图形界面下运行 Emacs，这时就需要下面这些 &lt;em&gt;tweak&lt;/em&gt; ：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-graphic-p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-c b&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;treemacs-select-window&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mouse-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;scroll-down-line&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mouse-5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;scroll-up-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;字体和主题&#34;&gt;字体和主题&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+main-font&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Iosevka Fixed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+unicode-font&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Sarasa Fixed SC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-font&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;font-spec&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:family&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+main-font&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:size&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:weight&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;doom-big-font&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;font-spec&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:family&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+main-font&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:size&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:weight&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;doom-variable-pitch-font&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;font-spec&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:family&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+main-font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; inherits :size from doom-font&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;doom-serif-font&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;font-spec&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:family&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+main-font&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:weight&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;light&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;doom-unicode-font&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;font-spec&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:family&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+unicode-font&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-themes-enable-bold&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;doom-themes-enable-italic&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随系统切换 light 和 dark mode 主题，利用 macOS 下 &lt;code&gt;emacs-plus&lt;/code&gt; 增加的 &lt;code&gt;ns-system-appearance-change-functions&lt;/code&gt; 钩子来实现。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+light-theme&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;doom-nord-light&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;+dark-theme&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;doom-city-lights&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+apply-theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;appearance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;Load theme, taking current system APPEARANCE into consideration.&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mapc&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;disable-theme&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;custom-enabled-themes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pcase&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;appearance&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;&amp;#39;light&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load-theme&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+light-theme&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;&amp;#39;dark&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load-theme&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+dark-theme&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook!&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;ns-system-appearance-change-functions&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;+apply-theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;状态条&#34;&gt;状态条&lt;/h3&gt;&lt;p&gt;Doom 缺省的状态条是 &lt;code&gt;doom-modeline&lt;/code&gt; ，可能是几个状态条方案里最漂亮的一个，不过这问题见仁见智，选自己喜欢的就好。目前版本缺省配置就挺好，以前的 &lt;em&gt;hacking&lt;/em&gt; 都被我删了。&lt;/p&gt;&lt;h3 id=&#34;切换窗口&#34;&gt;切换窗口&lt;/h3&gt;&lt;p&gt;预制模块 &lt;code&gt;ace-window&lt;/code&gt; 加强了 &lt;code&gt;C-x o&lt;/code&gt; 的功能，当多于2个窗口时会高亮显示每个窗口左上角的一个字母，按下这个字母就切换到对应窗口，但这个字母的显示非常小，很不醒目，解决方案很简单，定制这个字母显示的样式，把它变大再加上红色底，就醒目了。 &lt;code&gt;ace-window&lt;/code&gt; 还有不少别的功能，比如激活之后可以按 &lt;code&gt;x&lt;/code&gt; 来删除当前窗口，按 &lt;code&gt;m&lt;/code&gt; 来与选择的窗口交换内容等，具体可参考&lt;a href=&#34;https://github.com/abo-abo/ace-window&#34;&gt;官网说明&lt;/a&gt;。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;custom-set-faces!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aw-leading-char-face&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:foreground&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:background&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:weight&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bold&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:height&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:box&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:line-width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:color&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;花式符号&#34;&gt;花式符号&lt;/h3&gt;&lt;p&gt;预制模块 &lt;code&gt;ligature&lt;/code&gt; 及其 &lt;code&gt;+extra&lt;/code&gt; 选项会用一些漂亮的文字符号来替代一些固定文本组合，比如用 &lt;code&gt;λ&lt;/code&gt; 代替 Lisp 类语言里的 &lt;code&gt;lambda&lt;/code&gt; 和 &lt;code&gt;fn&lt;/code&gt; 关键字，用 &lt;code&gt;𝒇&lt;/code&gt; 代替 &lt;code&gt;function&lt;/code&gt; 关键字，用 &lt;code&gt;⟻&lt;/code&gt; 代替 &lt;code&gt;import&lt;/code&gt; 关键字等，没啥用就图个乐，不过在某些语言里这个玩意儿会影响理解和编码，所以对这些语言禁用掉是个明智选择。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+appened-to-negation-list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sequencep&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;delete-dups&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;not&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;modulep!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:ui&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ligatures&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+ligatures-extras-in-modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+appened-to-negation-list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;+ligatures-extras-in-modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c++-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;emacs-lisp-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;python-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scheme-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;racket-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rust-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+ligatures-in-modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+appened-to-negation-list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;nv&#34;&gt;+ligatures-in-modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;emacs-lisp-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scheme-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;racket-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;语言服务器&#34;&gt;语言服务器&lt;/h3&gt;&lt;p&gt;Emacs 支持微软开源的 LSP 接口以及各种各样的语言服务器时间还不长，问题也有一些，不过未来可期。 &lt;code&gt;lsp-ui&lt;/code&gt; 提供了大量的定制选项。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:custom&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-log-io&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;lsp-print-io&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;lsp-document-sync-method&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;incremental&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; none, full, incremental, or nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;lsp-response-timeout&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:hook&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-ui-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-ui&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:custom&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;; lsp-enable-symbol-highlighting nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;; lsp-lens-enable nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-headerline-breadcrumb-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;; lsp-diagnostics-provider :none&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;; lsp-completion-provider :none&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-show-with-mouse&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-show-with-cursor&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-header&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-include-signature&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-position&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;at-point&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; top, bottom, or at-point&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-max-width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-max-height&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-use-childframe&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-use-webkit&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-show-code-actions&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-show-hover&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-ignore-duplicate&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-show-symbol&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-show-diagnostics&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-peek-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-peek-fontify&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;on-demand&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; never, on-demand, or always&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-imenu-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;lsp-ui-imenu-kind-position&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;top&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:preface&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+toggle-lsp-ui-doc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-mode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-mode&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-hide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-mode&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-doc-show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-mode-map&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l r&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-peek-find-references&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l j&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-peek-find-definitions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l i&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-peek-find-implementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l m&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-imenu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l s&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-ui-sideline-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l d&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+toggle-lsp-ui-doc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;a href=&#34;https://github.com/blahgeek/emacs-lsp-booster&#34;&gt;lsp-booster&lt;/a&gt; 来优化语言服务器解析 JSON 数据的性能。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-booster--advice-json-parse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-fn&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;&amp;amp;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;Try to parse bytecode instead of json.&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;following-char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;?#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bytecode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;current-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;byte-code-function-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bytecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bytecode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;old-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;advice-add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fboundp&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;json-parse-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;ss&#34;&gt;&amp;#39;json-parse-buffer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;ss&#34;&gt;&amp;#39;json-read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;:around&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-booster--advice-json-parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-booster--advice-final-command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;test?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;Prepend emacs-lsp-booster command to lsp CMD.&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;old-fn&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;test?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;test?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                             &lt;span class=&#34;c1&#34;&gt;;; for check lsp-server-present?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-remote-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;default-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; see lsp-resolve-final-command, it would add extra shell wrapper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;nv&#34;&gt;lsp-use-plists&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;functionp&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;json-rpc-connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;; native json-rpc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;executable-find&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;emacs-lsp-booster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when-let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;command-from-exec-path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;executable-find&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;; resolve command from exec-path (in case not found in $PATH)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setcar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;command-from-exec-path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Using emacs-lsp-booster for %s!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;emacs-lsp-booster&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;orig-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;advice-add&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;lsp-resolve-final-command&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:around&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lsp-booster--advice-final-command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;针对具体语言的一些配置。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook!&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;js-mode-hook&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;flycheck-disabled-checkers&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;lsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lsp-javascript-validate-enable&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;lsp-javascript-suggest-enabled&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;lsp-javascript-suggestion-actions-enabled&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;lsp-pyright-langserver-command&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;basedpyright&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;lsp-zig-zls-executable&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/Code/Repo/zls/zig-out/bin/zls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拼写检查&#34;&gt;拼写检查&lt;/h3&gt;&lt;p&gt;无论使用 &lt;code&gt;spell-fu&lt;/code&gt; 还是 &lt;code&gt;flyspell&lt;/code&gt; 都需要配置个人词汇表的保存位置，我都放在 &lt;code&gt;doom-user-dir&lt;/code&gt; 目录下了。另外 &lt;code&gt;flyspell&lt;/code&gt; 激活错词修改菜单的缺省操作是鼠标中键（滚轮），MacBook 上没这玩意儿啊，所以我给改成 &lt;code&gt;Command+鼠标主键&lt;/code&gt; 了。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spell-fu&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+spell-fu-register-dictionary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Add `LANG` to spell-fu multi-dict, with a personal dictionary.&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;;; Add the dictionary&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;spell-fu-dictionary-add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;spell-fu-get-ispell-dictionary&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;personal-dict-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;aspell.%s.pws&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-user-dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;;; Create an empty personal dictionary if it doesn&amp;#39;t exists&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file-exists-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;personal-dict-file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;write-region&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;personal-dict-file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;;; Add the personal dictionary&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;spell-fu-dictionary-add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;spell-fu-get-personal-dictionary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%s-personal&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;personal-dict-file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook!&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;spell-fu-mode-hook&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+spell-fu-register-dictionary&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;flyspell&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ispell-personal-dictionary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;aspell.pws&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-user-dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s-down-mouse-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;flyspell-correct-word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;电子邮件&#34;&gt;电子邮件&lt;/h3&gt;&lt;p&gt;在配置好 &lt;code&gt;isync&lt;/code&gt; 和 &lt;code&gt;mu&lt;/code&gt; 之后（比较 tricky 的部分是使用 GnuPG 来加密密码，可以参考&lt;a href=&#34;https://f-santos.gitlab.io/2020-04-24-mu4e.html&#34;&gt;这篇&lt;/a&gt;以及&lt;a href=&#34;https://gist.github.com/koshatul/2427643668d4e89c0086f297f9ed2130&#34;&gt;这篇&lt;/a&gt;），在 Emacs 中使用 &lt;code&gt;mu4e&lt;/code&gt; 就很简单了。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;set-email-account!&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;neo&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-sent-folder&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/neo/Sent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-drafts-folder&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/neo/Drafts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-trash-folder&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/neo/Trash&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-refile-folder&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/neo/All Mail&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;smtpmail-smtp-user&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;neo@soulhacker.me&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user-mail-address&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;neo@soulhacker.me&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-compose-signature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;--\nNeo Lee a.k.a. soulhacker&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;send-mail-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;smtpmail-send-it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smtpmail-smtp-server&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smtpmail-smtp-service&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1025&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smtpmail-stream-type&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;starttls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-msg-signature&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\n#+begin_signature\n--\nNeo Lee a.k.a. soulhacker\n#+end_signature&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mu4e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mu4e-headers-auto-update&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;mu4e-update-interval&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;mu4e-view-show-images&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;mu4e-use-fancy-chars&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;补充软件包&#34;&gt;补充软件包&lt;/h2&gt;&lt;p&gt;Doom 的缺省配置和预制模块能覆盖我绝大部分需求，所以需要我另外添加的软件包很少，这些软件包需要写在 &lt;code&gt;packages.el&lt;/code&gt; 里。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; packages.el -*- no-byte-compile: t; -*-&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;窗口移动&#34;&gt;窗口移动&lt;/h3&gt;&lt;p&gt;用快捷键快速在几个窗口间交换 buffer，比如同时打开 &lt;code&gt;.c&lt;/code&gt; 和 &lt;code&gt;.h&lt;/code&gt; 文件，先在左边窗口编辑 &lt;code&gt;.h&lt;/code&gt; 文件，然后把右边窗口的 &lt;code&gt;.c&lt;/code&gt; 文件换过来进行编辑，使用这个包用一个组合键就能做到。其实预制模块里的 &lt;code&gt;ace-window&lt;/code&gt; 也可以做类似的事情，但 &lt;code&gt;buffer-mover&lt;/code&gt; 一个按键搞定更快。这里我用 &lt;code&gt;:recipe&lt;/code&gt; 子句来禁用这个包的编译，因为这个包有个 bug，编译后会报错。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;buffer-move&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:recipe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:build&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装和启用之后，在 &lt;code&gt;config.el&lt;/code&gt; 里配置自己习惯的按键组合（我用 &lt;code&gt;Control+Command+方向键&lt;/code&gt; ）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;C-s-up&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf-move-up&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;C-s-down&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf-move-down&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;C-s-left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;      &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf-move-left&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;C-s-right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;     &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;buf-move-right&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知识网络&#34;&gt;知识网络&lt;/h3&gt;&lt;p&gt;&lt;code&gt;org-roam-ui&lt;/code&gt; &lt;a href=&#34;https://github.com/org-roam/org-roam-ui&#34;&gt;→&lt;/a&gt; 提供强大的知识网络笔记系统 &lt;code&gt;org-roam&lt;/code&gt; 的网络可视化，并可与 &lt;code&gt;org-roam&lt;/code&gt; 紧密整合。注意 &lt;code&gt;org-roam-ui&lt;/code&gt; 只支持 &lt;code&gt;org-roam v2&lt;/code&gt; ，如果使用 &lt;code&gt;org-roam v1&lt;/code&gt; 的话请用 &lt;code&gt;org-roam-server&lt;/code&gt; &lt;a href=&#34;https://github.com/org-roam/org-roam-server&#34;&gt;→&lt;/a&gt;。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-ui&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编程语言-clojure&#34;&gt;编程语言 - Clojure&lt;/h3&gt;&lt;p&gt;&lt;code&gt;clj-refactor&lt;/code&gt; 这个包需要和后端 Clojure 的 &lt;code&gt;refactor-nrepl&lt;/code&gt; 包版本同步，且它们更新都挺频繁，所以最好解放版本限制。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unpin!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;clj-refactor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编程语言-python&#34;&gt;编程语言 - Python&lt;/h3&gt;&lt;p&gt;Doom 其实有个大一统的源代码格式美化模块（ &lt;code&gt;:editor format&lt;/code&gt; ），但我还没时间深入研究，而且这个模块和 LSP 是彼此独立的，不知道有什么坑，所以没开。针对比较有这个需求的 Python 语言单独加了 &lt;code&gt;black&lt;/code&gt; 这个懒汉的选择，作为 LSP 方案的保底。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;python-black&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;大语言模型&#34;&gt;大语言模型&lt;/h3&gt;&lt;p&gt;近期涌现了一批将大语言模型 &lt;em&gt;Large Language Model&lt;/em&gt; 的能力整合进 Emacs 的工具，我们也可以来试试。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gptel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;&lt;p&gt;Doom 自带 &lt;code&gt;eww&lt;/code&gt; 浏览器，所以我只需要加一个 &lt;code&gt;epub&lt;/code&gt; 的阅读器 &lt;code&gt;nov.el&lt;/code&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nov&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小玩具&#34;&gt;小玩具&lt;/h3&gt;&lt;p&gt;&lt;code&gt;keycast&lt;/code&gt; 可以跟踪并显示所有按键操作，在录制与 Emacs 有关的 screencast 时有用，其实我用的很少，ScreenFlow 提供更漂亮的解决方案，但在 Linux 下是个不错的方案。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个包允许你在 Emacs 里查询、下载和查看 &lt;a href=&#34;https://xkcd.com&#34;&gt;xkcd&lt;/a&gt; 漫画，嘿嘿嘿！&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xkcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;org-mode&#34;&gt;Org Mode&lt;/h2&gt;&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; 是 Emacs 的招牌应用，一个全副武装的 &lt;code&gt;org-mode&lt;/code&gt; 可以在一致的环境下完成日程计划、笔记、博客、论文等各种写作任务，不仅可以写出文本、结构化列表、表格，还可以插入图片、LaTeX 公式、可运行的程序代码、可追踪的任务，还可以借助 &lt;code&gt;org-roam&lt;/code&gt; 实现笔记的知识网络化。这些功能是以 &lt;code&gt;org-mode&lt;/code&gt; 为中心的一组软件包配合实现的，所以配置也相对多一点。&lt;/p&gt;&lt;h3 id=&#34;基本配置&#34;&gt;基本配置&lt;/h3&gt;&lt;p&gt;设置 &lt;code&gt;org-agenda&lt;/code&gt; 使用的 Org 文档的位置，可以指定目录和文件名 &lt;em&gt;pattern&lt;/em&gt; 把所有 &lt;code&gt;.org&lt;/code&gt; 文件放进去：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda-files&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;directory-files-recursively&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\\.org$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但通常还是指定几个分类任务文件就好了。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda-files&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Inbox.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Private.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Work.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Projects.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Notes.org&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另一个和 &lt;code&gt;org-agenda&lt;/code&gt; 有关的场景，就是用 &lt;code&gt;org-roam&lt;/code&gt; 写东西很快就会有非常多的文件，有些笔记一时写不完可以加上 &lt;code&gt;TODO&lt;/code&gt; 标签，然后就需要一个又快又方便的手段来整理这些 &lt;code&gt;TODO&lt;/code&gt; 列表，对这个问题 Emacs 社区有位 Boris Buliga（a.k.a &lt;a href=&#34;https://github.com/d12frosted&#34;&gt;d12frosted&lt;/a&gt;，这位还是 &lt;code&gt;homebrew-emacs-plus&lt;/code&gt; 和 &lt;code&gt;flyspell-correct&lt;/code&gt; 的维护者）给出了一个&lt;a href=&#34;https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html&#34;&gt;漂亮的解决方案&lt;/a&gt;，简单说就是检测到 &lt;code&gt;TODO&lt;/code&gt; 时自动给文件打一个 &lt;code&gt;project&lt;/code&gt; 标签（如果检测到当前文件所有 &lt;code&gt;TODO&lt;/code&gt; 都没有了就自动移除标签），然后直接通过 org-roam 的数据库查询动态将这些文件添进 &lt;code&gt;org-agenda&lt;/code&gt; 文件列表。从他分享的 &lt;a href=&#34;https://gist.github.com/d12frosted/a60e8ccb9aceba031af243dff0d19b2e&#34;&gt;gist&lt;/a&gt; 克隆代码到本地，然后加载就可以了。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load!&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lisp/vulpea-agenda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原来的版本有个问题，就是我们上面给变量 &lt;code&gt;org-agenda-files&lt;/code&gt; 指定的文件会被移除，所以我做了一点 patch 之后才合用 &lt;a href=&#34;https://gist.github.com/neolee/7e0c2abf2254c72baafb4a1000f0fbf0&#34;&gt;→&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;Org 文档导出 LaTeX 文档时需要做一些配置，一是引入 &lt;code&gt;ctex&lt;/code&gt; 包，否则中文处理会有问题；二是配置一下带链接文本的格式，不然会是带红色框的文本，非常恐怖；另外是一些 LaTeX 的常规设置。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-default-packages-alist&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;remove&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;AUTO&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;inputenc&amp;#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-default-packages-alist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-pdf-process&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;xelatex -interaction nonstopmode %f&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;s&#34;&gt;&amp;#34;xelatex -interaction nonstopmode %f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-packages-alist&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ctex&amp;#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-hyperref-template&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;\\hypersetup{linktoc=all,colorlinks=true,urlcolor=blue,linkcolor=blue}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;缺省的 LaTeX 模板的目录之后直接会接上正文，但一般的排版习惯会希望正文另起一页，这个简单定制一下就可以了：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-latex-toc-command&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\\tableofcontents \\clearpage\n\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在编辑 Org 文档时，经常点击链接跳转到另一篇笔记，这时候快速返回可以设置为快捷键，我用的是 &lt;code&gt;Control-Command-b&lt;/code&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-mode-map&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;C-s-b&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-mark-ring-goto&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;维护很多 Org 笔记时，记下笔记最后编辑时间会很有用，这个事情很适合交给 Emacs 自己做，可以利用 Emacs 的 &lt;a href=&#34;https://www.emacswiki.org/emacs/TimeStamp&#34;&gt;Time Stamp&lt;/a&gt; 功能实现。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;org-mode-hook&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq-local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;time-stamp-active&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;nv&#34;&gt;time-stamp-line-limit&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;nv&#34;&gt;time-stamp-start&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;^#\\+last_modified: [ \t]*&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;nv&#34;&gt;time-stamp-end&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;nv&#34;&gt;time-stamp-format&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\[%Y-%m-%d %a %H:%M:%S\]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;before-save-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;time-stamp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要这个功能的 Org 笔记在 &lt;em&gt;header&lt;/em&gt; 里加入下面一行即可（在笔记的前18行都可以）。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cs&#34;&gt;#+last_modified&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;: [ ]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行代码块&#34;&gt;运行代码块&lt;/h3&gt;&lt;p&gt;借助 &lt;code&gt;org-babel&lt;/code&gt; 来实现可运行的代码块，可以在代码块中应用对应的 &lt;em&gt;major mode&lt;/em&gt; ，提供良好的语法高亮及编辑功能。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-src&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;org-src-lang-modes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;plantuml&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;plantuml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外我还会用 Jupyter 来运行不同语言引擎。注意第一段里 &lt;code&gt;:kernel&lt;/code&gt; 参数，需要设为系统里存在的某个 Jupyter &lt;em&gt;kernel&lt;/em&gt; 的名字，且系统环境里应该装有 Jupyter（即系统 &lt;code&gt;PATH&lt;/code&gt; 中能找到 &lt;code&gt;jupyter&lt;/code&gt; 程序）；使用中如果需要 &lt;code&gt;pip&lt;/code&gt; 安装 Python 软件包，也是安装在这个 &lt;em&gt;kernel&lt;/em&gt; 环境下。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-babel-default-header-args:jupyter-python&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:async&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:session&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;jp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:kernel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;org-tempo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知识网络&#34;&gt;知识网络&lt;/h3&gt;&lt;h4 id=&#34;org-roam&#34;&gt;org-roam&lt;/h4&gt;&lt;p&gt;其实我刚开始用 &lt;code&gt;org-roam&lt;/code&gt; ，所以只有最简单的配置，一些复杂的模板之类的都还没开始用。这里最重要的配置是 Roam 笔记的根目录，另外我稍微修改了下缺省的 &lt;em&gt;capture template&lt;/em&gt; ，在元数据里加了 &lt;em&gt;tag&lt;/em&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:custom&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-roam-directory&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file-truename&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/Code/Org/roam/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-roam-completion-everywhere&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n l&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-buffer-toggle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n f&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-node-find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n g&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n i&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-node-insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n c&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-capture&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c n j&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-dailies-capture-today&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-capture-templates&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;plain&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%?&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:if-new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file+head&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%&amp;lt;%Y%m%d%H%M%S&amp;gt;-${slug}.org&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;s&#34;&gt;&amp;#34;#+title: ${title}\n#+filetags:\n\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:unnarrowed&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;org-roam-protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;org-roam-ui&#34;&gt;org-roam-ui&lt;/h4&gt;&lt;p&gt;这个知识网络的可视化会显示在浏览器中，通过 &lt;em&gt;websocket&lt;/em&gt; 与 Emacs 通信。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;websocket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-ui&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-roam-ui-sync-theme&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nv&#34;&gt;org-roam-ui-follow&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nv&#34;&gt;org-roam-ui-update-on-save&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nv&#34;&gt;org-roam-ui-open-on-start&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;大语言模型&#34;&gt;大语言模型&lt;/h2&gt;&lt;p&gt;大语言模型相关工具 &lt;code&gt;gptel&lt;/code&gt; 和 &lt;code&gt;ellama&lt;/code&gt; 的配置，使用本地运行的 &lt;code&gt;llama.cpp&lt;/code&gt; 服务来提供兼容 OpenAI 的 API。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gptel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gptel-expert-commands&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;gptel-model&lt;/span&gt;   &lt;span class=&#34;ss&#34;&gt;&amp;#39;qwen3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;gptel-backend&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gptel-make-openai&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;llama.cpp&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                    &lt;span class=&#34;nb&#34;&gt;:stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                    &lt;span class=&#34;nb&#34;&gt;:protocol&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                    &lt;span class=&#34;nb&#34;&gt;:host&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:5810&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                    &lt;span class=&#34;nb&#34;&gt;:models&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;qwen3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;qwen3-thinking&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;qwen3-coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-transient-main-menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:hook&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-ctrl-c-ctrl-c-final&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-chat-send-last-message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-sessions-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.config/emacs/.local/cache/ellama-sessions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;; (setopt ellama-keymap-prefix &amp;#34;C-c l&amp;#34;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-language&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chinese&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;llm-openai&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-summarization-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-coding-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3-coder&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-naming-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-naming-scheme&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;ellama-generate-name-by-llm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-translation-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-extraction-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-openai-compatible&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:url&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://localhost:5810/v1&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;snowflake&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-chat-display-action-function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-buffer-full-frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-instant-display-action-function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-buffer-at-bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ellama-context-header-line-global-mode&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;+1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以前使用的基于 &lt;code&gt;Ollama&lt;/code&gt; 的配置已废弃。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gptel&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;gptel-expert-commands&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;gptel-model&lt;/span&gt;   &lt;span class=&#34;ss&#34;&gt;&amp;#39;qwen3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;gptel-backend&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gptel-make-ollama&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ollama&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;nb&#34;&gt;:host&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:11434&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;nb&#34;&gt;:stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;nb&#34;&gt;:models&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;qwen3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;qwen3-coder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:ensure&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C-c l&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-transient-main-menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:hook&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-ctrl-c-ctrl-c-final&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-chat-send-last-message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-sessions-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/.config/emacs/.local/cache/ellama-sessions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;; (setopt ellama-keymap-prefix &amp;#34;C-c l&amp;#34;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-language&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chinese&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;llm-ollama&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num_ctx&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-summarization-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num_ctx&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32768&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-coding-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3-coder&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num_ctx&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32768&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-naming-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stop&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-naming-scheme&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;ellama-generate-name-by-llm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-translation-provider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num_ctx&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32768&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-extraction-provider&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-llm-ollama&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;nb&#34;&gt;:chat-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;qwen3-coder&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;nb&#34;&gt;:embedding-model&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nomic-embed-text&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;nb&#34;&gt;:default-chat-non-standard-params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;num_ctx&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32768&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-chat-display-action-function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-buffer-full-frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setopt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ellama-instant-display-action-function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-buffer-at-bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ellama-context-header-line-global-mode&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;+1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;其他配置&#34;&gt;其他配置&lt;/h2&gt;&lt;h3 id=&#34;popups&#34;&gt;Popups&lt;/h3&gt;&lt;p&gt;设置一些工具窗口的弹出规则。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vterm&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;set-popup-rule!&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*doom:vterm-popup:main&amp;#34;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:size&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.36&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:vslot&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-4&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:quit&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:ttl&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:side&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;smartparens&#34;&gt;Smartparens&lt;/h3&gt;&lt;p&gt;因为我用 &lt;code&gt;lispy&lt;/code&gt; 所以其实 &lt;code&gt;smartparens&lt;/code&gt; 用的不多，不过作为保底，还是配了一下常用按键组合。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smartparens&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;:map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;smartparens-mode-map&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-f&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-forward-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-b&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-backward-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-u&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-backward-up-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-d&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-down-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-p&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-backward-down-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-n&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-up-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-)&amp;#34;&lt;/span&gt;         &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-forward-slurp-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-}&amp;#34;&lt;/span&gt;         &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-forward-barf-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-(&amp;#34;&lt;/span&gt;         &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-backward-slurp-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-{&amp;#34;&lt;/span&gt;         &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-backward-barf-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;s&#34;&gt;&amp;#34;C-M-s&amp;#34;&lt;/span&gt;       &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sp-splice-sexp&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;&lt;p&gt;几个小工具方便一些常用操作，包括用 &lt;code&gt;black&lt;/code&gt; 格式化源代码。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:preface&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+python-make-fstring&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Change string to fstring&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;syntax-ppss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;goto-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;syntax-ppss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;goto-char&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;forward-char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+python-format-buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Format python buffer with black&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;python-black-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:bind&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;map!&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;python-mode-map&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;C-c x s&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+python-make-fstring&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;C-c x f&amp;#34;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+python-format-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clojure&#34;&gt;Clojure&lt;/h3&gt;&lt;p&gt;CIDER 是 Clojure 的 &lt;em&gt;REPL&lt;/em&gt; ，缺省会作为一个 &lt;em&gt;popup&lt;/em&gt; 显示在窗口下方，但一般来说习惯于左右分屏，所以需要修改；后面是 CIDER 的几个设置，一个可以在切换 &lt;em&gt;namespace&lt;/em&gt; 的时候自动加载对应代码，另一个指定 &lt;code&gt;cider-jack-in&lt;/code&gt; 时使用 &lt;code&gt;deps.edn&lt;/code&gt; 中哪个配置 &lt;em&gt;alias&lt;/em&gt; 。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cider&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;set-popup-rules!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;^\\*cider-repl&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:side&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;right&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:width&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:quit&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;:ttl&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cider-repl-require-ns-on-set&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cider-clojure-cli-aliases&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:cider&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;prolog&#34;&gt;Prolog&lt;/h3&gt;&lt;p&gt;这个语言比较小众，所以需要设置一下缺省的文件后缀，自动对应 &lt;em&gt;major-mode&lt;/em&gt; ，一般来说后缀用 &lt;code&gt;pl&lt;/code&gt; 和 &lt;code&gt;pro&lt;/code&gt; 都可以，前者 &lt;code&gt;Perl&lt;/code&gt; 语言会用，所以我们用后一个：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;auto-mode-alist&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\\.pro&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;prolog-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;nv&#34;&gt;auto-mode-alist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;web&#34;&gt;Web&lt;/h3&gt;&lt;p&gt;&lt;code&gt;web-mode&lt;/code&gt; 的 &lt;em&gt;auto indentation&lt;/em&gt; 经常有奇怪的行为，还是关了好。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-mode-enable-auto-indentation&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;epub&#34;&gt;EPUB&lt;/h3&gt;&lt;p&gt;将 &lt;code&gt;.epub&lt;/code&gt; 文件与 &lt;code&gt;nov.el&lt;/code&gt; 绑定。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nov&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\\.epub\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nov-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;keycast&#34;&gt;keycast&lt;/h3&gt;&lt;p&gt;对 &lt;code&gt;doom-modeline&lt;/code&gt; 需要做一些 &lt;em&gt;tweak&lt;/em&gt; 才能用。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:commands&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast-mode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;define-minor-mode&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast-mode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;Show current command and its key binding in the mode line.&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;:global&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast-mode&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pre-command-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;keycast--update&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;global-mode-string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast-mode-line&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;remove-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pre-command-hook&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;keycast--update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;global-mode-string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;remove&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;keycast-mode-line&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;global-mode-string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;custom-set-faces!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;keycast-command&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:inherit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-modeline-debug&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:height&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;keycast-key&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:inherit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;custom-modified&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:height&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:weight&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xkcd&#34;&gt;xkcd&lt;/h3&gt;&lt;p&gt;干活累了看看漫画，不亦乐乎！&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;use-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xkcd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:commands&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;xkcd-get&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xkcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xkcd-cache-dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;xkcd/&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-cache-dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;xkcd-cache-latest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;xkcd/latest&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;doom-cache-dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;Literate Config：这个很酷的想法来源于 Donald Knuth 老爷子40年前提出的 &lt;em&gt;Literate Programming&lt;/em&gt; ，就是把文字和程序写在同一文档里，用两个程序来处理这个文档，一个叫 &lt;em&gt;tangle&lt;/em&gt; ，可以把里面所有代码提取出来组成一个可以运行的程序，另一个叫 &lt;em&gt;weave&lt;/em&gt; ，可以将文档整体导出成各种可读格式供人阅读。关于这个优雅想法的更深入讨论，可以读读&lt;a href=&#34;https://leanpub.com/lit-config/read&#34;&gt;这本书&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Emacs Reloaded</title>
       <link>/posts/emacs-reloaded/</link>
       <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
       
       <guid>/posts/emacs-reloaded/</guid>
       <description>&lt;p&gt;两年更的我来了！&lt;/p&gt;&lt;p&gt;最近启动了一个和知识网络有关的项目，这样的任务自然适合 Emacs 的招牌 &lt;code&gt;org-mode&lt;/code&gt; ，所以我把 Emacs 又拾掇了一遍，发现最近几年 Emacs 的生态又有进步，特记于此，也算为沧海遗珠的推广做点贡献。&lt;/p&gt;&lt;h2 id=&#34;emacs&#34;&gt;Emacs&lt;/h2&gt;&lt;p&gt;首先，强烈推荐 Emacs 28.x 版本，这个版本合并了 &lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs&#34;&gt;GccEmacs&lt;/a&gt; 的成果，支持本地编译，对 Emacs 的运行速度有明显提升，尤其是使用一些比较大的模块时。这个版本还修了中英混排换行的一个千年 bug。目前 Emacs 28 分支最新的是 28.2，首选就它，不要用 29，太新了，对海量第三方模块来说风险偏高，不推荐。&lt;/p&gt;&lt;p&gt;要使用本地编译功能，只需要带 &lt;code&gt;--with-native-compilation&lt;/code&gt; 开关编译 28.x 源码即可，但一般来说不需要自己动手，有很多方便的选项（Windows 除外），具体可以参考&lt;a href=&#34;https://www.emacswiki.org/emacs/GccEmacs#h5o-1&#34;&gt;官方安装指南&lt;/a&gt;。对使用 Apple 芯片的 Mac 系统，最好的选择是 Homebrew 的用户源 &lt;a href=&#34;https://github.com/d12frosted/homebrew-emacs-plus&#34;&gt;d12frosted/emacs-plus&lt;/a&gt;：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew tap d12frosted/emacs-plus&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install emacs-plus@28 --with-native-comp --with-elrumo2-icon&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;doom-emacs&#34;&gt;Doom Emacs&lt;/h2&gt;&lt;p&gt;从最早的 vanilla Emacs 到 &lt;a href=&#34;https://en.soulhacker.me/posts/clojure-toolchain-reloaded/&#34;&gt;Emacs Live&lt;/a&gt;，再到 &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt;，这次转到了新崛起的 &lt;a href=&#34;https://github.com/doomemacs/doomemacs&#34;&gt;Doom Emacs&lt;/a&gt;。如果 vanilla Emacs 是一张干净的画布，一切都需要你自己涂画，那么 Spacemacs 就是社区合作喷涂的一面涂鸦墙，虽然足够绚丽，但留给你发挥的空间并不多；而 Doom Emacs 则是几乎空白的墙，上面有主要维护者 Henrik Lissner 挑选的少量图案，还有小伙伴们准备好的一些画具和预制贴块，你可以根据自己的需要组合或者自己喷绘，得到你想要的样子。我喜欢这种风格，即所谓 &lt;em&gt;make common things simple, others possible&lt;/em&gt; 。&lt;/p&gt;&lt;p&gt;Doom Emacs 的安装很简单，将 &lt;code&gt;~/.emacs.d&lt;/code&gt; 目录改名或移动到别处备份好，确认几个依赖软件： &lt;code&gt;Git 2.23+&lt;/code&gt; &lt;code&gt;ripgrep 11.0+&lt;/code&gt; &lt;code&gt;GNU find&lt;/code&gt; &lt;code&gt;fd 7.3.0+&lt;/code&gt; ，然后：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; https://github.com/doomemacs/doomemacs ~/.emacs.d&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;~/.emacs.d/bin/doom install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按照提示做好初始配置，记得顺手把 &lt;code&gt;~/.emacs.d/bin&lt;/code&gt; 加入系统 &lt;code&gt;PATH&lt;/code&gt; 中，现在可以运行 Emacs，基本的功能配置已经可用了。&lt;/p&gt;&lt;p&gt;接下去就是慢慢打磨配置，直到自己满意为止。我的 &lt;em&gt;literate config&lt;/em&gt; 在&lt;a href=&#34;/posts/doom-emacs-config/&#34;&gt;这里&lt;/a&gt;，供参考。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>二〇一九最美的夜</title>
       <link>/posts/2020-happy-new-year/</link>
       <pubDate>Fri, 03 Jan 2020 17:23:41 +0800</pubDate>
       
       <guid>/posts/2020-happy-new-year/</guid>
       <description>&lt;p&gt;我已经有十几年没看过任何晚会了，但是今年有一台跨年晚会造势阶段成功吸引我预约，然后抱着试试运气的心情看了个开头就欲罢不能，到现在为止看了三遍了（直播一遍，录播两遍）。为了写这篇感想我又点开了它，然后发现一月三日还有四万人和我一起补课。&lt;/p&gt;&lt;p&gt;B 站的 2019 跨年晚会标志着一个新时代的开始。&lt;/p&gt;&lt;p&gt;从开场致敬魔兽世界的舞剧和水准超出预期的舞台乐队配置，你就能看出这不是一台随随便便的年会，B 站真懂自己的用户——从 70~80 后的互联网初代，到现在还在读中小学的明日娇子。&lt;/p&gt;&lt;p&gt;被称为“互联网原住民”的一代已经成熟，他们已拥有长达二十年的历史和属于自己的代系文化。&lt;/p&gt;&lt;p&gt;当炮姐主题曲《Only My Railgun》响起时弹幕会刷“全体起立”，因为 B 站与《某科学的超电磁炮》的渊源，这首歌被广泛认为是 B 站的站歌（战歌）；当《数码宝贝》的片头曲响起，胡彦斌唱起《我为歌狂》的主题曲，小时姑娘唱起《爱殇》，弹幕会回忆起十年、二十年前的自己；80 年代天后张蔷上场串烧 DISCO 时弹幕有人建议切换到 360p 画质“手动复古”（你可以试试！），而舞台背景大屏是老 Windows 95 的出错画面。&lt;/p&gt;&lt;p&gt;这代人和共和国最好的三十年一起成长，看着我们一步步负重前行厚积薄发，从一无所有到《流浪地球》、《哪吒》、《钢铁洪流进行曲》，还有涅槃的小凤凰替 LPL 再次捧回召唤师奖杯……所以这代人有着无与伦比的文化自信和创造力。GAI 在表演完之后以平淡的口气说道：“希望你们能永远支持自己最纯净的那一片爱好的天堂”，对 B 站万千 UP 主和粉丝们来说这句话有着直击灵魂的力量，代表着我们这个古老文明的未来。2019 年是神奇的一年，而 B 站的跨年是真正配得上它的那台晚会。&lt;/p&gt;&lt;p&gt;B 站是中国互联网二十年唯一一个活下来并且有望继续守护众创（UCG）精神的在线业务，只有跟着中国互联网一路走来的人们才能理解这有多么不容易，现在还不能说 B 站已经完全成为主流文化，但应该已经不远了。&lt;/p&gt;&lt;p&gt;被 B 站“再创作”之后“收编”的主流名人吴亦凡终于在 B 站的舞台上唱完《大碗宽面》，自己都忍不住笑了，这一笑泯恩仇，证明吴亦凡确实比蔡徐坤优秀太多。&lt;/p&gt;&lt;p&gt;顺便说个事儿，我看这晚会的时候忍不住发票圈赞了下小破站，就有人问我是不是去 B 站就职了——我想说，这是一种属于过去的陈腐思想，觉得夸什么都带着利益和身份立场，难道不该是真心喜欢就夸吗？&lt;/p&gt;&lt;p&gt;最后是一组针对节目演出的碎碎念——当然了，不管怎么说都不如亲眼所见，如果你有一颗年轻的心，就一定要去&lt;a href=&#34;https://www.bilibili.com/bangumi/play/ss29067&#34;&gt;自己看看&lt;/a&gt;（记得打开弹幕看）。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;没有相声小品，只有音乐歌舞；但几乎没啥冷场，几乎所有节目都有看点；难怪有弹幕说，不是我们对晚会麻木了，是太久没有符合我们审美的节目了。&lt;/li&gt;&lt;li&gt;赵兆老师带领的交响和电声乐队水准很扎实，用这样一个乐团撑起整场节目真是个英明的决策。&lt;/li&gt;&lt;li&gt;能请到和 B 站气质最搭的朱广权来主持也是溜得不行。&lt;/li&gt;&lt;li&gt;两个 UP 主群演（动漫音乐和国乐）属于 B 站的“传统艺能展示”，稳如老狗；小时姑娘唱的《爱殇》惊艳。&lt;/li&gt;&lt;li&gt;CC 的《Phoenix》其实没唱好，但当小 FPX 和小 IG 的捧杯时刻出现在背景大屏上时还是让人无比激动，是的，我们已经翻过了那座山，正在向全世界讲述我们的故事。&lt;/li&gt;&lt;li&gt;因为年纪关系，几个怀旧节目对我特别有杀伤力，开场 O-DOG 舞团的魔兽世界舞剧《欢迎回到艾泽拉斯》，胡彦斌唱的《我为歌狂》插曲和主题曲，张蔷的《Let&amp;rsquo;s Disco》；我看直播时就在想象一个场景，一个中学生在看这台节目，爸爸或者妈妈听到这些音乐好奇地过来瞅一眼，然后就此被吸引住一起坐下来看了——想必那个孩子会有一种奇妙的幸福感吧。&lt;/li&gt;&lt;li&gt;B 站群众的爱国热情和华夏文明自豪感是出名的，《那兔》在 B 站的走红是个素质过硬的爱国教育典范；南征北战NZBZ 先唱了《镇魂街》的主题歌，然后是他们在 B 站成名的《那兔》第二季片尾曲《骄傲的少年》，前奏响起时的弹幕应该是整台节目最疯狂的瞬间，当时舞台上伴唱们在胸前帖兔子五角星的动作真是萌翻了。对了，70 周年国庆时兔子的声优小连杀献唱了一首《&lt;a href=&#34;https://www.bilibili.com/video/av69488035&#34;&gt;不忘那年&lt;/a&gt;》也很值得看。&lt;/li&gt;&lt;li&gt;2019 年有两部里程碑式的国民级电影，《流浪地球》和《哪吒》，小破站请来了 GAI 和周笔畅，分别演唱了这两部电影的主题曲，这两首歌从意境到编排都很有力量，并不好驾驭，这两位中国流行音乐的实力代表不负众望，展现了肉眼可见的强大表现力，尤其是周笔畅的《去流浪》和舞台交响乐团的配合堪称完美，是现场打败 CD 的典范。&lt;/li&gt;&lt;li&gt;私心以为 2019 年最好的综艺节目是『乐队之夏』，B 站顺势请来了新裤子，看来经过『乐队之夏』后他们确实增加了不少粉丝，为他们高兴。&lt;/li&gt;&lt;li&gt;陈乐一作为『下一站传奇』唯一惊喜，原本就出身 B 站 up 主，以一贯的元气少女形象演绎了 B 站站歌，效果非凡。和前面几个节目一样，凸显了互联网基因的晚会抓时代脉搏的能力。&lt;/li&gt;&lt;li&gt;弹幕评价周深有一条“被上天祝福过的嗓子”，他嗓音的清澈和明亮，让我想起 Roy Orbison；据说周深并不会说日语，但是唱《千与千寻》的片尾曲《いつも何度でも》那个咬字真是精确得让人叹为观止。前途无量。&lt;/li&gt;&lt;li&gt;连我一个中年老男人都觉得 Luka Šulić 真是太帅了，以前我以为大提琴是属于优雅女性的乐器，看了 Luka 我彻底改变了这个错误的观念……&lt;/li&gt;&lt;li&gt;戴荃老师的新歌《青山白云》很好听，也很适合他摇头晃脑的台风（雾&lt;/li&gt;&lt;li&gt;乐队里玩打击乐的帅哥（叔）是刘恒，国家大剧院管弦乐团打击乐首席。&lt;/li&gt;&lt;li&gt;乐器狂人方锦龙老师和局座召忠、眉山狂战士陈平等 B 站“老年巨触”将成为一个老人拥抱新时代的趋势吗？方老师先和洛天依 VR 合作了一首《茉莉花》，然后以完全炫技的方式和赵兆老师的乐团一起表演了各国民乐串烧，是后半台气氛的顶梁柱（这个节目里可以看出作为三大民工漫之首的《火影》的巨大影响力 -_-&lt;/li&gt;&lt;li&gt;整场使用了不少后期制作的动态特效，有人可能觉得不够现场，不够真实——但和节目气氛搭配很好，爽就行了；实际上现场要做技术上也是可行的，去年英雄联盟世界总决赛开幕式使用一种叫做 &lt;a href=&#34;https://www.wearekaleida.com/holonet&#34;&gt;3D Holonet&lt;/a&gt; 的舞台投影技术，营造了惊人的现场 MR 效果，不过这个技术要求足够大的空间和足够有钱，小破站家里没矿啊……&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
     <item>
       <title>Freddie Mercury</title>
       <link>/posts/freddie-mercury/</link>
       <pubDate>Thu, 08 Jun 2017 11:18:50 +0800</pubDate>
       
       <guid>/posts/freddie-mercury/</guid>
       <description>&lt;p&gt;Freddie Mercury 是一个教科书一般的摇滚或者说流行文化传奇：独特的艺术风格，空前绝后的舞台表演，来到和离开这个世界的方式… 我并无意去写一篇他的传记——已经有很多类似的东西了——只想记录下这位 Queen 主唱留在我心里的一些零星记忆碎片，分享给有兴趣的朋友。&lt;/p&gt;&lt;h2 id=&#34;出身&#34;&gt;出身&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/live-in-yellow-jacket.jpg&#34;    alt=&#34;Freddie Mercury&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Freddie Mercury&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可能很多人最初会觉得有点意外，Freddie Mercury 其实是亚裔，他 1946 年出生于东非的桑给巴尔苏丹国（Sultanate of Zanzibar），父母都是帕西人（Parsis），即 8-10 世纪拒绝伊斯兰化而移居印度的波斯人。&lt;/p&gt;&lt;p&gt;Freddie 在桑给巴尔生活到 17 岁，因为桑给巴尔革命爆发，在英殖民政府工作的父亲想办法把全家搬回了英格兰。在整个青少年期，Freddie 受的都是标准的英式教育，7 岁就开始学钢琴，喜爱英国 50 年代流行乐（比如 Cliff Richard 和 Little Richard），12 岁在学校里组建了自己的乐队（叫 “The Hectics”），所以是的，影响人一生的兴趣和天赋基本在 16 岁以前就确定了。&lt;/p&gt;&lt;p&gt;到了英国之后，Freddie 继续尝试自己的组团事业——都不怎么顺利，直到 24 岁时遇见吉他手 Brian May 和鼓手 Roger Taylor，三人组成了真正的铁三角（直到终极影响——死亡将他们分开），1971 年贝斯手 John Deacon 加入，Freddie 把自己的姓氏从 Bulsara 改成了 Mercury，也把乐队的名字从 “Smile” 改成了 “Queen”。&lt;/p&gt;&lt;h2 id=&#34;波西米亚狂想曲&#34;&gt;波西米亚狂想曲&lt;/h2&gt;&lt;p&gt;Bohemian Rhapsody（&lt;a href=&#34;https://itunes.apple.com/us/album/bohemian-rhapsody/id930321179?i=930321200&#34;&gt;iTunes&lt;/a&gt; / &lt;a href=&#34;https://music.163.com/#/song?id=471969753&#34;&gt;网易云音乐&lt;/a&gt;）出自 Queen 的第四张录音室专辑 &lt;a href=&#34;https://en.wikipedia.org/wiki/A_Night_at_the_Opera_(Queen_album)&#34;&gt;A Night at the Opera&lt;/a&gt;，由 Freddie Mercury 创作，也是专辑的点睛之笔。这首长约六分钟的摇滚歌剧可以划分为引子、抒情曲、吉他独奏、歌剧、硬摇滚和尾声六个部分，结构和和声都极其复杂，被普遍认为是当时世界上制作最昂贵的一支单曲。&lt;/p&gt;&lt;p&gt;这首歌的意义非凡，它是 Freddie 和 Queen 第一次对“摇滚+古典音乐”深度融合的探索，并取得了巨大的商业成功，这和 Freddie 极具天赋的嗓音是分不开的。Freddie 拥有非常宽广的音域（从男低音 F2 到女高音 F6 的四个八度，真声最高可到男高音的 F5），但和传统男高音不一样，他的嗓音具有未经雕琢的摇滚味道，而且在音乐节奏感上比大多数摇滚歌手更精细，像这样能完美游走于经典男声和摇滚呐喊之间的例子几乎是空前绝后的，在他生命的最后阶段，这种融合几臻化境。&lt;/p&gt;&lt;h2 id=&#34;舞台之王&#34;&gt;舞台之王&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/live-in-white-vest.jpg&#34;    alt=&#34;标志性的白背心&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;标志性的白背心&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Queen 一直被看做是一支拥有神级现场的乐队，Brian May 是一位极具天赋的吉他大师（在滚石杂志的 &lt;a href=&#34;http://www.rollingstone.com/music/lists/100-greatest-guitarists-20111123/brian-may-20111122&#34;&gt;一百位最伟大吉他手&lt;/a&gt; 列表中排名 26），能在任何演出环境下确保音乐品质，而 Freddie 则是 Queen 华丽台风的定义者。&lt;/p&gt;&lt;p&gt;Queen 有过非常多经典的现场表演，如果想最快时间里体会一下，我要推荐 1985 年在伦敦温布利球场的 &lt;a href=&#34;https://www.youtube.com/watch?v=A22oy8dFjqc&#34;&gt;LIVE AID 活动上的表演&lt;/a&gt;，这场表演云集了当时如日中天的一众巨星：U2、David Bowie、the Who、Elton John、Dire Straits、Paul McCartney、Sting、Phil Collins… 这里面随便一个都比当时的 Queen 更具人气，然而 Freddie 和 Queen 在大约 25 分钟内表演了七首曲目（外加 Freddie 招牌式的 “Ah-oh” 片段），超越了所有同台的巨星，成为那场演唱会最耀眼的片段，在之后三十年都为人们所津津乐道，乐队自己也认为这是乐队历史上最顶峰的时刻。由于现场表演的限制，无法还原 Queen 作品中大量采用的多轨合成和声（Freddie 一个人唱出两个或者更多声部然后后期合成起来），所以表演中大多曲目进行了删减和修改，但总体表现力依然惊人的完美。Freddie 在这场表演中穿着上图（已成为他招牌的）白色背心和臂环，弹奏钢琴或（更多时候）手持话筒杆在舞台上跳跃，无论是演唱还是与观众的互动都几近完美。对了，其中那首 Radio Ga Ga（&lt;a href=&#34;https://itunes.apple.com/us/album/radio-ga-ga/id932648190?i=932648807&#34;&gt;iTunes&lt;/a&gt; / &lt;a href=&#34;https://music.163.com/#/song?id=1868380&#34;&gt;网易云音乐&lt;/a&gt;）就是 Lady Gaga 给自己取这个艺名的灵感来源。&lt;/p&gt;&lt;h2 id=&#34;大伪装者&#34;&gt;大伪装者&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/the-great-pretender.jpg&#34;    alt=&#34;The Great Pretender&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;The Great Pretender&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在 Freddie 在世的日子里，Queen 的活动从未中断，四位主要成员也从未离队，但 Freddie 还是利用机会制作了一些自己的独唱作品，很多都是个人兴趣尝试，其中非常特别也非常成功的是这首 The Great Pretender（&lt;a href=&#34;https://itunes.apple.com/us/album/the-great-pretender/id204797072?i=204797077&#34;&gt;iTunes&lt;/a&gt; / &lt;a href=&#34;https://music.163.com/#/song?id=18317231&#34;&gt;网易云音乐&lt;/a&gt;）。&lt;/p&gt;&lt;p&gt;这首歌是极少数非 Freddie 原创的热门作品，它的原作者是美国黑人乐队 The Platters，这支乐队并不为国人熟知，但是他们有一首尽人皆知的名作 &lt;del&gt;Only&lt;/del&gt;You~（为什么脑海里响起的是&lt;a href=&#34;https://www.youtube.com/watch?v=LLCR4b10_X4&#34;&gt;罗家英的声音&lt;/a&gt;…&lt;/p&gt;&lt;p&gt;这首歌有两个版本的 MV，一个是三分半钟的&lt;a href=&#34;https://www.youtube.com/watch?v=mLRjFWDGs1g&#34;&gt;标准版本&lt;/a&gt;，另一个是穿插加入了花絮片段的六分钟&lt;a href=&#34;https://www.youtube.com/watch?v=ly-JZowFHDA&#34;&gt;扩展版本&lt;/a&gt;。在 MV 中 Freddie 剃掉了他标志性的小胡子（简直像换了一个人，见图），MV 中展示了了很多 Freddie 的经典影像，还有和两个好朋友（Peter Straker 和 Roger Taylor）一起的女装秀… 第一次听这首歌时惊叹 Freddie 演绎这种甜腻腻的歌曲也能如此完美，真是 “great pretender”，Freddie 某次接受采访时提到这首歌很好的概括了他“对自己职业生涯和舞台表演的自我思考”。&lt;/p&gt;&lt;h2 id=&#34;巴塞罗那&#34;&gt;巴塞罗那&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/barcelona-2.jpg&#34;    alt=&#34;Barcelona&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Barcelona&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从 波西米亚狂想曲 开始，所有人都看到了 Freddie 对于歌剧的偏好，他也一直毫不隐瞒自己与歌剧大师同台表演的期待，而且非常喜欢西班牙歌剧女高音蒙特赛拉特·卡芭叶（Montserrat Caballé），卡芭叶在上世纪 60 年代就被视为卡拉丝（&lt;a href=&#34;https://en.wikipedia.org/wiki/Maria_Callas&#34;&gt;Maria Callas&lt;/a&gt;，Apple 的 &lt;a href=&#34;https://www.youtube.com/watch?v=GEPhLqwKo6g&#34;&gt;Think Different&lt;/a&gt; 广告中出现过的传奇女高音）的接班人，到 80 年代已是公认的女高音第一人，Freddie 在某次电视节目里表达了对卡芭叶的仰慕之后得到后者的召见，两人据说谈的十分投机，为之后的合作打下了基础。&lt;/p&gt;&lt;p&gt;1987 年巴塞罗那中选 1992 年奥林匹克夏季运动会，组委会邀请恰为巴塞罗那人的卡芭叶为运动会创作一首主题歌，卡芭叶想到了 Freddie 并把这个任务交给了他，Freddie 无比重视这个任务，不仅创作了这首 Barcelona（&lt;a href=&#34;https://itunes.apple.com/us/album/barcelona/id204797072?i=204797641&#34;&gt;iTunes&lt;/a&gt; / &lt;a href=&#34;https://music.163.com/#/song?id=5208619&#34;&gt;网易云音乐&lt;/a&gt;），还迁就卡芭叶的时间表，先录制好所有自己的部分再与卡芭叶合唱，在这首歌中双方的表现都堪称完美，塑造了流芳百世的经典。&lt;/p&gt;&lt;p&gt;这首歌堪称摇滚和歌剧混搭的教科书，在音乐层面融合了摇滚冲击力和歌剧的优雅及气场，卡芭叶专注于用她极具张力的歌声制造音乐背景和氛围（她的歌词混杂了西班牙语和英语，非常难于辨认），而 Freddie 担负真正的“演唱”任务，唱出充满意境和力量的歌词，&lt;/p&gt;&lt;p&gt;这首歌有一支&lt;a href=&#34;https://www.youtube.com/watch?v=o8Eg-mWdDLc&#34;&gt;美不胜收的 MV&lt;/a&gt;，也有好几个&lt;a href=&#34;https://www.youtube.com/watch?v=pPG5DP2RQZk&#34;&gt;现场演唱&lt;/a&gt;的版本，都非常精彩。顺便，这首歌的 MV 里的 Freddie 也是“无小胡子版”的。&lt;/p&gt;&lt;h2 id=&#34;最后致意&#34;&gt;最后致意&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/the-last-bow-1.jpg&#34;    alt=&#34;最后致意&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;最后致意&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;1990 年 Queen 获得 Brit Award 的年度杰出贡献奖，这是 Freddie Mercury 在 1991 年因艾滋病并发症去世前的最后一次公开亮相。&lt;/p&gt;&lt;p&gt;颁奖礼中乐队四人鱼贯而入，但出人意料的是 Brian May 代表乐队发表了致辞——这一般是作为乐队 frontman 的 Freddie 的工作——而 Freddie 只是在最后说了两句话：“Thank you. Good night!”&lt;/p&gt;&lt;p&gt;Freddie 可能早在 1987 年就查出艾滋病阳性，但只有极少数人知道这个确切的信息，包括他曾经的异性伴侣、被他称为唯一“真正朋友”的 Mary Austin（Freddie 还是她长子的教父）和 Queen 乐队的成员。病情在 1990 开始恶化，到了 1991 年 Freddie 决定停止治疗，11 月 22 日他请来乐队经理 Jim Beach，告知将要发布一则公告，公开自己的病情，并解释出于对自己和身边人的隐私考虑而隐瞒病情的原因。两天后 Freddie 与世长辞。他是历史上第一位公开患艾滋病及去世的主流摇滚巨星，此后 Queen 和整个摇滚音乐界一起对艾滋病投入了巨大关注，推动了为艾滋病防治集资和公平对待艾滋病患者的一系列行动，至今不衰。&lt;/p&gt;&lt;p&gt;Freddie 去世之后，依其遗言将自己的房产给了 Mary Austin，留给自己的司机 10 万英镑，他的厨师 Joe Fanelli、私人助理 Peter Freestone 和他的同性伴侣 Jim Huton 各获得 50 万英镑而其余则留给父母。Jim Huton 在 2000 年参与了关于 Freddie 的纪录片 “&lt;a href=&#34;https://www.youtube.com/watch?v=4eoxknrfBZ8&amp;amp;t=1s&#34;&gt;Freddie Mercury, the Untold Story&lt;/a&gt;” 的录制，于 2010 年因癌症去世。&lt;/p&gt;&lt;h2 id=&#34;天堂制造&#34;&gt;天堂制造&lt;/h2&gt;&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;/images/posts/freddie/statue-by-lake-geneva-1.jpg&#34;    alt=&#34;日内瓦湖畔雕像&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;日内瓦湖畔雕像&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;1990 年的某个时候开始 Freddie 已经感觉到自己可能活不了太久了，他和 Queen 的伙伴开始尽可能的录制更多的歌声，希望能够攒够一张专辑的素材，他对伙伴说：“随便给我任何东西，任何我可以唱的东西。”&lt;/p&gt;&lt;p&gt;在 Freddie 去世后四年，这张混合了 Freddie 最后创作和生前一些作品重新混音的专辑以 Made In Heaven（&lt;a href=&#34;https://itunes.apple.com/us/album/made-in-heaven/id930202183&#34;&gt;iTunes&lt;/a&gt; / &lt;a href=&#34;https://music.163.com/#/album?id=35338730&#34;&gt;网易云音乐&lt;/a&gt;）的标题发行，其中 Mother Love 这首歌是 Freddie 录制的最后歌声，因为身体原因无法完成的部分人声在他去世后由 Brian May 补上。这张充满生命力量的专辑完全配得上这个炫目的标题，作为华丽摇滚最杰出的代表，Freddie 即使在去世四年后仍和他的朋友们为自己的人生画上了一个最华丽的句号。&lt;/p&gt;&lt;p&gt;这张专辑封面上酷似 Freddie 本人的背影来自日内瓦湖畔的 Freddie Mercury 纪念雕像（上图），雕像穿着他标志性的夹克，还有他标志性的右手上举动作和无底座话筒杆，专辑中有乐队其余三人在一旁拍摄的真人与雕像融为一体的照片，专辑发行后，也经常有人来这里拍摄留念。&lt;/p&gt;&lt;p&gt;最后，本文提到的歌曲都可以在&lt;a href=&#34;http://music.163.com/#/playlist/752377142&#34;&gt;这个歌单&lt;/a&gt;里找到（还包括一些没提到的）。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/posts/freddie/made-in-heaven-2.jpg&#34;    alt=&#34;Made in Heaven&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Made in Heaven&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>我又装了一次机</title>
       <link>/posts/my-new-pc/</link>
       <pubDate>Mon, 27 Feb 2017 17:09:30 +0800</pubDate>
       
       <guid>/posts/my-new-pc/</guid>
       <description>&lt;p&gt;如题，我又装了一次机。意思是，我自己攒了一台组装电脑，然后自己装了系统，不是一个，而是 Windows 和 Linux 俩。上一次干类似的事大约是 2004 年。&lt;/p&gt;&lt;p&gt;总的感想是：这个行业虽然算不上“一日千里”，但十几年的时间还是改变了不少东西：Windows 再也不是那个每次重启都有可能起不来的玩意儿，Linux 再也不是要折腾一天才能访问中文网站并差强人意地播放音视频的怪兽。然而也有些事情似乎永远也不会变，比如 Mac 无论多么优雅强大，显卡以及显卡的驱动永远跟不上时代——这也是我这次装机的动机：我要深度（wán）学（yóu）习（xì）啊！&lt;/p&gt;&lt;p&gt;本着 &lt;em&gt;一步到位&lt;/em&gt; 和 &lt;em&gt;安静小巧&lt;/em&gt; 两大原则，装机配置如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CPU：&lt;a href=&#34;https://item.jd.com/1748176.html&#34;&gt;Intel i7-6700k&lt;/a&gt;&lt;/li&gt;&lt;li&gt;主板：&lt;a href=&#34;https://item.jd.com/2389154.html&#34;&gt;ASUS Z170I PRO GAMING (Intel Z170/LGA 1151)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;内存：&lt;a href=&#34;https://item.jd.com/2966629.html&#34;&gt;CORSAIR Vengeance LED DDR4 3000 32GB (16Gx2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;显卡：&lt;a href=&#34;https://item.jd.com/3076376.html&#34;&gt;GIGABYTE GTX1080 G1 GAMING 8GD&lt;/a&gt;&lt;/li&gt;&lt;li&gt;存储：&lt;a href=&#34;https://item.jd.com/4173866.html&#34;&gt;Samsung 960 EVO 1TB M.2 NVMe&lt;/a&gt;&lt;/li&gt;&lt;li&gt;显示器：&lt;a href=&#34;https://item.jd.com/1287970.html&#34;&gt;Dell P2715Q&lt;/a&gt;&lt;/li&gt;&lt;li&gt;机箱：&lt;a href=&#34;https://item.jd.com/2902818.html&#34;&gt;JONSBO VR1 Mini-ITX&lt;/a&gt;&lt;/li&gt;&lt;li&gt;电源：&lt;a href=&#34;https://item.jd.com/855414.html&#34;&gt;Seasonic X-750&lt;/a&gt;&lt;/li&gt;&lt;li&gt;散热器：&lt;a href=&#34;https://item.jd.com/2248473.html&#34;&gt;NOCTUA NH-U9S&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因为核心动机锁定了 GTX1080 和 4K 显示，所以其他配套上就完了，最后正好两万以下搞定（嗯我知道电源有点 overkill…&lt;/p&gt;&lt;p&gt;&lt;strong&gt;吐槽时间&lt;/strong&gt;：在一个早就没了光驱的时代，华硕和技嘉还是选择光盘来提供驱动和工具，理解不能。&lt;/p&gt;&lt;p&gt;操作系统方面，Windows 没啥好说的，装系统、升级系统、装 Battle.net、装 Steam、装 Origin（对不起你就是台游戏机 (⊙﹏⊙)b&lt;/p&gt;&lt;p&gt;简单扫了下网上的资料，发现搞科学计算和人工智能的人都不折腾，所以就 &lt;a href=&#34;http://releases.ubuntu.com/16.04/&#34;&gt;Ubuntu 16.04 LTS&lt;/a&gt; 了，然后装 NVIDIA 驱动、装 CUDA 和 cuDNN、装 TensorFlow…这个流程里有些 tricky 的陷阱，浪费了我大半天，最后找到的最简单有效的路径如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对较新主板的 BIOS（UEFI）和 16.04 LTS，&lt;a href=&#34;https://wiki.ubuntu.com/SecurityTeam/SecureBoot&#34;&gt;Secure Boot&lt;/a&gt; 会阻止加载第三方硬件驱动，有两个选择：简单粗暴的禁用它（Ubuntu 安装程序有提示），或者对第三方驱动进行签名授信，本着不折腾的原则，我直接安装时就把它禁了…&lt;/li&gt;&lt;li&gt;下载 &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 8.0&lt;/a&gt;，这个页面上针对 Ubuntu 有四个可选的下载选项，其中最好的选项是“deb (network)” 这个，别的都是坑…&lt;/li&gt;&lt;li&gt;安装这个包并更新索引：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;这个时候去 Ubuntu 的系统设置里打开 Software &amp;amp; Updates，在 Additional Drivers 下面可以看到最新 NVIDIA 驱动的选项，选之，会自动安装好，之后需要重启，这个方法可以避开一大堆手工操作的麻烦，是这次装 Ubuntu 感觉比以前进步最大的一点。&lt;/li&gt;&lt;li&gt;然后就可以风平浪静的：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install cuda&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;下载 &lt;a href=&#34;https://developer.nvidia.com/cudnn&#34;&gt;cuDNN&lt;/a&gt; 并安装：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar xvzf cudnn-8.0-linux-x64-v5.1.tgz&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp cuda/include/cudnn.h /usr/local/cuda/include/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;TensorFlow 的主站点被墙，所以需要科学上网，或者用国内的镜像站，比如 &lt;a href=&#34;https://mirror.tuna.tsinghua.edu.cn/help/tensorflow/&#34;&gt;这里&lt;/a&gt;，具体安装推荐用 virtualenv 或者 &lt;a href=&#34;https://www.continuum.io/downloads&#34;&gt;Anaconda&lt;/a&gt; 环境都可以：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TF_BINARY_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/gpu/tensorflow_gpu-1.0.0-cp27-none-linux_x86_64.whl&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# virtualenv&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt-get install python-pip python-dev python-virtualenv&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ virtualenv --system-site-packages ~/tensorflow&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/tensorflow/bin/activate&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tensorflow&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;$ pip install --upgrade &lt;span class=&#34;nv&#34;&gt;$TF_BINARY_URL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Anaconda&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ conda create -n tensorflow&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; activate tensorflow&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tensorflow&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;$ pip install --ignore-installed --upgrade &lt;span class=&#34;nv&#34;&gt;$TF_BINARY_URL&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后…图。因为我的显卡是晚了两天到的，所以先装了其他部分用集显启动装的 Windows：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-01-small.jpg&#34;    alt=&#34;主板、CPU 和内存&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;主板、CPU 和内存&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-02-small.jpg&#34;    alt=&#34;CPU 散热器&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;CPU 散热器&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-03-small.jpg&#34;    alt=&#34;CPU 风扇&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;CPU 风扇&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-04-small.jpg&#34;    alt=&#34;加电&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;加电&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-05-small.jpg&#34;    alt=&#34;亮灯&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;亮灯&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;毕竟这么多年了，看到这个画面还是舒了口气：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-06-small.jpg&#34;    alt=&#34;BIOS&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;BIOS&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;然后显卡来了…&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-07-small.jpg&#34;    alt=&#34;显卡 GTX1080&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;显卡 GTX1080&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-08-small.jpg&#34;    alt=&#34;装上显卡&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;装上显卡&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-09-small.jpg&#34;    alt=&#34;合上半透明的侧板&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;合上半透明的侧板&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;回家把服役七年的 iMac 抱到客厅安置好，收拾干净的书桌：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-10-small.jpg&#34;    alt=&#34;空桌子&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;空桌子&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;闪亮登场：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-11-small.jpg&#34;    alt=&#34;放上新机器的桌子&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;放上新机器的桌子&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/system-photo-12-small.jpg&#34;    alt=&#34;挤不下了的桌子&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;挤不下了的桌子&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/desktop-win10.jpg&#34;    alt=&#34;Windows 10 桌面&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Windows 10 桌面&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/desktop-ubuntu.jpg&#34;    alt=&#34;Ubuntu 桌面&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Ubuntu 桌面&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;按照 TensorFlow 的例子画了个 Mandelbrot 集，话说当年在大学写的第一个 Pascal 程序也是画的这个，这算是轮回么……&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/zion/mandelbrot.jpg&#34;    alt=&#34;Mandelbrot Set&#34;&gt;&lt;figcaption&gt;      &lt;p&gt;Mandelbrot Set&lt;/p&gt;    &lt;/figcaption&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>软件开发外传（三篇）</title>
       <link>/posts/paradox/</link>
       <pubDate>Fri, 28 Feb 2014 15:14:00 +0800</pubDate>
       
       <guid>/posts/paradox/</guid>
       <description>&lt;h2 id=&#34;编程之禅&#34;&gt;编程之禅&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;听到一阵骚乱，编程大师走进学徒的小隔间。&lt;/p&gt;&lt;p&gt;“这些该死的电脑！” 学徒正在怒吼，“为了让它们干点事儿我就要用上三、四种编辑器，他们经常把我搞晕，一发晕我就把整个文件都删了，这完全无法忍受啊！”&lt;/p&gt;&lt;p&gt;编程大师注视着学徒，“那么你打算怎么拯救自己呢？”&lt;/p&gt;&lt;p&gt;学徒思考了一会儿，答道：“我要开发一个全新的编辑器，一个完美的编辑器换掉所有其他的！”&lt;/p&gt;&lt;p&gt;编程大师突然出手敲了学徒脑袋一下，不是很重，但是学徒还是吓了一大跳，“您为什么要打我…”&lt;/p&gt;&lt;p&gt;“我一点儿也不想再多学一种编辑器。”大师答道。&lt;/p&gt;&lt;p&gt;突然之间，学徒明白了点什么。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;Geoffrey James, &lt;a href=&#34;http://www.amazon.com/The-Zen-Programming-Geoffrey-James/dp/0931137098&#34;&gt;Book 4 Chapter 6, The Zen of Programming&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;买还是不买这可就是问题&#34;&gt;买还是不买这可就是问题&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;程序员甲：如果觉得这个工具好，你应该花钱去买它，不然大家都只想要免费工具甚至盗版，慢慢就没人愿意开发真正高水准的工具了，最后吃亏的还是用户啊！&lt;/p&gt;&lt;p&gt;程序员乙：你说的有一定道理，我原来也是这么想的，可是自从我买了 TextMate 之后，它就不怎么更新了…&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;弱即是强&#34;&gt;弱即是强&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;/p&gt;&lt;p&gt;凡是能用 JavaScript 写出的应用程序，最后（大家）都会用 JavaScript 去写。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;Jeff Atwood, &lt;a href=&#34;http://blog.codinghorror.com/the-principle-of-least-power/&#34;&gt;Atwood&amp;rsquo;s Law&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;The less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative form, anyone can write a program to analyze it.&lt;/p&gt;&lt;p&gt;语言越弱，你就越能充分使用其中保存的数据；如果使用一种非常简单的声明式语法，随便谁都可以写一段程序来分析它。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;Tim Berners-Lee, &lt;a href=&#34;http://www.w3.org/DesignIssues/Principles.html&#34;&gt;The Principle of Least Power&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;注意前者是后者的特例，因为 JavaScript 就是 &lt;em&gt;看上去&lt;/em&gt; 很弱的语言，随便谁都可以写一段“脚本儿”来干点啥，偏偏它是和世界上最强大的数据集（互联网上的文档）配合得最多的“脚本儿”，于是 JavaScript 现在成了无论前端后端还是桌面全都通吃的编程语言之王，如果你只打算学习一门编程语言的话，那就只能是 JavaScript 了（我不知道是大雾还是无误 -_-&lt;/p&gt;&lt;h3 id=&#34;the-end&#34;&gt;The END&lt;/h3&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;灵感来自 &lt;a href=&#34;https://news.ycombinator.com/item?id=7308071&#34;&gt;HackerNews&lt;/a&gt;，原作是 Geoffrey James 经典的《编程之禅》和《编程之道》系列。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;灵感来自 &lt;a href=&#34;https://news.ycombinator.com/item?id=7310643&#34;&gt;HackerNews&lt;/a&gt;，发贴的是另一个颇有特色的编辑器 Chocolate 的作者。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>炉石传说入门</title>
       <link>/posts/hearthstone-fundamentals/</link>
       <pubDate>Mon, 03 Feb 2014 16:07:00 +0800</pubDate>
       
       <guid>/posts/hearthstone-fundamentals/</guid>
       <description>&lt;p&gt;不知不觉我已经玩了四个多月的炉石传说（HearthStone: Heroes of Warcraft）了，随着全球各服进入公测，势必会有越来越多的朋友加入，其中不少应该是没有什么卡牌游戏基础的，为了帮助大家尽快迈过刚开始的门槛，更好地体验这款优秀游戏，我决定借着春节宅在家的时间编写这篇入门指引，希望对朋友们有所帮助。&lt;/p&gt;&lt;p&gt;炉石传说是一款虚拟卡牌游戏，玩家收集虚拟的卡片，然后构建强力的牌组来与其他玩家进行回合制对战。其基本概念来自传统桌面游戏的一个分支：集换式卡牌游戏（TCGs，trading card games），其典型代表是万智牌（Magic: the Gathering）和游戏王（Yu-Gi-Oh!），暴雪尝试通过简化规则和抛弃实体卡来扩大潜在玩家群体，并借助魔兽世界（WarCraft）庞大的传说（lore）资源和爱好者群体，建立一个休闲为主、兼顾竞技的数字化卡牌游戏平台，也是暴雪进入免费网络游戏和游戏微支付盈利模式的又一次尝试。到目前为止游戏取得了不错的成绩，但也出现了一些问题，其中之一就是相比暴雪其他游戏，炉石传说具有一定的入门门槛：虽然即使什么都不知道也可以在开始阶段获得很多乐趣，但是稍微深入一点就会遇到不少问题，这主要是因为卡牌游戏本身比较小众，这时候了解一些卡牌游戏的基本概念会很有帮助，这也是本文的主要目标。&lt;/p&gt;&lt;p&gt;本文分为两个大的部分，第一部分我摘译了来自著名电竞社区 TeamLiquid 的一篇非常棒的入门指南 “&lt;a href=&#34;http://www.liquidhearth.com/forum/viewmessage.php?topic_id=410&#34;&gt;A Beginner&amp;rsquo;s Guide to HS Terms&lt;/a&gt;”，这篇文章由资深的万智牌玩家编写，是我看到过的对卡牌游戏基础概念解说最为精到的文字，不仅可以帮助新手快速理解卡牌游戏的核心概念，也有助于更好地融入游戏社区。第二部分则是结合我自己的游戏经验，谈谈如何在炉石传说的构筑卡组对战（Play mode）中走的更远。&lt;/p&gt;&lt;p&gt;因为我自己主要在美服玩，同时为了照顾国服玩的朋友，下文中提到的卡牌都提供了中英对照的名称，并附有来自 HearthHead 网站的浮动图片显示。另外在第一部分的摘译中我也对原文进行了少量的更新以适应目前的环境，并增加了许多针对中文玩家的说明，有条件的朋友如有兴趣可以阅读下原文。&lt;/p&gt;&lt;h2 id=&#34;part-i---术语指南&#34;&gt;Part I - 术语指南&lt;/h2&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/guide-to-hs-terms.png&#34;&gt;&lt;/figure&gt;&lt;p&gt;以下是炉石传说涉及到的一些卡牌游戏术语列表，它们大多不是炉石传说创造出来的——事实上大部分是由万智牌（可以认为是这类游戏的开创者）的开发者和玩家定义的，虽然炉石传说具有不少独创的特点，但是在基本概念上是完全通用的。这些术语被划分为三部分：卡组类型、一般术语和高级概念，这里一般和高级的区别在于，一般术语涵盖的是游戏机制本身的一些概念，而高级概念更多和游戏玩家的策略有关，是玩游戏的过程中会碰到的一些更复杂的概念。&lt;/p&gt;&lt;h3 id=&#34;卡组类型&#34;&gt;卡组类型&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Aggro 快攻&lt;/strong&gt;：力争占据主动权并尽快攻击对手英雄来结束战斗的卡组。这种卡组一般比较容易组成而且也易于理解，但有一点必须注意，aggro 卡组并不永远意味着快速展开和铺怪&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，有相对慢一些的卡组也属于这个分类，比如在万智牌中很出名的 “&lt;a href=&#34;http://www.starcitygames.com/magic/misc/810_A_Brief_History_Of_Stompy.html&#34;&gt;Stompy&lt;/a&gt;” 或者 “Big Aggro” 都是这样的例子，他们的共同点是早期占场然后不断放下一些较平均值更重量级的仆从来压制对手，&lt;a href=&#34;http://www.hearthhead.com/card=90&#34;&gt;Chillwind Yeti&lt;/a&gt;（冰风雪人）是最典型的例子，因为它通常都是四费阶段三围最好的仆从。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Control 控制&lt;/strong&gt;：这是炉石传说中另一个常见的卡组类型，它们的特征是力争存活到游戏后期然后依靠少量强大的威胁赢得游戏。如果你基本上只靠 &lt;a href=&#34;http://www.hearthhead.com/card=374&#34;&gt;Ragnaros&lt;/a&gt;（拉格纳罗斯）、&lt;a href=&#34;http://www.hearthhead.com/card=1186&#34;&gt;Ysera&lt;/a&gt;（伊瑟拉）、&lt;a href=&#34;http://www.hearthhead.com/card=777&#34;&gt;Lord Jaraxxus&lt;/a&gt;（加拉克苏斯大王） 作为胜利条件&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，在游戏的大部分时间里力争生存直到这些巨巨出场帮助你赢得胜利，那么这就是典型的控制卡组。在刚刚开始内测的时候，很多人经常把控制类卡组和下面这个类型搞混。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Midrange 中速&lt;/strong&gt;：在炉石社区里很多标为“控制类型”的卡组其实属于这个类型，公平地说这里的界限并没有那么清晰，但对有经验的卡牌游戏玩家来说还是有一些明显差异的。典型的中速卡组力争在每一回合取得一点点优势，流行的卡牌 &lt;a href=&#34;http://www.hearthhead.com/card=281&#34;&gt;Argent Commander&lt;/a&gt;（银色指挥官）以及能够强化其他仆从的仆从都是很好的例子。如果你的卡组设计为在游戏中从一开始就不断累积场上优势，那么这是中速类型&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。中速卡组的取胜之道是：面对快攻卡组要打得像控制卡组，而面对控制卡组要打得像快攻卡组&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;控制和中速类型卡组经常让人混淆的主要原因之一是中速牌组往往力图通过较大的仆从和比较超值的法术来“控”场，这一点后面还会阐述，不过这里要强调的是，某些时候打的比较偏“控制”并不意味着卡组是控制类型。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Combo 组合&lt;/strong&gt;：即依靠一组特定组合卡牌的效果赢得对局的卡组，这是最难创建的卡组类型，因为真正的一击必杀组合技往往在游戏推出前就被设计者干掉了&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，曾经的猎人 &lt;a href=&#34;http://www.hearthhead.com/card=1243&#34;&gt;Unleash The Hounds&lt;/a&gt;（关门放狗）OTK（one turn kill，即一回合击杀）卡组是迄今为止最好的例子，当时的关门放狗卡牌能够帮助猎人在空场的情况下凭空一回合创造超过30点伤害，后来该卡牌被暴雪重做为目前的形态，从而消除了该组合的可能性。事实上在经典的卡牌游戏里有两类组合卡组：互动型和非互动型，其中互动型是稍微不那么令人沮丧的，前述猎人 OTK 卡组就属于这一类；而非互动型组合卡组基本不会出现在炉石传说中，如果感兴趣，可以了解下游戏王里著名的“黑暗大法师”卡牌，这是一套五张卡牌，只要集齐黑暗大法师身体的五个部分于手牌就立刻赢得对局，这种组合卡组和对手完全没关系，只要能快速的检索卡组，对手对你获胜是完全无法施加影响的，事实上游戏王里设计这组卡也更多是为了剧情需要。相对来说，猎人 OTK 卡组是完全可以阻止的，只要在第七回合之前在场上铺上足够的嘲讽仆从就行了。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;在万智牌中也有少量的非互动型组合卡组：做 X+Y+Z 即获胜，但取胜条件往往包含某些需要显式打出的牌（而不是黑暗大法师那种仅仅在手就行），而万智牌和炉石传说的一个基本差异在于万智牌中你永远可以在对手的打牌阶段进行反制，所以万智牌里这并不成为一个太大的问题，但炉石传说里就不应该出现这种类型的卡组了（除非开发者脑抽）。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Aggro-control 控场快攻&lt;/strong&gt;：由于基本互动机制的设计，相比万智牌在炉石传说中更容易出现这种卡组，这种卡组往往通过一开始建立小的场上威胁然后转入快速打脸，也就是早期控场然后猛攻对方英雄。这种类型的卡组比纯快攻稍慢，前期比较重视控场，一些着重于武器卡牌的卡组经常属于这种类型，因为可以通过武器来消除对方场上仆从，然后使用己方场上仆从快攻对方英雄来取胜。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tempo 节奏&lt;/strong&gt;：这是另一个非常难构建的类型，在所有卡组类型里属于比较非主流的，因为它通常会放弃&lt;em&gt;卡牌优势&lt;/em&gt;&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;，通常这种类型的卡组会扔出几个快速威胁——比如 &lt;a href=&#34;http://www.hearthhead.com/card=405&#34;&gt;Mana Wyrm&lt;/a&gt;（法力游龙）——然后想办法拖延对方的节奏，阻止对方消除自己的这个威胁，然后这个威胁会越变越大对对手产生巨大伤害。一些节奏卡组的典型好卡包括：&lt;a href=&#34;http://www.hearthhead.com/card=519&#34;&gt;Freezing Trap&lt;/a&gt;（冰冻陷阱）、&lt;a href=&#34;http://www.hearthhead.com/card=587&#34;&gt;Frost Nova&lt;/a&gt;（冰霜新星），他们都不会带来卡牌优势（多数时候是净亏卡），但是如果你的战术目标就是拖延对手那就无所谓了。其他常见的节奏卡组核心威胁卡还有：&lt;a href=&#34;http://www.hearthhead.com/card=1693&#34;&gt;King Mukla&lt;/a&gt;（穆克拉）、&lt;a href=&#34;http://www.hearthhead.com/card=932&#34;&gt;Gadgetzan Auctioneer&lt;/a&gt;（加基森拍卖师）等，而其他用来占据节奏优势的卡包括 &lt;a href=&#34;http://www.hearthhead.com/card=461&#34;&gt;Sap&lt;/a&gt;（闷棍）、&lt;a href=&#34;http://www.hearthhead.com/card=113&#34;&gt;Counterspell&lt;/a&gt;（法术反制）、&lt;a href=&#34;http://www.hearthhead.com/card=990&#34;&gt;Conceal&lt;/a&gt;（隐藏）等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;一般术语&#34;&gt;一般术语&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Board Wipes 清场&lt;/strong&gt;：指如 &lt;a href=&#34;http://www.hearthhead.com/card=1004&#34;&gt;Flamestrike&lt;/a&gt;（烈焰风暴）、&lt;a href=&#34;http://www.hearthhead.com/card=841&#34;&gt;Holy Nova&lt;/a&gt;（神圣新星）这类群体伤害效果，由于来自魔兽世界游戏的习惯，在炉石传说社区中经常被称为 AoE（Area of Effect，范围效果），但这个“范围”的提法显得有点不够严谨，炉石传说中确实有一些“范围”相关的效果卡，比如 &lt;a href=&#34;http://www.hearthhead.com/card=430&#34;&gt;Cone of Cold&lt;/a&gt;（冰锥术）和 &lt;a href=&#34;http://www.hearthhead.com/card=394&#34;&gt;Explosive Shot&lt;/a&gt;（爆炸射击），但在卡牌游戏里习惯称之为“多目标移除”效果（multitarget removal）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bounce 回手&lt;/strong&gt;：这个词儿等价于“将一个场上的仆从返回其所有者手牌”，这类卡常见于节奏卡组中，一般来说是亏卡的效果。回手一个仆从比击杀要差因为对手总还是可以再次使用被回手的卡，所以运用这种效果需要仔细的设计。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Burn 直伤&lt;/strong&gt;：等价于“对X造成Y点伤害” ，经常是针对对方英雄，所以中文社区也经常称之为打脸。快攻卡组在中期以后通常都会不断的打脸直到对方倒下。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cantrip 过牌&lt;/strong&gt;：等价于任何带有“抽X张卡”的效果，这类卡通常都是很有价值的，因为它们至少抽一张卡来替代自己，这会带来所谓的&lt;em&gt;卡牌优势&lt;/em&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clock 计时器&lt;/strong&gt;：这个是稍微没那么常见的术语，但却很重要，你的威胁可以看做一个计时器，也就是在多少回合之后你可以杀死你的对手（如果你的威胁不被解除），比如在空场情况下，你的对手有12点生命，那么出场一个 &lt;a href=&#34;http://www.hearthhead.com/card=281&#34;&gt;Argent Commander&lt;/a&gt;（银色指挥官）等于一个3回合的计时器，这个概念对于快攻和节奏卡组来说格外重要，相应的，控制卡组更多会这么去思考：对方会给我多大的压力（我还能撑多少回合）？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Curve （法力）曲线&lt;/strong&gt;：组成卡组的卡牌按照各费用统计分别有多少张，组成一个分布图，这往往能看出卡组偏向游戏前中还是后期，各种卡组类型会有不太一样的典型曲线，虽然不是绝对的，但经常具有参考价值。在炉石传说的组卡界面里，鼠标停在英雄头像处就会显示当前的卡组曲线。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Filtering 滤牌&lt;/strong&gt;：从卡组的某个子集中选出一部分卡，有时候还允许玩家挑选其中的某张。和过牌不一样，这通常不直接带来&lt;em&gt;卡牌优势&lt;/em&gt;，但是因为可以有目标地选择有用的牌，对于组合卡组和某些控制卡组来说是很强大的效果，典型的例子是 &lt;a href=&#34;http://www.hearthhead.com/card=1047&#34;&gt;Tracking&lt;/a&gt;（追踪术）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Going Off 发动/起爆&lt;/strong&gt;：一个组合卡组在某特定回合“发动”然后你就挂了 -_-&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ping 点（掉）&lt;/strong&gt;：对目标施以刚好一点伤害并击杀它，或者之后用其他较弱的仆从换掉它，法师的英雄技能和 &lt;a href=&#34;http://www.hearthhead.com/card=573&#34;&gt;Shiv&lt;/a&gt;（毒刃） 这样的法术都经常用来干这个。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ramp 跳卡&lt;/strong&gt;：指获得额外资源的效果，从而你可以提前打出某些卡，或者在一回合打出更多的卡，炉石传说中的德鲁伊英雄的招牌特征就是拥有游戏中最强的跳卡能力，无论是 &lt;a href=&#34;http://www.hearthhead.com/card=254&#34;&gt;Innervate&lt;/a&gt;（激活） 还是 &lt;a href=&#34;http://www.hearthhead.com/card=1124&#34;&gt;Wild Growth&lt;/a&gt;（野性成长）都是典型的跳卡效果。对其他职业来说最典型的跳卡选项是抽中后手而获得的幸运币。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Synergy 协同增效&lt;/strong&gt;：首先这个词儿和 “Combo 必杀组合” 不是同义词，一般来说 combo 会直接带来胜利（比如前述猎人的 OTK），而 synergy 的含义要广泛的多，只要多张卡的效果超过分别效果简单相加就可以认为它们之间有某种“协同增效”，比如任何带有激怒（Enrage）效果的仆从和 &lt;a href=&#34;http://www.hearthhead.com/card=285&#34;&gt;Cruel Taskmaster&lt;/a&gt;（严酷的监工）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Top Deck 顶牌&lt;/strong&gt;：这个术语来自实体卡牌游戏，就是待抽卡堆最上面的一张牌。在卡牌游戏中有两种说法与之有关，一种就是指当回合抽上来这张牌，比如说我“神抽了一张X”（top decking X）然后靠这个翻盘了，另一种是指某方已经用光了手牌，每回合只能指望抽上来的那张牌，这叫 “playing off the top”，这经常体现巨大劣势，因为几乎没有什么选择可做，即使血量优势很大，也可能在无手牌的状态下被对手逆转。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;高级概念&#34;&gt;高级概念&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Beatdown vs. Control 抢血与控制&lt;/strong&gt;：这大概是卡牌游戏里最重要的概念之一，如果可能的话请一定读一下这篇万智牌元老级玩家 Mike Flores 的经典文章：&lt;a href=&#34;http://www.starcitygames.com/magic/fundamentals/3692_Whos_The_Beatdown.html&#34;&gt;Who&amp;rsquo;s the Beatdown&lt;/a&gt;，虽然他举的例子都是万智牌而且是一些古旧的卡，但是概念是十几年都没变的（在可预见的将来也不会变）。简单的说，就是无论你使用什么类型的卡组，对手使用什么类型的卡组，在每一个特定的对局中，都有一方倾向于抢血（尽快杀死对面的英雄），而另一方就倾向于控制（存活并在后期解决战斗），如果在对局中对于“谁需要抢血”判断错误，往往就不可避免的会走向失败（当然判断正确也不一定会胜利）。这个问题的困难（以及重要性）在于，可能你的卡组在99%的对局中都是控制方，但并不意味着它必须在每一局都是控制方，某次你会碰到一个比你更“控制”的卡组，在这个对局中你必须打抢血。记得前面说的中速卡组吗？最早的中速卡组就是在这个概念的启发下设计出来的，其目标就是针对典型的控制卡组打抢血，而针对典型的快攻卡组打控制，从而在大量对局中取得较高的胜率。事实上在我写这个文章的时候，统治天梯的卡组就是中速卡组。Mike Flores 的文章里也给出了一些判断“谁该抢血”的一般性建议，摘录如下供参考：&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;谁的卡组持有更多伤害输出？通常他应该打抢血。&lt;/li&gt;&lt;li&gt;谁的卡组持有更多去除卡？通常他应该打控制。&lt;/li&gt;&lt;li&gt;谁持有更多控制法术和抽卡牌？一般情况下他应该打控制。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;Mike Flores, &lt;a href=&#34;http://www.starcitygames.com/magic/fundamentals/3692_Whos_The_Beatdown.html&#34;&gt;Who&amp;rsquo;s The Beatdown?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有时候根据上述规则可以判断某方必然（只能）打抢血，但由于某些特定的卡牌组合，该方实际上很难成功抢血（比如对手有太多治疗能力，或者太快的直接伤害能力），那么这就形成了“卡组克制”，该方在这类对局中胜率就很堪忧了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Vanilla Test 还原测试&lt;/strong&gt;：这是一种万智牌玩家经常使用的非常酷的对卡牌价值进行判断的方法。简单说就是：如果把卡牌的规则文本（即卡牌下半方框里的文字）完全去掉，这卡如何？以削弱前的 &lt;a href=&#34;http://www.hearthhead.com/card=608&#34;&gt;Shattered Sun Cleric&lt;/a&gt;（破碎残阳祭司）为例，削弱前她是3费的一张3/3体格的仆从，即使完全不考虑卡牌文字，这也是完全可以上场的卡牌，再加上给另一仆从+1/+1的效果，这是一张大大优于常规的卡（所以结果大家都知道，她被砍成现在的3/2了 -_-）。相反的例子是 &lt;a href=&#34;http://www.hearthhead.com/card=605&#34;&gt;Ancient Watcher&lt;/a&gt;（上古看守者），这是一张2费的4/5，所以文字必然是极大的负效果（无法攻击），所以运用这张卡的关键就是如何弱化甚至去除这种负效果（现在流行的给他施加嘲讽甚至干脆沉默掉他的效果都被证明非常有价值）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Card Advantage 卡牌优势&lt;/strong&gt;：这是另一个非常常见的术语，但是在很多情况下都没有被准确的表述。最具争议的例子是 &lt;a href=&#34;http://www.hearthhead.com/card=284&#34;&gt;Novice Engineer&lt;/a&gt;（工程师学徒），当你出这张卡，你抽一张卡，同时场上站了一个1/1的仆从，表面上看这是1换2，但问题是在炉石传说目前的阶段，一张牌的价值并没有精确的定义，很多人认为1/1的学徒并不值“一张卡”，所以她的价值低于1换2，相对的，&lt;a href=&#34;http://www.hearthhead.com/card=825&#34;&gt;Azure Drake&lt;/a&gt;（碧蓝幼龙）毫无争议的被看作至少是1换2的价值，因为对手很少能用少于一张卡来移除它，而它很容易带来额外的价值从而超过1换2的价值。另一个比较没有争议的1换2（多）的典型是 &lt;a href=&#34;http://www.hearthhead.com/card=1004&#34;&gt;Flamestrike&lt;/a&gt;（烈焰风暴），只要对手场上不少于2张牌，这张牌的价值就至少是1换2。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一个常见的误区是把&lt;em&gt;卡牌优势&lt;/em&gt;用作说明手牌多或者场上有更多仆从，这都是不对的，正确的方式是把它理解为一个记分牌，两个对手通过尽可能高效地使用他的卡牌资源来竞赛，比如某方打出1换2，那么就得到+1分，某方被迫用3张卡牌（手牌或者场上仆从）去换掉对手一张牌，那么就得到-2分，卡牌效率得分高是拥有“卡牌优势”的充分必要条件。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Expected Value 期望值&lt;/strong&gt;：期望值是很多游戏中都用到的工具，不过最经常用在扑克牌戏（如德州扑克）中，用来计算在某个特定局面下各种可能带来的平均回报，最常见就是用来计算获胜的可能性。例如：你是一个法师，依靠 &lt;a href=&#34;http://www.hearthhead.com/card=192&#34;&gt;Ice Block&lt;/a&gt;（寒冰屏障）活下来，只有一抽决定你的生死，你的卡组只剩三张牌：&lt;a href=&#34;http://www.hearthhead.com/card=1087&#34;&gt;Pyroblast&lt;/a&gt;（炎爆术）、&lt;a href=&#34;http://www.hearthhead.com/card=315&#34;&gt;Fireball&lt;/a&gt;（火球术）和 &lt;a href=&#34;http://www.hearthhead.com/card=658&#34;&gt;Leper Gnome&lt;/a&gt;（麻风侏儒）。在这个局面下，如果你的对手剩6点生命的话，你的获胜期望值就是 66%，如果他有10点生命，你的获胜期望值就只有 33% 了。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;part-ii---卡组构筑初步&#34;&gt;Part II - 卡组构筑初步&lt;/h2&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/hs-deck-constructing.jpg&#34;&gt;&lt;/figure&gt;&lt;p&gt;这一部分我会结合上面谈到的基本概念以及我自己的经验，给刚迈进炉石传说的新人朋友们一些建议，仅供参考。&lt;/p&gt;&lt;h3 id=&#34;基础知识&#34;&gt;基础知识&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;炉石传说有两个核心游戏模式：构筑模式（使用自己拥有的卡构建卡组的 Play mode）和竞技场模式（随机选卡的 Arena mode），竞技场模式主要目的是提供一个免费获取卡牌的途径，它和构筑模式非常不同，下面说的一切都只针对构筑模式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;炉石传说从一开始就被设计为休闲为主、兼顾竞技的游戏，所以选择自己舒服的玩法就好，并不需要太过追求战绩。但如果确实希望自己在天梯上取得一定的成绩才会觉得满足的话……请继续看下去（&lt;strong&gt;否则可以到此为止啦&lt;/strong&gt;）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;卡牌游戏的核心循环是：收集卡牌 - 构建卡组 - 对战 - 调整卡组 - 对战 - 收集更多卡牌 - …，这里面每一个环节都很重要也可以很有乐趣。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;收集卡牌需要付出金钱和/或时间，一般来说就是量力而为，全卡有全卡的玩法，不全也有不全的玩法，但总的来说必须要去收集，有不断增长的卡集才会有继续玩的乐趣。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;从无到有的构建一个有竞争力的卡组不是每个人都能做到的，所以一开始肯定要参考网上流传的各种优质卡组，但一边对战一边调整，使之更适合自己拥有的卡集以及自己的打牌风格是必备的能力，需要不断磨练。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;没有万能的卡组，任何卡组都有天敌，所以还有一个潜在的游戏内容：游戏元环境（meta），也就是“目前大家主要在玩什么样的卡组”，能够根据对这个问题的判断调整自己的卡组来提高胜率才算是较成熟（serious）的构筑模式玩家。掌握游戏元环境的方法主要是借助网络等渠道了解最新信息，玩家间交流以及实战中获得信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;卡牌游戏通常都是易会难精，很多人打了一阵就觉得打牌没什么，通常似乎就那么几个选择而已，其实在水平达到更高水准之前压根就不知道还有别的选择，往往是前期一个看似不起眼的选择差异最终导致不一样的结果。相信熟悉桥牌的朋友会很容易理解这个概念。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;卡组构筑&#34;&gt;卡组构筑&lt;/h3&gt;&lt;p&gt;上面已经提到，通常我们都是先参考流行卡组，边打边微调提升自己运用的实际效果，然后慢慢的学会更多的自主设计卡组，这个过程一般不会太快，但是了解一些套路会有帮助。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择英雄&lt;/strong&gt;：这个问题的答案，当然是“有爱最大”，但也应该了解一些常识：有些职业比其他的职业更容易构建出有一定竞争力的卡组（比如牧师和盗贼），而另一些职业需要更多投入取得一些价值不菲的关键卡（比如德鲁伊和圣骑士）；有些职业的英雄技能是相对比较容易上手的（比如法师和盗贼），等等，这些信息会有助于做出最初的选择。当然如果一开始就打算投入一笔不多不少的钱，完全可以全职业制霸，选自己最喜欢或者最热门的英雄开玩就好。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择卡组类型&lt;/strong&gt;：上面列举了很多卡组的类型，对于新人来说至少要在偏快速还是偏后期中做出选择，因为这两个方向需要的卡牌和打牌风格差异都很大，一开始选错可能会走不少冤枉路，按照自己的性格和准备投入的资源选择吧。一般来说快攻卡组会比较廉价，也会有一定的胜率，但比较看脸，大多数人都会先从这种开始。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;确定卡组主题&lt;/strong&gt;：这里的关键就是“&lt;strong&gt;胜利条件（winning condition）&lt;/strong&gt;”，也就是说，在什么情况下你会取胜？例如经典的猎人 Turn 7 卡组，其原理是：从1到7回合一共会得到 28 点法力水晶，如果能保证每点水晶给予对手英雄一点伤害那么就可以在第八回合用英雄能力“稳固射击”取得胜利，这就是胜利条件。那么整个卡组就围绕这个主题来进行：每费选出能冲锋或者战吼给予对手对应点数伤害的仆从和法术，这就是卡组的基础了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;了解职业强卡&lt;/strong&gt;：卡牌游戏的重要特点之一就是——有神卡也有废卡，总有一些卡比其他的要更强一些。每个职业都有自己专属的强卡，也有和自己特点配合最好的一些中立卡，比如德鲁伊有核心的十二张职业卡（&lt;a href=&#34;http://www.hearthhead.com/card=254&#34;&gt;Innervate&lt;/a&gt; 激活x2，&lt;a href=&#34;http://www.hearthhead.com/card=836&#34;&gt;Wrath&lt;/a&gt; 愤怒x2，&lt;a href=&#34;http://www.hearthhead.com/card=64&#34;&gt;Swipe&lt;/a&gt; 横扫x2，&lt;a href=&#34;http://www.hearthhead.com/card=601&#34;&gt;Keeper of the Grove&lt;/a&gt; 丛林守护者x2，&lt;a href=&#34;http://www.hearthhead.com/card=692&#34;&gt;Druid of the Claw&lt;/a&gt; 利爪德鲁伊x2，&lt;a href=&#34;http://www.hearthhead.com/card=920&#34;&gt;Ancient of Lore&lt;/a&gt; 知识古树x2）再加配合最佳的中立仆从 &lt;a href=&#34;http://www.hearthhead.com/card=778&#34;&gt;Harvest Golem&lt;/a&gt; 麦田傀儡x2；猎人有核心职业卡牌 &lt;a href=&#34;http://www.hearthhead.com/card=1243&#34;&gt;Unleash The Hounds&lt;/a&gt; 关门放狗x2、&lt;a href=&#34;http://www.hearthhead.com/card=1241&#34;&gt;Starving Buzzard&lt;/a&gt; 饥饿的秃鹫x2、&lt;a href=&#34;http://www.hearthhead.com/card=585&#34;&gt;Explosive Trap&lt;/a&gt; 爆炸陷阱x2、&lt;a href=&#34;http://www.hearthhead.com/card=1091&#34;&gt;Misdirection&lt;/a&gt; 误导x2 等，把这些卡有选择的加入上一步组成的集合里就是一个相当有竞争力的卡组雏形了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;加入解卡&lt;/strong&gt;：对战是两个人的博弈，不是只有自己的威胁，对方也会不断拿出威胁，那么卡组中除了上述卡牌之外还需要补充哪些解除对方威胁的卡？这要看对方主要会有什么威胁，如果对你的卡组主题来说最怕的是对方的嘲讽仆从，那么需要有针对性的带上破嘲讽的解卡（比如带沉默效果的卡，或者专门针对性的 &lt;a href=&#34;http://www.hearthhead.com/card=1656&#34;&gt;The Black Knight&lt;/a&gt; 黑骑士）；如果你的卡组主题就是要和对手拼后期的，那么你必须有足够的破解对方大牌的解牌，如 &lt;a href=&#34;http://www.hearthhead.com/card=77&#34;&gt;Polymorph&lt;/a&gt; 变形术、&lt;a href=&#34;http://www.hearthhead.com/card=766&#34;&gt;Hex&lt;/a&gt; 妖术、&lt;a href=&#34;http://www.hearthhead.com/card=570&#34;&gt;Tinkmaster Overspark&lt;/a&gt; 工匠大师 等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;平衡曲线&lt;/strong&gt;：仔细审视到目前为止的卡组法力曲线，一般合格的曲线是以某个关键费用（通常是4费）为中心呈现的正态分布曲线，如果曲线过于偏向左或者右，那就需要有针对性的调整。炉石传说里设计了很多效果类似但是费用不同（当然属性也不一样）的卡牌，拿掉一些过于拥挤费用上的卡牌，用较稀少费用的类似效果卡牌代替。有时候卡组会不够30张，有时候会30张装不下，也在这个步骤里进行合理的调配吧。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;实验和调整&lt;/strong&gt;：有条件的朋友可以找好友组特定卡组来实验，或者在休闲模式多打些，都是可以的，然后有针对性的进行调整，比如经常在某费无牌可出，可能需要重新思考法力曲线的平衡；经常被某特定卡牌或者套路欺负，那么可以增加一些针对的卡；出现手牌不足或者老抽不齐关键卡牌，就要考虑增加一些过牌；需要的卡牌太多，就需要一些特定关键卡来集成几种效果从而压缩卡组，等等，这些就只能慢慢体会了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;实战&lt;/strong&gt;：无论怎么样最后总是要上战场的，去天梯实战吧！Rank 5 以前都有连胜奖励，即使输掉一些对局也不太要紧，心态放好就行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;学而时习之&lt;/strong&gt;：做任何事要做好都不容易，不时看看相关的论坛，和玩友多交流交流，看看自己喜欢的职业有哪些新的组卡和打法思路，经常会有启发；对自己不太用的职业也有必要了解，不做到知己知彼是不可能有好成绩的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;好长的一篇！那么……就到这里吧，谢谢看完的朋友们捧场（估计没几个吧），希望对大家有帮助，有问题欢迎留言讨论！&lt;/p&gt;&lt;script type=&#34;text/javascript&#34; src=&#34;http://static.wowhead.com/widgets/power.js&#34;&gt;&lt;/script&gt;&lt;script&gt;var wowhead_tooltips = { &#34;colorlinks&#34;: true, &#34;iconizelinks&#34;: true, &#34;renamelinks&#34;: true }&lt;/script&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;所以“快攻”只是一个不太准确的翻译，但已经被普遍采用所以我仍然采用这一译法。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;胜利条件：原文为 “winning condition”，即设计卡组时预设的主要获胜场景，是非常重要的概念，在本文后半部分还会重点阐述。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:3&#34;&gt;&lt;p&gt;和“快攻”一样，“中速”也是个并不太准确但约定俗成的译法。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:4&#34;&gt;&lt;p&gt;这一点和下面会提到的著名的 “Beatdown vs. Control” 概念有很大的关系，请对照。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:5&#34;&gt;&lt;p&gt;炉石传说开发团队早就明确表示过，由于对游戏体验的巨大伤害，不能通过对手互动行为阻止的必杀组合技是不允许出现的。&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:6&#34;&gt;&lt;p&gt;即下文会阐述的 Card Advantage，也是卡牌游戏中的重要概念，请对照。&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Merry Christmas, from My iPhone</title>
       <link>/posts/merry-christmas/</link>
       <pubDate>Tue, 24 Dec 2013 18:34:00 +0800</pubDate>
       
       <guid>/posts/merry-christmas/</guid>
       <description>&lt;p&gt;明天就是圣诞节了，在这里跟各位朋友提前说一声“圣诞快乐”。年末商战渐入高潮，看了几支大品牌的圣诞广告，有点感想没法在几条推里说完，就在这里和大家分享吧。&lt;/p&gt;&lt;p&gt;首先是 Apple 为其 iPhone 5s 制作的电视广告 “&lt;a href=&#34;https://www.youtube.com/watch?v=nhwhnEe7CjE&#34;&gt;Misunderstood&lt;/a&gt;”，如果还没看过的话，可以在 Apple 的 YouTube 官方频道&lt;a href=&#34;https://www.youtube.com/watch?v=nhwhnEe7CjE&#34;&gt;观看&lt;/a&gt;。这支长达 1 分半钟的广告讲述了一大家人的白色圣诞节，主角是一位略显内向羞涩的少年，他一边和家人一起参与各种活动，一边无时不刻地摆弄着自己的 iPhone 5s 智能手机，似乎是在说科技产品让人之间疏远？当然不是，最后少年在圣诞早晨打开大屏幕电视，用 iOS 的 AirPlay 功能在电视上播放了自己这些天拍摄和剪辑的视频，里面记录了大家族团聚的各种难忘瞬间，最后在感人的催泪弹中结束。同时 Apple 还在自己的官方频道上传了一段长度约 2 分钟名为 “A Harris family holiday” 的视频，基本上是广告里少年所制作的视频的完整版本（我很好奇这是不是真的完全用 iPhone 拍摄和制作完成的）。&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/misunderstood.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;Apple Holiday Ad 2013 - Misunderstood&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;就像其他好的艺术品，这支广告并不是简单传达单调的概念，而是能给每个观众带来不一样的感触，而每个人的观感是和他的经历、价值观等密切相关的。就我自己来说，我觉得这支广告的独特之处在于它就像 Apple 一样，独特、大胆，敢于与众不同。为什么这么说？这是圣诞购物季，在 Samsung 这种公司使劲儿&lt;a href=&#34;https://www.youtube.com/watch?v=PYaIshYevcI&#34;&gt;推销它的产品如何 powerful&lt;/a&gt; 的时候，Apple 却敢于在广告的大部分时间里传达这么一种显得负面的印象：在大家族团聚时，这个少年似乎更在意自己的 iPhone，这种“高科技淡化人际情感”的担心很多人都有，Apple 在这里直面了这个问题，并在一个巧妙的结尾里给出了自己的答案：我们开发的是优秀的工具，它也许会让人沉迷，但在有想法的人手里，它能超越过去任何工具，变不可能为可能，带来无与伦比的效果。“为世界上最棒的人带来最棒的工具”正是 Apple 的核心价值观，深埋于已故创始人 Steve Jobs 的成长经历中，展现在经典的 “Think Different” 广告中，Jobs 去世后 Laurene P. Jobs 也在&lt;a href=&#34;http://www.cultofmac.com/223449/steve-jobss-widow-speaks-out-his-legacy-is-beautiful-for-me-to-live-with-video/&#34;&gt;接受采访时讲过&lt;/a&gt;——现在我很高兴的看到，在 Jobs 离去两年多以后，Apple 还是那个 Apple，那个也许产品功能不独特，但最善于把握&lt;a href=&#34;http://soulhacker.me/2012/03/31/soul-link/&#34;&gt;产品与人之间情感连接&lt;/a&gt;的 Apple。后来（同样很开心地）发现，我的感受和长期与 Apple 共事的广告大师 Ken Segall 不谋而合，他在自己 blog 的一篇短文里写道：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The twist, of course, is that this kid is different. Far from withdrawn, he’s actually inspired. He’s using technology to give the family a gift from the heart — one that will be treasured for years to come.&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;Ken Segall, &lt;a href=&#34;http://kensegall.com/2013/12/apple-thinks-different-for-christmas/&#34;&gt;Apple thinks different for Christmas&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这支广告播出之后当然也不是只有好评，Forbes 的编辑 Jennifer Rooney 就有&lt;a href=&#34;http://www.forbes.com/sites/jenniferrooney/2013/12/17/the-iphone-misunderstood-christmas-ad-is-a-sad-commentary-on-culture-and-does-apple-no-favors/&#34;&gt;一篇评论&lt;/a&gt;对此颇不以为然，这篇文章被转到比较偏技术向人群聚集的 &lt;a href=&#34;http://www.reddit.com/r/technology/comments/1tix2m/apples_christmas_ad_a_sad_commentary_on_culture/&#34;&gt;/r/technology&lt;/a&gt; 立刻引来大把评论，可以看到大部分观众表示感受到了创意和感动，尤其是不少上了年纪的大叔回忆起自己刚当爹的时候扛着重型装备全程拍孩子的（既兴奋又疲劳的）日子。&lt;/p&gt;&lt;p&gt;Apple 曾经是科技公司里重视商业广告的异类，但随着后 PC 时代的概念广为人们所接受，计算机沿着智能手机开辟的疆土，终将延展到“无处不在的计算”领域，成为和家用电器、手表围巾一样的消费商品，所以我们也可以看到越来越多的科技巨头重视商业广告，借助新旧媒体扩大品牌影响力，请看 Samsung 这这支 “&lt;a href=&#34;https://www.youtube.com/watch?v=PYaIshYevcI&#34;&gt;Are You Geared Up?&lt;/a&gt;”，还有 Nokia 的这支 “&lt;a href=&#34;https://www.youtube.com/watch?v=Q7xVrI-tUIQ&#34;&gt;For Work. For Play&lt;/a&gt;”，还有 Microsoft 这支很 last century 的 “&lt;a href=&#34;https://www.ispot.tv/ad/75ZE/microsoft-surface-2-teacher&#34;&gt;Teacher&lt;/a&gt;”，水准高下各位自有公论。&lt;/p&gt;&lt;p&gt;最后还要再说一次: Merry Christmas, to all tech lovers. We ARE the future of human beings.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>译文：为何 SICP 意义重大</title>
       <link>/posts/why-sicp-matters/</link>
       <pubDate>Thu, 02 May 2013 21:50:00 +0800</pubDate>
       
       <guid>/posts/why-sicp-matters/</guid>
       <description>&lt;p&gt;&lt;strong&gt;原文&lt;/strong&gt;：&lt;a href=&#34;http://www.cs.berkeley.edu/~bh/sicp.html&#34;&gt;Why &lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt; Matters&lt;/a&gt;&lt;br&gt;&lt;strong&gt;作者&lt;/strong&gt;：&lt;em&gt;Brian Harvey, University of California, Berkeley&lt;/em&gt;&lt;br&gt;&lt;strong&gt;译者&lt;/strong&gt;：&lt;em&gt;Neo Lee a.k.a @soulhacker&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;译者序&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;Brian Harvey 是加州大学伯克利分校计算机科学专业的教授。2011 年是麻省理工大学（MIT）建校 150 周年，为了庆祝，《波士顿环球报&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;》准备了一份 MIT 的重要创新列表，著名的计算机科学专业入门教材 Structure and Interpretation of Computer Programs (SICP) 名列其中，Brian Harvey 受邀对 SICP 的重要价值和意义书写一份说明，本文就是他当时的回应。关于函数式编程范型的价值和意义，是一个在计算机科学尤其是软件开发领域经常被提出的话题，通常也伴随着这样那样的争论：它深刻的理论背景与内涵、和人们常规思维模型的差异、一直难以流行的宿命引发的“曲高和寡还是不切实际”的争论，等等。我自己可能由于从小喜欢数学的缘故，对函数式编程范型一直很有好感，也深信如另一位大牛，John Hughes 在其名作 Why Functional Programming Matters&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;（不知道这两篇文章相似的标题是巧合，还是 Harvey 教授有意模仿了 WhyFP）中阐述的，函数式编程有其独特价值，很可能更接近我们追求的更理想的软件工程目标。SICP 从一个侧面似乎也证实了：一种一直没有流行起来的、非常典型的函数式编程语言，作为 LISP 方言的 Scheme，非常好的完成了“给大学一年级新生一个严谨扎实的编程概念基础”的任务，而 Harvey 教授的文章，非常简明、清晰的阐述了 SICP 的创新价值，即使在数十年之后的今天，也没有过时。下面是译文，除了特别标出的唯一一处以外，其他脚注都是我加上的，与原作者无关，请留意。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;译文&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;SICP 在很多方面都非常具有革命性，其中最重要的是，它显著的提高了计算机科学（CS）入门课程内容的智力水平。在 SICP 之前，CS 专业的第一门课通常都充斥着某种特定编程语言的细节，但 SICP 采取的方法是站在这些细节的背后，努力学会从大局着眼去思考计算的过程，它引导学生把注意力聚焦在“抽象”这个关键点，学会去寻找特定问题背后的一般模式，然后构建软件工具来解决这些一般性的问题。SICP 大量应用“函数也是数据”的概念，这个概念初期学起来很困难，但掌握之后极其强大（微积分是同一概念的另一种表现形式，也经常让很多之前数学课程都学得不错的学生栽跟头）。SICP 在 CS 专业的第一门课中展示了三种不同的编程范型（函数式、面向对象和描述式&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;），而大部分其他课程甚至连一种也没真正讨论过。&lt;/p&gt;&lt;p&gt;SICP 另外一个革命性标志是选择了 Scheme 作为教学编程语言。从有 CS 专业直到今天，大部分 CS 入门课程主要使用当时的“热门”语言，从 Pascal 到 C 到 C++ 到 Java 再到 Python。Scheme 从来未在行业中广泛应用，但它是 CS 入门课程的完美语言，因为它使用一个非常简单、一致的记法&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;来处理所有事情，而其他语言用一种记法来处理变量赋值，另外一种记法来处理条件执行，另外 2-3 种记法处理循环，再来一种处理函数调用，使用这些语言的课程得花上一半的时间来教授这些记法，而我在伯克利的基于 SICP 的课程上，只用第一个小时来讲记法就够了，整个学期剩下的时间我们都用来学习思想，而不是语法。同时，尽管有着无与伦比的简单性（也许恰恰是因为这种简单性），Scheme 仍是一种很全面的通用语言，所以我们能凭之窥见三种不同编程范型的概貌，尤其是可以让我们了解面向对象编程是怎么实现的，这样所有的面向对象编程语言对于我们的学生来说就不再像某种神奇的戏法。&lt;/p&gt;&lt;p&gt;Scheme 是 Lisp 的一种方言，所以它能非常好地将函数作为数据来处理，同时它又是专业编程工作采用的 Lisp 方言的一个简化版本，去掉了很多枝节和装饰物。Abelson 和 Sussman&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; 非常大胆的在他们的入门课程中选择了最适合教学的编程语言，而无视了实际工作需要的各种其他编程语言，因为他们相信一旦掌握了那些真正重要的思想，学习另一种编程语言完全不是问题，就像进行一次周末例行大扫除一样，我从自己的经历出发也完全认同这一点。我经常对我的学生说：“你将在职业生涯中使用的编程语言还没被发明出来，所以我们没法在这里教给你，但我们必须教会你一些重要的技能，这样当它们出现时你很快就能学会。”&lt;/p&gt;&lt;p&gt;最后，SICP 对于大学新生能达到的程度非常积极乐观，SICP 课程学生要编写编程语言的解释器，这通常被认为更适合于二年级或更高年级的学生。SICP 课本并不易懂，没有侧边栏、五颜六色的提示框和有趣的图片（这是现代教科书针对注意力难以长时间集中的学生的典型设计），它也没有冗复的练习题，每道练习题都讲授了一个重要的新思想；它使用大量的文字，但回报是更深入的阅读，每个句子都有其深意。&lt;/p&gt;&lt;p&gt;从统计角度来说，以 SICP 为基础的课程只占一个很少的比例，但这本书的影响远远超出了这个少数比例，它启发了一系列后来教科书的作者，令他们有意识地努力去达到 SICP 树立的标准。而选择 Scheme 作为教学编程语言的也扩展到了从中学直到研究生院的范围。更多主流课程开始更重视编程范型，虽然它们大多只关注面向对象这一个编程范型。“计算机科学学科应该更加关注思想，而不全是关于编程实践”的观念也不断发展，进一步包括了一些非技术方面的思想，比如与计算相关的业务上下文和社会关联等。&lt;/p&gt;&lt;p&gt;SICP 本身享有在 CS 入门教科书中少见的长寿，一般来说一本教科书的寿命与其基于的编程语言挂钩，而 SICP 在 长达 25 年的时间里始终强健，迄今丝毫没有停印的迹象。在这 25 年间计算领域发生了巨大的变化，从巨大的主机系统发展到个人计算机再到今天手机上的互联网，但驱动所有这些变革背后的重要思想是一样的，他们都很好的体现在 SICP 中。&lt;/p&gt;&lt;p&gt;我从 1987 年开始教授以 SICP 为基础的课程，这些课程随着时间一点点的改进，我们加入了关于并行计算、并发控制、用户界面设计以及客户/服务器模型等内容，但它们本质上仍是同样的课程。每隔几年系里都会有人提出把第一门课换成另外的某种 X 语言，但我总是说：“当有人写出基于 X 语言的世界上最好的计算机科学教科书之后再说吧。” 到目前为止每次系里最后都投票决定继续基于 SICP 课程来教学。我们很快就能看到这课程是不是可以坚持到我退休&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;&lt;p&gt;最近关于 MIT 正在进行的电子工程和计算机科学（EECS）低年级课程重新设计的讨论越来越热烈，外部有人将其总结为“MIT 决定转向 Python”，但这是个误解。MIT 的决定主要是将以往基于内容领域组织的课程（编程范型，然后依次是电子电路，信号处理，架构等）转变为基于应用来组织（让我们搭建一个机器人并为其编程，让我们制造一部手机并为之开发软件等等），为了这个目标，几乎所有的课程都必须重新规划组织，编程语言的选择只是其中最不重要的一部分。他们的新模式对教学来说非常具有挑战性，因为所有课程都需要电子工程系和计算机科学系的紧密合作。也许未来某天这种应用为先的方式会引发一场伟大的变革，就像 SICP 曾经的那样，但目前还没实现。&lt;/p&gt;&lt;p&gt;在我自己的经历中，罕有学生在上我的课时候就感觉良好，但对我们所有 CS 学生的调查显示，这课程是他们数年后回忆起来最喜欢的课。经常有多年前的学生拜访或发电邮告诉我，他们在工作中实际用上的很多重要想法，在他们念书时都认为是不切实际的象牙塔学术思想，Google 在数据并行处理领域的重要发明 MapReduce 软件，就深深植根于函数式编程的思想，这也算是对“象牙塔学术思想”的一种正名吧。&lt;/p&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;MIT 所在的波士顿地区发行量最大的报纸，创立于 1872 年，1993 年被《纽约时报》收购。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html&#34;&gt;&lt;em&gt;Why Functional Programming Matters&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;John Hughes, 1984, 1989, 1990&lt;/em&gt;.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:3&#34;&gt;&lt;p&gt;描述式编程范型 &lt;a href=&#34;http://en.wikipedia.org/wiki/Declarative_programming&#34;&gt;Declarative Programming&lt;/a&gt;：摒弃控制流程，以描述和组合计算规则为主的编程模式，最典型的描述式编程范型应用包括结构化查询语言 SQL，以及逻辑编程语言 Prolog，绝大部分函数式编程语言中也大量采用这一范型，Scheme 即为很好的例子。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:4&#34;&gt;&lt;p&gt;记法，即 notation，是非常重要但经常被忽视的概念同时也是工具，有兴趣的朋友可以看看另外两位大家 &lt;em&gt;Brian Kernighan&lt;/em&gt; 和 &lt;em&gt;Rob Pike&lt;/em&gt; 合著的 &lt;a href=&#34;http://cm.bell-labs.com/cm/cs/tpop/&#34;&gt;&lt;em&gt;The Practice of Programming&lt;/em&gt;&lt;/a&gt; （国内有电子工业出版社的译本，裘宗燕老师的翻译质量相当不错）的第 9 章。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:5&#34;&gt;&lt;p&gt;&lt;em&gt;Harold Abelson&lt;/em&gt; 和 &lt;em&gt;Gerald Jay Sussman&lt;/em&gt;，MIT 的两位计算机科学教授，SICP 作者。&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:6&#34;&gt;&lt;p&gt;&lt;strong&gt;原文作者注&lt;/strong&gt;：看来结果没能（完全）实现，伯克利新的入门课程采用 Python，但教案尽量保留了原先 SICP 的思想（某些地方甚至沿用了原来的文本）。&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>FUJIFILM X100S</title>
       <link>/posts/fujifilm-x100s/</link>
       <pubDate>Mon, 29 Apr 2013 12:03:00 +0800</pubDate>
       
       <guid>/posts/fujifilm-x100s/</guid>
       <description>&lt;p&gt;作为一个 FUJIFILM X100 的忠实用户，实在是比较难抵抗 &lt;a href=&#34;http://www.fujifilm.com/products/digital_cameras/x/fujifilm_x100s/&#34;&gt;X100S&lt;/a&gt; 所有改进带来的诱惑，所以我在犹豫中错过第一批货之后还是订下一台，由于第二批货出厂一再延迟，到今天才终于辗转运到我手上。下面开始 show off…&lt;/p&gt;&lt;h3 id=&#34;用-x100-拍-x100s&#34;&gt;用 X100 拍 X100S&lt;/h3&gt;&lt;p&gt;买的港版赠送原厂皮套和一张 16G Class 10 Kinston 存储卡，这卡可以换给我原先的 X100，新机器继续用我的 Eye-fi（X100S 已经内置对 Eye-Fi 的支持）：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-1.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;港版套装&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;开箱，港版还附赠一个转换头：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-3.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;开箱&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;标准照:&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-4.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S 正面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-5.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S 上面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-6.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S 背面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;接上广角扩展镜头 &lt;a href=&#34;http://www.fujifilm.com/products/digital_cameras/accessories/lens/conversionlens/x100wideconversionlens/&#34;&gt;WCL-X100&lt;/a&gt;：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-7.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S &amp;#43; WCL-X100&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-9.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S &amp;#43; WCL-X100&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;顺便说下，WCL-X100 镜头素质也很好，接上后等效焦距为 28mm，视野差距大致如下图：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-bc.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S WCL-X100 vs. Original&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;崭新的原厂皮套：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100s-a.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S &amp;#43; 皮套&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&#34;用-x100s-拍-x100&#34;&gt;用 X100S 拍 X100&lt;/h3&gt;&lt;p&gt;以后 X100 就退休了，可能给我丫头玩（或者卖掉？），向陪我两年、跑了三大洲的老大哥致敬〜&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100-1.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;GJ X100&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100-2.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;GJ X100&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/x100-3.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;GJ X100&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&#34;x100s-vs-x100&#34;&gt;X100S vs. X100&lt;/h3&gt;&lt;p&gt;那么，到底有什么差别呢？拿起 iPhone 拍一组对比看看。&lt;/p&gt;&lt;p&gt;首先看正面，几乎没有差别，仔细看的话切换光学和电子取景器的拨钮稍有差异：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/duet-1.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S vs. X100 正面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;上面红色的“S”字母显示出型号的差异，以及去掉了初代机器展示独特性的文字：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/duet-6.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S vs. X100 上面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;右侧面完全一样：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/duet-5.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S vs. X100 右侧面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;左侧面的对焦模式选择进行了微调，把连续自动对焦和单张自动对焦换了个位置，这是好改进，因为 AF-S 是最常用的模式，以前不小心碰到这个钮可能推到 AF-C 模式上，会额外的耗电：&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/duet-2.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S vs. X100 左侧面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;背面的改动最多：右下角有 “MADE IN JAPAN” 字样；原来的 AF 按钮和 Drive 按钮换了一个位置，现在可以右手单手选择对焦点，Drive 本来就不是随时会用的功能；右下角的 RAW 按钮换成了 Q 按钮，用于显示一个 4x4 的 dashboard 来快速切换常用的各种设定（个性设定、ISO、动态范围、白平衡等 16 个）。后两项都是提高操控性的好改进。&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/x100s/duet-4.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;X100S vs. X100 背面&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;除了上列立刻可以看到的改进，稍微把玩了下发现如下改进也不错：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对焦确实快了很多很多，仅此一项就值得升级。富士这些年在&lt;a href=&#34;http://www.dpreview.com/news/2010/8/5/fujifilmpd&#34;&gt;混合对焦黑科技&lt;/a&gt;上的投资，将以前只有笨重的 DSLR 才有的相位检测自动对焦技术引入到无反光镜的数码相机里，效果显著。&lt;/li&gt;&lt;li&gt;电子取景器（EVF）分辨率和显示效果都有比较明显的提升。&lt;/li&gt;&lt;li&gt;电子取景器为手动对焦模式增加了电子裂像屏，本来已经很酷很好玩的混合取景器又增加了新玩法，效果不错，以后拍摄微距等需要非常精确聚焦的场合可以用。&lt;/li&gt;&lt;li&gt;设定界面进行了不小的调整，以前一些不太合理的地方基本都修正了；增加了开关 Eye-fi 无线传输的选项，可以省不少电。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大致就是这样吧，以后拍了片子再来给大家分享。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>从台湾三星写手门看网络营销的底线</title>
       <link>/posts/bottom-line-of-viral-marketing/</link>
       <pubDate>Sat, 20 Apr 2013 15:18:00 +0800</pubDate>
       
       <guid>/posts/bottom-line-of-viral-marketing/</guid>
       <description>&lt;p&gt;所谓的「台湾三星写手门」，就是前不久被不知名台湾黑客爆出&lt;a href=&#34;http://taiwansamsungleaks.org/&#34;&gt;三星内部邮件&lt;/a&gt;，显示三星在台湾如何雇佣网络水军，运用发布虚假评测、控制论坛舆情等手法抹黑对手（主要是 HTC）抬高自己。此事在台湾掀起了不小的波澜，具体内容可以点击下面的链接查看有人整理好的&lt;a href=&#34;http://home.gamer.com.tw/creationDetail.php?sn=1963795&#34;&gt;懒人包&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;三星不惜重金、不择手段的进行所谓“市场营销”在一定圈子内早已是公开的秘密，只是一般消费者很难完全了解。而这件事里最有趣的问题在于：到底网络（病毒）营销的底线在哪里？每个人都有自己道德和职业准则，我虽然没做过专职的市场营销，但在科技领域创业和工作很多年，下面是我挂一漏万的列表，仅供参考。&lt;/p&gt;&lt;p&gt;首先是正常的、合法也符合一般道德标准的做法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在保持公司主体清晰的前提下雇请公关公司协助或者进行营销策划及实施&lt;/li&gt;&lt;li&gt;通过合法手段搜集民意舆情&lt;/li&gt;&lt;li&gt;邀请或雇请社会名人进行产品广告宣传，并明示为广告&lt;/li&gt;&lt;li&gt;利用热点事件和自身产品的结合进行宣传&lt;/li&gt;&lt;li&gt;针对危机由公司主体出面进行合理、正面的解释及澄清&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;然后是我国普遍存在的灰色地带，个人也较不屑的做法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;雇请水军通过刷版、刷榜、刷票等方式提升产品知名度、打压对手的传播&lt;/li&gt;&lt;li&gt;付费或其他方式要求媒体撤稿&lt;/li&gt;&lt;li&gt;雇请写手编写具有倾向性的产品评测&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后是红灯区，违法与否需要专业判断，但至少是严重不合商业规则和一般道德准则：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;暗中资助公司主体不出现的营销活动，伪装中立第三方观点来提升自己和/或贬低对手&lt;/li&gt;&lt;li&gt;炮制虚假内容或促进传播无根据传闻，达到提升自己和/或贬低对手的目的&lt;/li&gt;&lt;li&gt;在当事人不知情的情况下设计利用热点人物和事件进行商业营销（典型的案例如三星与台湾三太子的事件）&lt;/li&gt;&lt;li&gt;通过欺骗和要挟迫使独立媒体进行倾向于自己的报道（典型案例如 IFA 2012 上三星与几名独立科技博客作者之间的事件）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;p.s. 三星是家非常独特的公司，作为人均 GDP 数倍于我国的发达国家的头号企业，其商业和道德底线大有完胜我国众高段选手的架势，真是令人叹为观止。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;本文原发于微信公众帐号「Paradigm X」，它会围绕科技极客世界的新鲜话题不定期发布原创短评。&lt;br&gt;获得每天更新：请在微信 app 中搜索「Paradigm X」或加 ID：ParadigmX 或扫描以下二维码：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/paradigmx-weixin-qrcode.jpg&#34; width=&#34;128&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;Paradigm X QR Code&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;</description>
     </item>
   
     <item>
       <title>关于数码摄影的预言</title>
       <link>/posts/prophecy-of-digital-photography/</link>
       <pubDate>Wed, 10 Apr 2013 14:03:00 +0800</pubDate>
       
       <guid>/posts/prophecy-of-digital-photography/</guid>
       <description>&lt;p&gt;下面是我对于数码摄影未来的预言，可能会随着时间的推移添加一些内容，但不会修改已经发布的内容。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;胶片在很长的时间里都不会消失，但没有什么力量能扭转其逐渐萎缩的趋势。&lt;/li&gt;&lt;li&gt;反光镜作为胶片时代的特色，将逐步从数码相机中消失，SLR&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 会被 SLT&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;、MIRC&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 或类似系统取代，但传统相机厂商的顽固性会让这个过程很漫长。&lt;/li&gt;&lt;li&gt;大尺寸感光元件&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;将很快成为主流配置，而更小感光元件对应的袖珍数码相机&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;市场份额会被智能手机蚕食，在 5-10 年之后基本消失。&lt;/li&gt;&lt;li&gt;全幅感光元件不再是 SLR 的专利，未来 2 年各类数码相机的顶级型号都将配备全幅感光元件，其价格将加速下降。&lt;/li&gt;&lt;li&gt;未来 2 年中越来越多的数码相机将内置 WiFi 支持，从而实现和智能手机以及其他数字设备之间方便地互操作，SONY 在其 NEX-6 和 5R 中展现的手机遥控拍摄和照片无线上传、同步、播放能力早该普及。&lt;/li&gt;&lt;li&gt;未来 3-5 年中越来越多的数码相机将支持 geotagging，可能借助内置的 GPS 芯片，或者借助与相机配对的智能手机或者其他电子设备。&lt;/li&gt;&lt;li&gt;Android 相机在很长时间里都很难找准定位，不会取得很大成功。&lt;/li&gt;&lt;li&gt;在更长的时间跨度上（比如 10 年），数码摄影会进一步实现专业工具的平民化，无论是高质量的照片集，还是高质量的微电影，借助各种降低它们创作门槛的硬软件工具，都会越来越普及。&lt;/li&gt;&lt;li&gt;数码摄影的创新才刚刚开始，传统摄影技术一边进行着局部渐进式改良，一边也在等待全新创造物的降临，类似 Lytro 的光场（light field）相机这样的技术仅仅是个序幕。&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;&lt;strong&gt;单镜头反光相机（Single-Lens Reflex cameras，SLR）&lt;/strong&gt;：有一个可以升起和放下的反光镜，借助它和五棱镜光学取景器实现一个镜头完成取景和拍摄的双重任务。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;&lt;strong&gt;单镜头半透反光镜相机（Single-Lens Translucent cameras，SLT）&lt;/strong&gt;，有一个固定不动的半透明反光镜，通过电子取景器（EVF）取景，半透明反光镜的作用主要是实现类似 SLR 的相位对焦。这是 SONY 的专利技术，所以此类别目前只包括 SONY 的 Alpha 系列数码相机。和 SLR 相比较小较轻，连拍速度也更快，但是非常耗电。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:3&#34;&gt;&lt;p&gt;&lt;strong&gt;无反光镜可换镜头相机（Mirrorless InterChangeable-lens Camera，MIRC）&lt;/strong&gt;：完全不使用任何反光镜，使用 EVF 取景，可换镜头，比 SLT 更加小巧；由于没有反光镜，通常采用反差对焦方式，自动对焦的精确度、速度和适应度都较差，但富士（Fujifilm）2010 年公布的 F300EXR 数码相机搭载了一种同时支持相位对焦和反差对焦的混合自动对焦系统，由 CCD 芯片和对应的图像处理芯片协作完成，能够在无反光镜的拍摄系统中实现高速的自动对焦，目前已经应用在富士、理光、尼康、佳能的某些机型中。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:4&#34;&gt;&lt;p&gt;&lt;strong&gt;大尺寸感光元件&lt;/strong&gt;：全幅（36x24mm）、APS-C（25.1x16.7mm）、MFT 即 3/4 系统（17.3x13.0mm）。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:5&#34;&gt;&lt;p&gt;&lt;strong&gt;袖珍相机（Compact cameras）&lt;/strong&gt;：所有不可换镜头的数码相机，还可依不同维度细分为大感光元件和小感光元件，全操控和傻瓜式，类 SLR 和卡片式等小类。&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>谈谈“专业化”</title>
       <link>/posts/talk-about-pro/</link>
       <pubDate>Mon, 08 Apr 2013 23:17:00 +0800</pubDate>
       
       <guid>/posts/talk-about-pro/</guid>
       <description>&lt;p&gt;这个话题源自老罗（罗永浩）和他的团队基于 Android 开发的 Smartisan OS 软件，或者说来自一位朋友在微博和 Twitter 上对其 3 月 27 日发布会的评论（收到了相当猛烈的反应呢）：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;来说下为什么我今天这么用力吐槽老“锤子”。我觉得“锤子”关注者一大批是希望看到一个外行来抽专业人士的耳光的心态而支持老罗的，这种“不尊重专业”的态度是这个民族自本国沦陷以来一直没有改掉的陋习。我并不觉得这样的风气应该继续提倡，而好在今天没有让我失望，专业的事情还是交给专业的人做吧。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;&lt;a href=&#34;https://twitter.com/GossipSama/status/316920394110103552&#34;&gt;Tweet&lt;/a&gt; from @GossipSama&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;转天虎嗅网发了一篇题为“&lt;a href=&#34;http://www.huxiu.com/article/12124/1.html&#34;&gt;锤子现场速写：他不贱，只是矫情&lt;/a&gt;”的文章，里面提到了另外一个很有意思的概念“对技术的敬畏”：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;老罗在谈到对语音功能的看法时，让笔者史无前例的第一次开始怀疑老罗对技术的理解。尽管老罗敢招七个人就做手机 OS（谁说七个人就做不出来？），尽管老罗之前是教英语的（他说自己之前也卖过电脑，算 IT 人）。但是老罗认为，像 Siri 这样的语音交互产品，作为“人工小秘书”来讲，“从根本上就错了”，“人工智能不可能达到那种程度”。&lt;/p&gt;&lt;p&gt;先不说 Siri 是否就是一个“人工小秘书”，活在科技时代的人或许应该有一个共识，那就是永远对技术的未来充满敬畏。你永远不知道明天会发生什么，永远不要对科技盖棺定论，老罗推崇的乔布斯也不会这样做。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;虎嗅网 &lt;a href=&#34;http://www.huxiu.com/article/12124/1.html&#34;&gt;锤子现场速写：他不贱，只是矫情&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;“专业的事交给专业的人去做”以及“对技术的未来保持敬畏”其实是一脉相承的观念，都是我非常认同的，但我也深知它们都是很容易被误读或者误解的观点，值得跳出 140 个字的框框多写点东西。&lt;/p&gt;&lt;p&gt;首先我们来看看，什么是叫专业化。在维基百科英文版上有 &lt;a href=&#34;http://en.wikipedia.org/wiki/Professionalization&#34;&gt;Professionalization&lt;/a&gt; 这一词条（中文版尚无），第一段解释本身就不短，而且里面还有多达 8 个脚注以及 9 个转向其他词条的链接，说明这并不是一个易于定义的基本概念。我们来把它稍微简化和分解一下，经过思考可以得到以下的认识：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;专业化是逐步区分开“专业”和“业余”的一个过程，而“专业”和“业余”的主要差别是在特定领域投入的时间和专注度，这是一个量的积累差异而非质的差异。&lt;/li&gt;&lt;li&gt;专业化是一个社会化过程，有时候专业和业余之间并没有非常清晰的界限，这就好比围棋里业余高段选手棋力大致和职业初段相当，具体界限的划分需要依靠领域内建立的一套民主机制来定义，同样类比围棋的话，就是确定段位等级的一套办法。&lt;/li&gt;&lt;li&gt;专业是针对特定领域的，越专就越难广博，一个领域的专业人士可能对其他领域一无所知，就像夏洛克・福尔摩斯不知道地球围着太阳转；另一方面，某些领域比较为大众所关注，而另一些领域未必，这决定了同样付出的前提下，有些专业人士会比其他的专业人士更引入瞩目。&lt;/li&gt;&lt;li&gt;专业化是和知识以及技能体系密不可分的，不同领域的知识和技能积累程度不同，专业化程度也是很不一样的。一般来说，越是成熟、历史悠久的领域，积累的知识和技能越是深入，往往细分为多个分支，其专业化程度也就越高。&lt;/li&gt;&lt;li&gt;某个领域的知识和技能演进到一定程度，其专业门槛又会表现出某种下降趋势，其根本原因是位于领域金字塔顶端的专业人士开始把知识和技能封装成工具和流程，使得不具备很高专业水准的人可以借助这些工具和流程完成原本需要更高专业水准才能完成的工作。这实际上是专业化的进一步发展，也是以分工协同为特征的社会化大生产的基石；另一方面，金字塔顶端的专业人士也不断提升领域的教育能力，用更有效的教育来培养更多的各级专业人士。这是所有领域的发展规律，如果无法建立这样的正向循环，这个领域只会慢慢衰亡。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在这些认识的基础上，我们可以理解，为什么在消费电子和智能手机这样既年轻又大众化的领域，会出现格外热烈的种种争论：本身很新并且融合了很多不同领域（也就是说，对里面某个领域多少有些接触了解的人多得很），同时又是大多数人亲身体验和接触的东西（没吃过猪肉还没见过猪跑？）。这里面误解很多，我们下面就列举一些最典型的。&lt;/p&gt;&lt;h3 id=&#34;误解一职业即专业&#34;&gt;误解一：“职业即专业”&lt;/h3&gt;&lt;p&gt;专业不等于职业，虽然大多数领域里不作为职业的专业人士比较少见，但是确实也存在，比如在美国就有过例子，一位家庭主妇闲来无事花费数年钻研二维堆叠问题，取得的一些成果是职业数学家都未曾得到的；职业也不等于专业，比如以程序员为终生职业的人多如牛毛，但多数最多只能算入门，离这个领域的专业要求相去甚远。&lt;a href=&#34;https://twitter.com/GossipSama&#34;&gt;@GossipSama&lt;/a&gt; 有一则推生动的说明了这个差异：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;专业不是专科，而是对一个领域经年的不断投入、学习、总结、自我检讨、自我改进。其中，时间成本就很重要，这个世界有天才，但是依然有很多东西需要时间的投入去历练。就像以前的生煎包好吃是因为以前的师傅 20 年 30 年一直在做生煎包，而现在的生煎包师傅可能做了几年就转行了。&lt;/p&gt;&lt;p&gt;&amp;ndash; &lt;em&gt;&lt;a href=&#34;https://twitter.com/GossipSama/status/316924908124897280&#34;&gt;Tweet&lt;/a&gt; from @GossipSama&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;计算机这个领域目前还在很幼年的阶段，发展演变迅速，知识和技能的累积很快，但归纳和体系化是滞后的，使得学习成长不得不依靠大量实践和前辈的言传身教，悟性和投入时间缺一不可，悟性差点，有好的带头人和足够的时间投入还可以弥补，而没有投入足够时间的团队（包括他们在加入这个团队之前的积累）基本很难成事&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。如果不信的话可以自己设想一下下面这个问题，一个没有相关经验的团队要花多少时间建立一个靠谱的解决方案：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;一个 Android ROM 或者 launcher 或者随便什么 app 要支持多种机型，在发布之前应该在所有自己声称支持的机型上进行测试，这包含了多个小团队开发的多个软件组件，他们之间有依赖关系，某个组件更新需要对所有受到影响的部分重复已经做过的所有测试，测试在多个设备上进行，如何自动化这些测试来提高效率？如何根据测试结果协调各个小组的进度面向一致的目标里程碑进行工作？&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对了，这类问题一点也不特殊，在软件开发过程中遍地都是，愁得老板们最后只好认输，把没有经过完整测试的软件扔出去然后把头埋进沙子里假装听不见用户的吐槽——我相信砸过西门子冰箱的老罗一定不齿于这么干。&lt;/p&gt;&lt;h3 id=&#34;误解二专业无用&#34;&gt;误解二：“专业无用”&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;“专业有什么了不起的，王侯将相宁有种乎！”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;别笑，这是真有人在新浪微博回应本文开头的评论的话。历史上最早说“王侯将相宁有种乎”的人的本意，除了朴素的“人人生而平等”的民主观外，还蕴含着一种“我经过努力可以做和你一样的事，而且比你做的更好”的雄心和自信，如果这件事不需要长时间的学习、思考、训练和积累的话，雄心、自信加上天赋基本可以解决问题——那时候适逢末世，王侯将相们倒也确实不需要什么特殊技能和知识。治国事大，我说不上来什么规律，但具体到智能手机这件事，一般我们会将其生态环境（其实整个计算机行业都类似）划分为四层：核心硬件、平台（操作系统+开发环境+应用商店）、系统集成、软件及服务，这个行业的历史和规律告诉我们：这里面前两层都需要相对很长时间的积累才能跨过门槛，然后还需要绝佳的时机和运气才能建立竞争优势；系统集成包括将核心硬件组合成消费者产品，以及对标准软硬件的适配和定制，门槛相对稍低；软件和服务的范围很广，差异很大，有的非常难做好，有的相对容易很多，就不展开说了。&lt;/p&gt;&lt;p&gt;那么我们来看看老罗和他的团队做的这个东西算什么。其官方称之为“Smartisan OS based on Android”，似乎是定位为基于 Android 源代码改的操作系统，实际上根据发布会披露的信息，目前阶段还完全没有碰到操作系统和软硬件集成的部分，所有功能都通过上层软件的修改即可实现，也就是大家习惯说的“第三方 launcher”，基本上算整个生态环境里技术门槛最低的环节之一，也就是说老罗选了一个并非不可能的任务——但是（这个但是可要用力的说出来），这仍不简单，原因如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;手机和传统的桌面计算机不一样，涉众更广，用户涵盖了知识背景完全不同的人群，其中很多人完全没有使用计算机和互联网的经验和常识。&lt;/li&gt;&lt;li&gt;目前智能手机市场基本没有超出 Apple 在 2007 年规划的格局，而这是一家以用户集成体验为主要卖点的公司。&lt;/li&gt;&lt;li&gt;Android 系统里 launcher 作为交互入口是用户体验里很关键的环节，既要避开系统本身固有的各种问题（比如操作系统和各种硬件的适配问题），有时还要替设计不佳的 app 的错误买单。&lt;/li&gt;&lt;li&gt;Android 市场现状和第三方 launcher 的特点决定了其（几乎）唯一有效的推广渠道就是预装（和硬件集成厂商以及运营商合作），而这是一个初始成本要求较高的渠道。&lt;/li&gt;&lt;li&gt;第三方 launcher 并非创新，而是已经充分竞争的领域，现在进入需要有非常大的差异化才有可能建立市场口碑，进而降低推广成本，而这些差异化可能必须从不那么容易实现的细分领域入手。老罗半开玩笑的说被 MIUI 当初六个人的团队规模误导，不知道他是不是明白，这就是进入时机的差异导致的必然。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除了这些市场上的、非常难改变的客观环境以外，做 launcher 的门槛是拼用户体验，而拼用户体验本质上是拼用户数量和对用户的了解，这里有个小例子可能有助理解：MIUI 新版有个很有意思的小功能，给联系人里没有设置头像的人根据 TA 的姓名，取最后一个字作为头像，如果最后一个字是“哥”“姐”“叔”之类的，则会用其前面一个字。这不是什么了不起的创新，但为什么这么晚才加入到功能集里呢？因为这是很细分的用户需求，能想到就不易，我想这和 MIUI 的用户积累应该是有很大关系的，而一个新进入市场的 player 能一开始就在这种层面和诸如 MIUI 这样的用户积累竞争吗？我个人是非常怀疑的，并不是不可能竞争，而是必须要付出数倍的投入和努力才可以，人家也不会坐在那里等你嘛。&lt;/p&gt;&lt;p&gt;除了用户体验，还有技术问题。时时听到有人说：“技术不是问题”，这就好比说“凡是钱能解决的都不是问题”，这话在且仅在钱足够多的情况下才成立，而技术问题也仅在团队技术能力达标的前提下才不是问题，在智能手机这个领域，这个技术能力的标杆可以用 CyanogenMod 和 MIUI 的团队来衡量，国内能达到这标杆水准的团队一只手就能数完。&lt;/p&gt;&lt;h3 id=&#34;误解三专家砖家吧&#34;&gt;误解三：“专家？砖家吧”&lt;/h3&gt;&lt;p&gt;其实我是在大专院校里长大的，非常了解国内科技领域的专业人士是怎么一代一代的沦落到现在这境地的，几十年缺乏创新的学术环境也难怪大家失去了“对技术的敬畏”。但我始终是个（谨慎的）乐观主义者，相信只要时间足够长，每个人都会明白那些短视的、自私的行为是于人于己有害的，慢慢回到一个比较健康的环境来，其实也不复杂，就是每个人在自己认为自己比较专业的领域多较真，肯花点时间去传播自己认为正确的观点认识，愿意与人在逻辑的基础上讨论和争论，就行了。&lt;/p&gt;&lt;p&gt;另外，凡事都有两面，除了一些被利益驱动为金钱背书的恶劣行径，很多被民众嘲讽的“砖家言论”从某种角度看还是有其来由的，只不过在对应的具体问题上显得脱离实际罢了&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，这在全世界都并不鲜见，对这些有问题的认知，应该基于科学方法来进行驳斥，即基于事实证据、可重复试验以及形式逻辑体系，有针对性的提出异见。专业人士会有胡说八道的时候，但这并不是否定所有专业判断的理由，如果据此来决定自己的判断，岂不是陷入了另一种对专家的盲信？&lt;/p&gt;&lt;p&gt;另外，前面也提到了计算机这个领域目前还处在幼年期，是半理论半实践的状态，理论还在追赶实践的步伐，这个领域真正的专业人士不太容易犯脱离实际的错误，只是近年这个领域也出现了不少江湖骗子（包括一些内心强大到连自己也骗倒的），如何识别他们是个挑战。&lt;/p&gt;&lt;h3 id=&#34;误解四站在巨人的肩膀上&#34;&gt;误解四：“站在巨人的肩膀上”&lt;/h3&gt;&lt;p&gt;很多流行语都有这个意味，比如“弯道超车”，颇有大跃进时期赶英超美的气势。这样的事情并非完全不可能，但一切要回到“客观规律”的分析上来。站在巨人的肩膀上确实可以前进的更快，但这程度远不如人们想象的那么显著。目前的智能手机领域，巨人们提供了这样一些肩膀：iPhone 和 iOS 建立的移动应用模式，开源的 Android 操作系统，智能手机高速发展的市场趋势，一大批成长中的相关人才，问题是爬上这些肩膀并站稳并不是那么简单的事情。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;也许能模仿 iPhone 的设计，但对很多设计细节并不知道为什么要这么设计，也不知道在最后呈现出这些设计之前 Apple 内部毙掉了多少其他方案以及为什么&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，要搞明白这一切，时间是要付出的必要成本，Google 和 Microsoft 的团队都能告诉你那时间也没比 Apple 少花多少。&lt;/li&gt;&lt;li&gt;通用操作系统是软件系统里复杂度最高的几个类别之一，iOS 也好，Android 和 WP 也好，都不是什么久经考验坚若磐石的软件系统（当然他们确实借助了某些久经考验坚若磐石的基础软件代码），他们都在快速的迭代和改进中，里面的技术陷阱多到令人发指的程度，在省下自己编写基础框架的工作量同时，也带来持续学习和摸索的工作量，即使在今天惊人的互联网节奏下，也不是几个月就能趟过的浅滩。&lt;/li&gt;&lt;li&gt;各种专利保护为简单复制增加了很多成本，而用户的个性化需求也不鼓励雷同。&lt;/li&gt;&lt;li&gt;快速发展的市场吸引了全球所有第一流的公司以巨大的投入参与进来，市场成本和风险对小的创业者来说都不可小视。&lt;/li&gt;&lt;li&gt;和几年前相比，智能手机相关的硬软件工程人员、产品设计人员等都有大幅增加，但和人才市场的需求相比，仍然处在供不应求的状态，尤其是经验丰富、具备管理、产品和技术交叉技能的良才，市场价格仍在攀升，这个竞争带来的成本压力不亚于市场上的产品竞争，不幸的是，到目前为止，老罗的团队里并没有这些领域的一流人才。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;再说一次：做智能机比以前容易多了，但仍然是有相当门槛的，尤其当你面对的是 Apple、Google、Samsung、华为、魅族这样一些各怀绝技的对手时；做 ROM 或者 launcher，MIUI、FlyOS 和 Go 也都不简单。客观的说，老罗有些创意是不错的，至少是有个性有想法，也有市场的，但团队必须具有不亚于这些对手的综合实力才能把创意变成用户满意的体验。好好花时间建立和磨练好团队，做好持久战的准备，才是这个领域的成功之道。&lt;/p&gt;&lt;h3 id=&#34;番外预言&#34;&gt;番外：预言&lt;/h3&gt;&lt;p&gt;有朋友看了初稿之后预言说：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;很多人看完第一句之后，他们最想知道的答案是你到底是罗粉还是罗黑，然后，他们就会直接拉到最后一段，结果看完还是没明白…于是就条件反射的按照自己看完的直觉理解一下，结果一半人在评论里面骂你罗粉，另外一半人在评论里面骂你罗黑……&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;特补充立次为证 -_-&lt;/p&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;所以专业化的团队特别值钱，而有积累的重复创业团队比较容易得到投资人的信任，这也是重要原因之一。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;即使孔乙己卖弄的“茴”字的四种写法，在某些领域也不完全是无用的知识。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:3&#34;&gt;&lt;p&gt;这其实就是臭名昭著的“像素级克隆”模式的理论依据：如果不完美的克隆每个像素，哪怕稍微改动一点也许就正好是个失败方案（笑）。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>译文：函数式编程另类指南</title>
       <link>/posts/functional-programming-for-the-rest-of-us/</link>
       <pubDate>Wed, 06 Mar 2013 22:02:00 +0800</pubDate>
       
       <guid>/posts/functional-programming-for-the-rest-of-us/</guid>
       <description>&lt;p&gt;&lt;em&gt;Functional Programming For The Rest of Us&lt;/em&gt; 是一篇很特别的函数式编程入门简介，它用 Java 的语法清晰的说明了函数式编程中最难解的一组概念，可能对很多人越过学习 FP 初期的峭壁会有不小的帮助。原文由当时在 Stony Brook 大学念 CS 的博士生 Slava Akhmechet（此人是分布式 JSON 数据库 &lt;a href=&#34;http://www.rethinkdb.com&#34;&gt;RethinkDB&lt;/a&gt; 的发起人和开发者之一）写于 2006 年，早先国内有 &lt;a href=&#34;https://twitter.com/lihaitao&#34;&gt;@lihaitao&lt;/a&gt; 很不错的译文，可惜原译文链接已失效，各处的转载都有各种质量缺陷，所以我整理并修订了原译文的一些错误并转载于此，作为归档和更好传播之用。在此对原文作者和译者致以真诚谢意。&lt;/p&gt;&lt;p&gt;原文：&lt;a href=&#34;http://www.defmacro.org/ramblings/fp.html&#34;&gt;Functional Programming For The Rest of Us&lt;/a&gt;&lt;br&gt;作者：Slava Akhmechet&lt;br&gt;原译：&lt;a href=&#34;http://chn.blogbeta.com/232.html&#34;&gt;函数式编程另类指南&lt;/a&gt;&lt;br&gt;译者：&lt;a href=&#34;mailto:lihaitao@gmail.com&#34;&gt;lihaitao&lt;/a&gt;&lt;br&gt;修订：Neo Lee a.k.a @soulhacker&lt;/p&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&lt;p&gt;程序员拖沓成性，每天到了办公室后，泡咖啡、检查邮箱、阅读 RSS feed、到技术站点查阅最新的文章、在编程论坛的相关版面浏览公共讨论，并一次次地刷新以免漏掉一条信息。然后是午饭，回来后盯了 IDE 没几分钟，就再次检查邮箱、倒咖啡。最后在不知不觉中，结束了一天。&lt;/p&gt;&lt;p&gt;不平凡的事是每隔一段时间会跳出一些很有挑战性的文章。如果没错，这些天你至少发现了一篇这类文章——很难快速通读它们，于是就将其束之高阁，直到突然你发现自己已经有了一个长长的链接列表和一个装满了 PDF 文件的目录，然后你梦想着到一个人迹罕至的森林里的小木屋苦读一年以期赶上，要是每天清晨你沿着那里的林中小溪散步时会有人带来食物和带走垃圾就更好了。&lt;/p&gt;&lt;p&gt;虽然我对你的列表一无所知，但我的列表却是一大堆关于函数式编程的文章，而这些基本上是最难阅读的了。它们用枯燥的学院派语言写成，即使&amp;quot;在华尔街浸淫十年的计算专家（veterans）&amp;ldquo;也不能理解函数式编程（也写作 FP）都在探讨些什么。如果你去问花旗集团（Citi Group）或德意志银行（Deutsche Bank）的项目经理&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，为什么选择了 JMS 而不是 Erlang，他们可能回答不能在产业级的应用中使用学院派语言。问题是，一些最为复杂、有着最严格需求的系统却是用函数式编程元素写成的。这种说法不能让人信服。&lt;/p&gt;&lt;p&gt;的确，关于函数式编程的文章和论文难于理解，但他们本来不必这么晦涩。这一知识隔阂的形成完全是历史原因。函数式编程的概念本身并不困难。这篇文章可以作为&amp;quot;简易的函数式编程导引&amp;rdquo;。是一座从命令式（imperative）思维模式到函数式编程的桥梁。去取杯咖啡回来继续读下去吧，不定啥时候你的同事就会开始取笑你对函数式编程发表的观点了。&lt;/p&gt;&lt;p&gt;那么什么是函数式编程呢？它怎么产生？它可以被掌握吗（Is it edible）？如果它真如其倡导者所言，为什么没有在行业中得到更广泛的使用？为什么好像只有那些拿着博士学位的人才使用它？最要紧的是，为什么它就[哔]这么难学？这些 closure、continuation、currying、lazy evaluation 和 side effects 等等究竟是些什么东西？没有大学参与的项目怎么使用它？相比命令式思想友好、圣洁和亲近的一切的一切，为什么它看上去这么诡异？我们将于不久扫清这些疑问。首先让我来解释形成实际生活和学界文章之间巨大隔阂的缘起，简单得像一次公园的散步。&lt;/p&gt;&lt;h2 id=&#34;信步游园&#34;&gt;信步游园&lt;/h2&gt;&lt;p&gt;启动时间机器，我们漫步在两千多年以前一个被遗忘了太久的春光明媚的日子，那是公元前 380 年。雅典城墙外的橄榄树荫里，柏拉图和一个英俊的奴隶小男孩朝着学院走去。&amp;ldquo;天气真好&amp;rdquo;，&amp;ldquo;饮食不错&amp;rdquo;，然后话题开始转向哲思。&lt;/p&gt;&lt;p&gt;&amp;ldquo;瞧那两个学生，&amp;ldquo;为了使问题更容易理解，柏拉图仔细地挑选着用词，&amp;ldquo;你认为谁更高呢？&amp;rdquo;&lt;br&gt;小男孩看着那两个人站着的水漕说，&amp;ldquo;他们差不多一样高&amp;rdquo;。&lt;br&gt;柏拉图说：&amp;ldquo;你的差不多一样是什么意思？&amp;rdquo; &amp;ldquo;我在这里看他们是一样高的，不过我肯定如果走近些就会看出他们高度的差别。&amp;rdquo;&lt;br&gt;柏拉图笑了，他正把这个孩子带到正确的方向。&amp;ldquo;那么你是说，我们这个世界没有完全的等同了？&amp;rdquo;&lt;br&gt;小男孩想了一会儿回答，&amp;ldquo;对，我不这样认为，任何事物总有一些区别，即使我们看不到它。&amp;rdquo;&lt;br&gt;这句话非常到位！&amp;ldquo;那么如果这世上没有完全的相等，你又是如何理解‘完全’相等这个概念的呢？&amp;rdquo;&lt;br&gt;小男孩迷惑得说：&amp;ldquo;我不知道。&amp;rdquo;&lt;br&gt;最初尝试着理解数学的本源（nature）时也会产生这种疑惑。&lt;/p&gt;&lt;p&gt;柏拉图暗示这个世上的万物都只是一个对完美的近似。他还认识到我们即使没有接触到完美但依然可以理解这一概念。所以他得出结论，完美的数学形式只能存在于另一个世界，我们通过和那个世界的某种联系在一定程度上知晓他们。很明显我们不能看到完美的圆，但我们可以理解什么是完美的圆并用数学公式将它表达出来。那么，什么是数学？为什么宇宙可以用数学定理描述？数学可以描述宇宙中的所有现象吗？&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Philosophy_of_mathematics&#34;&gt;数学哲学&lt;/a&gt;是一个很复杂的课题。像大多数哲学学科一样它更倾向于提出问题而不是给出解答。这些意见中很多都循回绕转于一个事实，即数学实际上是一个谜语：我们设置了一系列基本的、不冲突的原理和一些可以施加于这些原理的操作规则，然后我们就能堆砌这些规则以形成更复杂的规则。数学家把这种方法叫做&amp;quot;形式系统&amp;quot;或&amp;quot;演算&amp;rdquo;。如果愿意，我们可以很快写出一个关于 Tetris（译者注：经典的俄罗斯方块游戏）的形式系统。实际上，工作中的 Tetris 实现就是一个形式系统，只是被指定使用了个不常见的表现形式。&lt;/p&gt;&lt;p&gt;人马座 α 星的某个生物文明也许不能理解我们的 Tetris 和圆的范式，因为可能他们唯一能感知输入的是带有嗅觉的某个器官。他们也许永远不会发现 Tetris 范式，但很可能会有一个圆的范式，我们很可能无法阅读它，因为我们的嗅觉没有那么复杂，可是一旦我们理解了（past）这一范式的表示形式（通过这种传感器和标准解码技术来理解这种语言），其底层的概念就可被任何智能文明所理解。&lt;/p&gt;&lt;p&gt;有趣的是如果从来没有智能文明存在，Tetris 和圆的范式仍然严密合理，只是没有人注定将会发现他们。如果产生了一种智能文明，他就会发现一些形式系统来帮助描述宇宙的规律。但他还是不大可能发现 Tetris 因为宇宙中再没有和它相似的事物。在现实世界中这类无用的形式系统或迷题的例子数不胜数，Tetris 只是其中的一个典型。我们甚至不能确定自然数是否是对客观世界的完全近似，比如我们可以简单的设想一个很大的数，它不能用来描述我们的宇宙中任何东西，因为它（足够大）但又不是无穷大。&lt;/p&gt;&lt;h2 id=&#34;历史一瞥&#34;&gt;历史一瞥&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&lt;p&gt;再次启动时间机器，这一次的旅行近了很多，我们回到 1930 年代。大萧条正在蹂躏着这个半新不旧的时代。空前的经济下挫影响着几乎所有阶层的家庭生活，只有少数人还能够保持着饥谨危机前的安逸。一些人就如此幸运地位列其中，我们关心的是普林斯顿大学的数学家们。&lt;/p&gt;&lt;p&gt;采用了歌特式风格设计建造的新办公室给普林斯顿罩上天堂般的幸福光环，来自世界各地的逻辑学家被邀请到普林斯顿建设一个新的学部。虽然彼时的美国民众已很难弄到一餐面包，普林斯顿的条件则是可以在高高的穹顶下，精致雕凿的木质墙饰边上整日的品茶讨论或款款漫步于楼外的林荫之中。&lt;/p&gt;&lt;p&gt;阿隆佐·丘奇就是一个在这种近于奢侈的环境中生活着的数学家。他在普林斯顿获得本科学位后被邀留在研究生院继续攻读。阿隆佐认为那里的建筑实属浮华，所以他很少一边喝茶一边与人讨论数学，他也不喜欢到林中散步。阿隆佐是一个孤独者：因为只有一个人时他才能以最高的效率工作。虽然如此，他仍与一些普林斯顿人保持着定期联系，其中包括阿伦·图灵、约翰·冯·诺依曼和库尔特·哥德尔。&lt;/p&gt;&lt;p&gt;这四个人都对形式系统很感兴趣，而不太留意现实世界，以便致力于解决抽象的数学难题。他们的难题有些共同之处：都是探索关于计算的问题。如果我们有了无限计算能力的机器，哪些问题可以被解决？我们可以使他们自动地得以解决吗？是否还是有些问题无法解决？为什么？不同设计的各种机器是否具有相同的计算能力？&lt;/p&gt;&lt;p&gt;通过和其它人的合作，阿隆佐·丘奇提出了一个被称为 λ 演算（lambda calculus）的形式系统。这个系统本质上是一种虚拟的机器的编程语言，他的基础是一些以函数为参数和返回值的函数。函数用希腊字母 λ 标识，这个形式系统因此得名&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。利用这一形式系统，阿隆佐就可以对上述诸多问题推理并给出结论性的答案。&lt;/p&gt;&lt;p&gt;独立于阿隆佐，阿伦·图灵也在进行着相似的工作，他提出了一个不同的形式系统（现在被称为图灵机），并使用这一系统独立地给出了和阿隆佐相似的结论。后来人们证明图灵机和 λ 演算能力等同。&lt;/p&gt;&lt;p&gt;如果第二次世界大战没有在那时打响，我们的故事本可以到此结束，我会就此歇笔，而你也将浏览到下一个页面。彼时整个世界笼罩在战争的火光和硝烟之中，美国陆军和海军前所未有的大量使用炮弹，为了改进炮弹的精确度，部队组织了大批的科学家持续地计算微分方程以解出弹道发射轨迹。在渐渐意识到这个任务用人力手工完成太耗精力后，人们开始着手开发各种设备来攻克这个难关。第一个解出了弹道轨迹的机器是 IBM 制造的 Mark I，它重达 5 吨，有 75 万个组件，每秒可以完成三次操作。&lt;/p&gt;&lt;p&gt;竞争当然没有就此结束，1949 年，EDVAC（Electronic Discrete Variable Automatic Computer，爱达瓦克）推出并获得了极大的成功。这是对冯·诺依曼架构的第一个实践实例，实际上也是图灵机的第一个现实实现。那一年开始好运与阿隆佐·丘奇无缘。&lt;/p&gt;&lt;p&gt;直到 1950 年代将尽，一位 MIT 的教授 John McCarthy（也是普林斯顿毕业生）对阿隆佐·丘奇的工作产生了兴趣。1958年，他公开了表处理语言 Lisp。Lisp 是对阿隆佐·丘奇的 λ 演算系统的实现，但同时它工作在冯·诺依曼计算机上！很多计算机科学家认识到了 Lisp 的表达能力。1973 年，MIT 人工智能实验室的一组程序员开发了被称为 Lisp 机器的硬件－阿隆佐 λ 演算的硬件实现！&lt;/p&gt;&lt;h2 id=&#34;函数式编程&#34;&gt;函数式编程&lt;/h2&gt;&lt;p&gt;函数式编程是对阿隆佐·丘奇理论的实践应用。但也并非全部 λ 演算都被应用到了实践中，因为 λ 演算不是被设计为在物理局限下工作的。因此，象面向对象的编程一样，函数式编程是一系列理念，而不是严格的教条。现在有很多种函数式编程语言，他们中的大多数以不同方式完成不同任务。在本文中我将就最广泛使用的源自函数式编程的思想作一解释，并将用 Java 语言举例（是的，你完全可以用 Java 写出函数式程序，如果你有显著的受虐倾向）。在下面的小节中，我将会把 Java 作为一种函数式语言，并对其稍加修改使它成为一种可用的函数式语言。现在开始吧。&lt;/p&gt;&lt;p&gt;λ 演算被设计用来探询关于计算的问题，所以函数式编程主要处理计算，并用 &lt;em&gt;函数&lt;/em&gt; 来完成这一过程。函数是函数式编程的基本单位，函数几乎被用于一切，包括最简单的计算，甚至变量都由计算取代。在函数式编程中，变量只是表达式的别名（这样我们就不必把所有东西打在一行里）。变量是不能更改的，所有变量只能被赋值一次。用 Java 的术语来说，这意味着所有单一变量都被声明为 final（或 C++ 的 const）。在函数式编程中没有非 final 的变量。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为函数式编程中所有变量都是 final 的，所以可以提出这样两个有趣的表述：没有必要总是写出关键字 final，没有必要把变量再称为变量。于是现在我们对 Java 作出两个修改：在我们的函数式 Java 中所有变量默认都是 final 的，我们将变量（variable）称为符号（symbol）。&lt;/p&gt;&lt;p&gt;你也许会质疑，用我们新创造的语言还能写出有些复杂度的程序吗？如果每个符号都是不可变更(non-mutable)的，那么就无法改变任何状态！其实事实并非完全如此。在阿隆佐研究其 λ 演算时，他并不想将某个状态维护一段时间以期未来对其进行修改。他关注的是对数据的操作（也通常被称为&amp;quot;演算体 caculating stuff&amp;rdquo;）。既然已经证明 λ 演算与图灵机等价，它可以完成所有命令式编程语言能够完成的任务。那么，我们怎么才能做到呢？&lt;/p&gt;&lt;p&gt;答案是函数式程序能保存状态，只是它并非通过变量而是使用函数来保存状态。状态保存在函数的参数中，保存在堆栈上。如果你要保存某个状态一段时间并时不时地对其进行一些修改，可以写个递归函数。举个例子，我们写个函数来翻转 Java 的字符串。记住，我们声明的每个变量默认都是 final 的&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个函数很慢，因为它不断地调用自己&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;，它还是个嗜内存魔，因为要持续分配对象。不过它的确是在用函数式风格。你可能会问，怎么有人会这样写程序？好的，我这就慢慢讲来。&lt;/p&gt;&lt;h2 id=&#34;函数式编程的优点&#34;&gt;函数式编程的优点&lt;/h2&gt;&lt;p&gt;你可能会认为我根本无法对上面那个畸形的函数给出个合理的解释。我开始学习函数式编程时就是这么认为的。不过我是错了。有很好的理由使用这种风格，当然其中一些属主观因素。例如，函数式程序被认为更容易阅读。因为连街上乱跑的娃娃都知道，是否容易理解是个见仁见智的判断，所以我将略去这些主观方面的理由。幸运的是，还有很多的客观理由。&lt;/p&gt;&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;&lt;p&gt;因为函数式编程的每一个符号都是 final 的，没有函数产生过副作用。因为从未在某个地方修改过值，也没有函数修改过在其作用域之外的量并被其他函数使用（如类成员或全局变量）。这意味着函数求值的结果只是其返回值，而惟一影响其返回值的就是函数的参数。&lt;/p&gt;&lt;p&gt;这是单元测试者的梦中仙境（wet dream）。对被测试程序中的每个函数，你只需在意其参数，而不必考虑函数调用顺序，不用谨慎地设置外部状态。所有要做的就是传递代表了边际情况的参数。如果程序中的每个函数都通过了单元测试，你就对这个软件的质量有了相当的自信。而命令式编程就不能这样乐观了，在 Java 或 C++ 中只检查函数的返回值还不够——我们还必须验证这个函数可能修改了的外部状态。&lt;/p&gt;&lt;h3 id=&#34;调试&#34;&gt;调试&lt;/h3&gt;&lt;p&gt;如果一个函数式程序不如你期望地运行，调试也是轻而易举。因为函数式程序的 bug 不依赖于执行前与其无关的代码路径，你遇到的问题就总是可以再现。在命令式程序中，bug 时隐时现，因为在那里函数的功能依赖与其他函数的副作用，你可能会在和 bug 产生无关的方向探寻很久，毫无收获。函数式程序就不是这样——如果一个函数的结果是错误的，那么无论之前你还执行过什么，这个函数总是返回相同的错误结果。&lt;/p&gt;&lt;p&gt;一旦你将那个问题再现出来，寻其根源将毫不费力，甚至会让你开心。中断那个程序的执行然后检查调用栈，和命令式编程一样，栈里每一次函数调用的参数都呈现在你眼前。但是在命令式程序中只有这些参数还不够，函数还依赖于成员变量，全局变量和其他类的状态（它们也依赖着同样多的其他东西）。函数式程序里函数只依赖于它的参数，而那些信息就在你注视的目光下！还有，在命令式程序里，只检查一个函数的返回值不能够让你确信这个函数已经正常工作了，你还要去查看那个函数作用域外数十个对象的状态来确认。对函数式程序，你要做的所有事就是查看其返回值！&lt;/p&gt;&lt;p&gt;沿着堆栈检查函数的参数和返回值，只要发现一个不尽合理的结果就进入那个函数然后一步步跟踪下去，重复这一个过程，直到它让你发现了 bug 的生成点。&lt;/p&gt;&lt;h3 id=&#34;并行&#34;&gt;并行&lt;/h3&gt;&lt;p&gt;函数式程序无需任何修改即可并行执行。不用担心死锁和临界区，因为你从未用锁！函数式程序里没有任何数据被同一线程修改两次，更不用说两个不同的线程了。这意味着可以不假思索地简单增加线程而不会引发折磨着并行应用程序的传统问题。&lt;/p&gt;&lt;p&gt;事实既然如此，为什么并不是所有人都在需要高度并行作业的应用中采用函数式程序？嗯，他们正在这样做。爱立信公司设计了一种叫作 &lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt; 的函数式语言并将它使用在需要极高抗错性和可扩展性的电信交换机上。还有很多人也发现了 Erlang 的优势并&lt;a href=&#34;http://www.erlang.org/faq/faq.html#AEN50&#34;&gt;开始使用它&lt;/a&gt;。我们谈论的是电信通信控制系统，这与设计华尔街的典型系统相比对可靠性和可升级性要求高得多。实际上，Erlang 系统并不是&amp;quot;可伸缩&amp;quot;和&amp;quot;可靠&amp;quot;——Java 系统才是——Erlang 系统是&amp;quot;坚如磐石&amp;quot;。&lt;/p&gt;&lt;p&gt;关于并行的故事还没有就此停止，即使你的程序本身就是单线程的，那么函数式程序的编译器仍然可以优化它使其运行于多个 CPU 上。请看下面这段代码：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somewhatLongOperation1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somewhatLongOperation2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在函数编程语言中，编译器会分析代码，辨认出潜在耗时的创建字符串 s1 和 s2 的函数，然后并行地运行它们。这在命令式语言中是不可能的，因为在那里，每个函数都有可能修改了函数作用域以外的状态并且其后续的函数又会依赖这些修改。在函数式语言里，自动分析函数并找出适合并行执行的候选函数简单的像自动进行的函数内联化！在这个意义上，函数式风格的程序是&amp;quot;不会过时的技术（future proof）&amp;quot;（虽然不喜欢用行业广告语，但这里要破例一次）。硬件厂商已经无法让 CPU 运行得更快了，于是他们增加了处理器核心的速度并因并行而获得了四倍的速度提升。当然他们也顺便忘了提及：我们多花的钱只对支持并行运行的软件有用，只有一小部分的命令式程序可以（不加修改地）并行运行在这些新的硬件上，而 100% 的（纯）函数式程序都可以，因为函数式程序天生支持并行处理。&lt;/p&gt;&lt;h3 id=&#34;代码热部署&#34;&gt;代码热部署&lt;/h3&gt;&lt;p&gt;过去要在 Windows 上安装更新，重启计算机是难免的，而且还不只一次，即使只是安装了一个新版的媒体播放器。Windows XP 大大改进了这一状态，但仍不理想（我今天工作时运行了 Windows Update，现在一个烦人的图标总是显示在托盘里除非我重启一次机器）。Unix 系统一直以来以更好的模式运行，安装更新时只需停止系统相关的组件，而不是整个操作系统。即使如此，对一个大规模的服务器应用这还是不能令人满意的。电信系统必须 100% 时间在线运行，因为如果在系统更新时紧急拨号失效，就可能造成生命损失。华尔街的公司也没有理由必须在周末停止服务以安装更新。&lt;/p&gt;&lt;p&gt;理想的情况是完全不停止系统任何组件来更新相关的代码。在命令式的世界里这是不可能的。考虑运行时上载一个 Java 类并重载一个新的定义，那么所有这个类的实例都将不可用，因为它们被保存的状态丢失了。我们可以着手写些繁琐的版本控制代码来解决这个问题，然后将这个类的所有实例序列化，再销毁这些实例，继而用这个类新的定义来重新创建这些实例，然后载入先前被序列化的数据并希望载入代码可以不出问题地将这些数据移植到新的实例。在此之上，每次更新都要重新手动编写这些用来移植的代码，而且要相当谨慎地防止破坏对象间的相互关系。理论简单，但实践可不容易。&lt;/p&gt;&lt;p&gt;对函数式的程序，所有的状态即传递给函数的参数都被保存在了堆栈上，这使的热部署轻而易举！实际上，所有我们需要做的就是对工作中的代码和新版本的代码做一个差异比较，然后部署新代码。其他的工作将由一个语言工具自动完成！如果你认为这是个科幻故事，请再思考一下：多年来 Erlang 工程师一直&lt;a href=&#34;http://www.erlang.org/doc/reference_manual/code_loading.html#12.3&#34;&gt;更新&lt;/a&gt;着他们在线上运转着的系统，而无需中断它。&lt;/p&gt;&lt;h3 id=&#34;机器辅助的推理和优化&#34;&gt;机器辅助的推理和优化&lt;/h3&gt;&lt;p&gt;函数式语言的一个有趣的属性就是他们可以用数学方式推理。因为一种函数式语言只是一个形式系统的实现，所有在纸上完成的运算都可以应用于以这种语言书写的程序。比如，编译器可以把一段代码变换为等价但更高效的代码，由于变化遵循严格的数学原理其等价性是可证明的&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。多年来关系型数据库一直在进行着这类优化，没有理由不能把这一技术应用到常规软件上。&lt;/p&gt;&lt;p&gt;另外，还能使用这些技术来证明部分程序的正确，甚至可能创建工具来分析代码并为单元测试自动生成边界用例！这对那些要求极其稳定的系统价值不可估量，比如心脏起搏器（pacemaker）或空中交通控制系统；如果你编写的不是非常关键的应用，这类工具也是让你领先于竞争对手的杀手锏。&lt;/p&gt;&lt;h2 id=&#34;高阶函数&#34;&gt;高阶函数&lt;/h2&gt;&lt;p&gt;我记得自己在了解了上面列出的种种优点后曾想：&amp;ldquo;这都很棒，可是如果我不得不用天生残缺的语言对着全是 final 的变量编程，好特性也毫无意义。&amp;rdquo; 这其实是误解。在如 Java 这般的命令式语言环境里，所有变量都是 final 将带来一堆问题，但是在函数式语言里并非如此，函数式语言提供了不同的抽象工具使你忘记曾经习惯于修改变量。高阶函数就是这样一种工具。&lt;/p&gt;&lt;p&gt;函数式语言中的函数不同于 Java 或 C 中的函数，而是一个超集——它有着 Java 函数拥有的所有功能，但还有更多。创建函数的方式和 C 中相似:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有些东西和等价的 C 代码有区别。现在扩展我们的 Java 编译器使其支持这种记法：当我们输入上述代码后编译器会把它转换成下面的 Java 代码（别忘了，所有东西都是 final 的）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;add_function_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_function_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_function_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的符号 add 并不是一个函数。这是一个有一个成员函数的很小的类。我们现在可以把 add 作为函数参数放入我们的代码中。还可以把它赋给另一个符号。我们在运行时创建的 add_function_t 的实例如果不再被使用就将会被垃圾回收掉。这些使得函数成为第一级的对象无异于整数或字符串。操作（作为参数的）函数的函数被称为高阶函数。别让这个术语吓着你，这和 Java 的 class 操作其它（作为参数的）class 没什么区别。我们本可把它们称为&amp;quot;高阶类&amp;quot;但没有人注意到这个，因为 Java 背后没有一个强大的学术社区。&lt;/p&gt;&lt;p&gt;那么何时以及如何使用高阶函数呢？我很高兴你这样问，如果你不曾考虑类的继承层次，就可能写出一整团堆砌的代码块。当你发现其中一些代码重复出现，就把他们提取成函数（幸运的是这些依然可以在学校里学到），如果你发现在那个函数里一些逻辑动作根据情况有变，就把他提取成高阶函数。糊涂了？下面是 一个来自我工作中的实例：假如我的一些 Java 代码接受一条信息，用多种方式处理它然后转发到其他服务器。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ABCD_123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设现在要更改这个系统，我们要把信息转发到两个服务器而不是一个，一切基本都像刚才一样，但第二个服务器接受另一种客户代码（client code）格式，怎么处理这种情况？我们可以检查信息的目的地并相应修改客户端代码的格式，如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDestination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;server1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ABCD_123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123_ABC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而这不是可扩展的方法，如果加入了更多的服务器，这个函数将线性增长，更新它会成为梦魇。面向对象的方法是把 MessageHandler 作为基类，在子类中定制客户代码操作：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandlerOne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ABCD_123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandlerTwo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123_ABCD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就可以对每个服务器实例化一个适合的处理类，添加服务器的操作变得容易维护了。但对于这么一个简单的修改仍然要添加大量的代码。为了支持不同的客户代码我们创建了两个新的类型！现在我们用高阶函数完成同样的功能：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;handleMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Message&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClientCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getClientCodeOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ABCD_123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getClientCodeTwo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123_ABCD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;handleMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someMsg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClientCodeOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没有创建新的类型和新的 class 层次，只是传入合适的函数作为参数，完成了面向对象方式同样的功能，同时还有一些额外的优点。没有使自己囿于类的层次之中：可以在运行时传入函数并在任何时候以更高的粒度更少的代码修改他们。编译器高效地为我们生成了面向对象的&amp;quot;粘合&amp;quot;代码！除此之外，我们还获得了 所有函数式编程的其他好处。当然函数式语言提供的抽象不只这些，高阶函数只是一个开始。&lt;/p&gt;&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;&lt;p&gt;我认识的大多数人都读过&amp;quot;四人帮&amp;quot;的那本&lt;a href=&#34;http://www.amazon.com/gp/product/0201633612/103-9055240-2348603&#34;&gt;设计模式&lt;/a&gt;，任何有自尊的程序员都会告诉你那本书是语言中立的（agnostic），模式在软件工程中是通用的，和使用的语言无关。这是个高贵的宣言，但不幸有违现实。&lt;/p&gt;&lt;p&gt;函数式编程具有突出的表达能力，在函数式语言中，语言已达此高度，设计模式就不再是必需，最终你将能消灭设计模式而以概念编程。适配器 （Adapter）模式就是这样的一个例子（究竟适配器和 Facade 模式区别在哪里？可能有些人需要在这里再多费些篇章），而一旦语言有了叫作 &lt;em&gt;currying&lt;/em&gt; 的技术，这一模式就可以被消除。&lt;/p&gt;&lt;p&gt;适配器模式最有名的是被应用在 Java 的&amp;quot;默认&amp;quot;行为抽象上。在函数式编程里，模式被应用到函数，模式带有一个接口并将它转换成另一个对他人有用的接口。这有一个适配器模式的例子：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码把一个整数幂运算接口转换成为了一个平方接口。在学术文章里，这个雕虫小技被叫作 currying（得名于逻辑学家 HaskellCurry，他曾将相关的数学理论形式化）。因为在函数式编程中函数（反之如 class）被作为参数来回传递，currying 很频繁地被用来把函数调整为更适宜的接口。因为函数的接口是他的参数，使用 currying 可以减少参数的数目（如上例所示）。&lt;/p&gt;&lt;p&gt;函数式语言内建了这一技术。不用手动地创建一个包装了原函数的函数，函数式语言可以为你代劳。同样地，扩展我们（假想）的 Java 语言，让他支持这个技术：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将为我们自动创建出一个有一个参数的函数 square。他把第二个参数设置为 2 再调用函数 pow。这行代码会被编译为如下的 Java 代码：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;square_function_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square_function_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square_function_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如你所见，通过简单地创建一个对原函数的包装，在函数式编程中，这就是 currying —— 快速简易创建包装的捷径。把精力集中在你的业务上，让编译器为你写出必要的代码！什么时候使用 currying？这很简单，任何时候你想要使用适配器模式（包装）时。&lt;/p&gt;&lt;h2 id=&#34;惰性求值&#34;&gt;惰性求值&lt;/h2&gt;&lt;p&gt;一旦我们接纳了函数式哲学，惰性（或延迟）求值这一技术会变得非常有趣。在讨论并行时已经见过下面的代码片断：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somewhatLongOperation1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;somewhatLongOperation2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concatenate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在一个命令式语言中求值顺序是确定的，因为每个函数都有可能会变更或依赖于外部状态，所以就必须有序的执行这些函数：首先是somewhatLongOperation1，然后 somewhatLongOperation2，最后 concatenate，在函数式语言里就不尽然了。&lt;/p&gt;&lt;p&gt;前面提到只要确保没有函数修改或依赖于全局变量，somewhatLongOperation1 和 somewhatLongOperation2 可以被并行执行。假设我们不想并行运行这两个函数，那是不是就按照字面顺序执行他们好了呢？答案是否定的，我们只在其他函数依赖于 s1 和 s2 时才需要执行这两个函数。我们甚至在 concatenate 调用之前都不必执行他们——可以把他们的求值延迟到 concatenate 函数内实际用到他们的位置。如果用一个带有条件分支的函数替换 concatenate 并且只用了两个参数中的一个，另一个参数就永远没有必要被求值。在 Haskell 语言中，不确保一切都（完全）按顺序执行，因为 Haskell 只在必要时才会对其求值。&lt;/p&gt;&lt;p&gt;惰性求值优点众多，但缺点也不少。我们会在这里讨论它的优点而在下一节中解释其缺点。&lt;/p&gt;&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;&lt;p&gt;惰性求值有显著的优化潜力。惰性编译器看函数式代码就像数学家面对代数表达式——可以消去一部分而完全不去运行它，重新调整代码段以求更高的效率，甚至重整代码以降低出错，所有确定性优化（guaranteeing optimizations）不会破坏代码。这是严格用形式原语描述程序的巨大优势——代码固守着数学定律并可以数学的方式进行推理。&lt;/p&gt;&lt;h3 id=&#34;抽象控制结构&#34;&gt;抽象控制结构&lt;/h3&gt;&lt;p&gt;惰性求值提供了更高一级的抽象，它使得原本不可能的事情变成可能。例如，考虑实现如下的控制结构：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;unless&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isEuropean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendToSEC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们希望只在祖先不是欧洲人时才执行 sendToSEC。如何实现 unless？如果没有惰性求值，我们需要某种形式的宏（macro）系统，但Haskell 这样的语言不需要它。把他实现为一个函数即可：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;unless&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意如果条件为真，代码将不被执行。我们不能在一个严格（strict）的语言中再现这种求值，因为 unless 调用之前会先对参数进行求值。&lt;/p&gt;&lt;h3 id=&#34;无穷infinite数据结构&#34;&gt;无穷（infinite）数据结构&lt;/h3&gt;&lt;p&gt;惰性求值允许定义无穷数据结构，对严格语言来说实现这个要复杂的多。考虑一个 Fibonacci 数列，显然我们无法在有限的时间内计算出或在有限的内存里保存一个无穷列表。在严格语言如 Java 中，只能定义一个能返回 Fibonacci 数列中特定成员的 Fibonacci 函数，在 Haskell中，我们对其进一步抽象并定义一个关于 Fibonacci 数的无穷列表，因为作为一个惰性的语言，只有列表中实际被用到的部分才会被求值。这使得可以抽象出很多问题并从一个更高的层次重新审视他们（例如，我们可以在一个无穷列表上使用表处理函数）。&lt;/p&gt;&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;/h3&gt;&lt;p&gt;当然从来不存在免费的午餐。惰性求值有很多的缺点，主要就在于…惰性。有很多现实世界的问题需要严格（按序）计算。例如考虑下例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Please enter your name: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在惰性求值的语言里，不能保证第一行会在第二行之前执行！那么我们就不能进行输入输出操作，不能有意义地使用本地（native）接口（因为他们相互依赖其副作用必须被有序的调用），从而与整个世界隔离。如果引入允许特定执行顺序的原语又将失去数学地推理代码的诸多好处（为此将葬送函数式编程与其相关的所有优点）。幸运的是，我们并非丧失了一切，数学家为此探索并开发出了许多技巧来保证在一定函数式设置下（functional setting）代码能以特定顺序执行。这样我们就赢得了两个世界。这些技术包括 continuation， monad 和 uniqueness typing（一致型别）。我只会在本文中解释 continuation，把 monad 和 uniqueness typing 留到将来的文章中。有趣的是，除了确保函数求值顺序， continuation 在很多别的情况下也很有用。这点等一会儿就会提到。&lt;/p&gt;&lt;h2 id=&#34;continuations&#34;&gt;Continuations&lt;/h2&gt;&lt;p&gt;Continuations 对于程序设计的意义，就像达芬奇密码对人类历史的意义：即对人类最大秘密的惊人揭示。也许不是，但他在概念上的突破性至少和负数平方根的意义等同。&lt;/p&gt;&lt;p&gt;我们在学习函数时只了解了一半事实，因为我们基于一个错误的假定：函数只能将结果返回到它的调用端。从这个意义上说 continuation 是广义的函数，函数不必返回到其调用端而可以返回到程序的任何地方。我们把 &amp;ldquo;continuation&amp;rdquo; 作为参数传给一个函数，它指定了这个函数返回的位置。这个描述可能听起来挺复杂，看看下面的代码：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数 add 在其被调用的位置将结果 15 赋给了 i，接下来 i 的值被用来调用 square。注意所有的惰性求值编译器都不能调整这几行代码因为第二行依赖着第一行的成功求值。下面用 continuation 风格又称 CPS（Continuation Programming Style）来重写这段代码，这里函数 add 会将结果返回到 square 而不是原来的调用函数。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子中 add 有了另一个参数——一个 add 必须在它求值结束时用其返回值调用的函数。这里 square 是 add 的一个 continuation。这两种情况下，j 都将等于 255。&lt;/p&gt;&lt;p&gt;这就是强制使惰性语言有序地求值两个表达式的第一个技巧。考虑下面这个（熟悉的）IO 代码：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Please enter your name: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两行不相依赖所以编译器会自由的重新调整他们的执行顺序。然而，如果我们用 CPS 来重写这段代码，就会有一个依赖，编译器会因此而强制对这两行代码有序执行。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Please enter your name: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里（我们假定改造过的） println 需要用自己的返回结果作为参数去调用 readLine 并将 readLine 返回值作为自己的返回值。这样就能确保这两行被有序执行而且 readLine 一定被执行（因为整个计算期望最后的结果为结果）。Java 的 println 返回 void 但如果它返回的是一个抽象值（readLine 所期待的），我们就解决了这个问题。这样串接的函数调用很快会让代码难以读懂，不过这可以避免，比如我们可以给语言添加些语法糖（syntactic sugar）将其变成按正常顺序输入的表达式，然后由编译器自动为我们串接这些函数调用。这样就可以如愿地强制求值顺序并保留一切函数式编程的好处（包括数学地对我们程序进行推理的能力）。如果还是不明白，试着把函数看作只有一个成员的类的实例，重写上述代码使得 println 和 readLine 成为类的实例，就比较容易清楚了。&lt;/p&gt;&lt;p&gt;如果我在此结束本节，那将仅仅涉及到 continuation 最浅显的应用，我们可以用 CPS 重写整个程序，所有的函数都增加一个额外的 continuation 参数并把函数结果传给它；也可以用另一种方法来重写：简单地把函数当作 continuation 的总是返回到调用端的特例。这种转换很容易自动化（事实上，许多编译器就是这么做的）。&lt;/p&gt;&lt;p&gt;一旦我们将一个程序转为了 CPS，那么很明显每个指令都将有些 continuation, 这是一个该指令在执行结束时会用其执行结果调用的函数（在通常的非 CPS 程序中，就是跳转到调用端的指令）。从上面随便选个例子，比如 add(5, 10)，在用 CPS 风格写的程序里，add 的 continuation 是一个 add 执行结束时会调用的函数，那么在非 CPS 的程序里它是什么呢？我们可以把程序转为 CPS，但有必要这么做吗？&lt;/p&gt;&lt;p&gt;其实没有必要。仔细看一下我们的 CPS 转换过程，如果尝试为它写一个编译器，那么经过长久思考后，你会意识到这个 CPS 的版本根本不需要栈！没有函数会以传统的意义&amp;quot;返回&amp;quot;，它只是用结果调用了另一个函数。我们无需在调用时将函数参数压栈再于调用结束时弹出栈，而只是简单的把他们保存在一大块内存中，然后使用跳转指令。不再需要原来的参数——他们不会再次被用到，因为没有函数会返回。&lt;/p&gt;&lt;p&gt;所以，用 CPS 风格写成的程序没有堆栈，但每个函数却有一个额外的参数可被调用；非 CPS 风格的程序没有可以被调用的这个参数，但却有栈；栈中存放着什么？只是参数和一个指向函数返回地址的指针。你看出端倪了吗？栈中只是放着 continuation 的信息！ 栈中指向返回指令的指针本质上和 CPS 程序里将被调用的函数是等价的。如果你想探究 add(5,10) 的 continuation，只要简单地检查它在堆栈的执行点！&lt;/p&gt;&lt;p&gt;所以，continuation 和栈上指向返回地址的指针是等价的，只是 continuation 被显式传递，所以不必和函数被调用点是同一位置。如果还记得 continuation 就是一个函数，并且在我们的语言里，函数被编译为一个类的实例，你就会理解指向栈中返回指令的指针实际就是 continuation。因为我们的函数（就像一个类的实例）只是一个指针，这意味着给定程序中任意时间和任意位置，你都可以去请求一个&amp;quot;当前 continuation&amp;quot;（current continuation，它就是当前的栈的信息）。&lt;/p&gt;&lt;p&gt;这样我们就知道了什么是&amp;quot;当前 continuation&amp;quot;。它有什么意义？一旦我们得到了当前的 continuation 并将它保存在某处，我们就最终将程序当前的状态保存了下来——及时地冷冻下来。这就像操作系统进入休眠状态。一个 continuation 对象里保存了从我们获得它的地方重新启动程序的必要信息。操作系统在每次发生线程间的上下文切换时也是如此。唯一的区别是它保留着全部控制。请求一个 continuation 对象（在 Scheme 里，可以调用 call-with-current-continuation 函数）后，你就会获得一个包括了当前 continuation 的对象，也就是堆栈信息（在 CPS 程序里就是下一个要调用的函数），可以把这个对象保存在一个变量（或者是磁盘）里。当你用这个 continuation &amp;ldquo;重启&amp;quot;程序时，就会转回到你取得这个对象的那个状态，这就象切换回一个被挂起的线程或唤醒休眠的操作系统，区别是用 continuation，你可以多次地重复这一过程，而当操作系统被唤醒时，休眠信息就被销毁了，如果那些信息没有被销毁，你也就可以一次次地将它唤醒到同一点，就象重返过去一样。有了 continuation 你就有了这个控制力！&lt;/p&gt;&lt;p&gt;Continuation 应该在什么情况下使用呢？通常在尝试模拟一个本质上是无状态的应用时可以简化你的任务。Continuation 很适合在 &lt;a href=&#34;http://www.seaside.st/&#34;&gt;Web 应用程序&lt;/a&gt;中使用。微软公司的 ASP.NET 技术极尽苦心地模拟状态以便你在开发 Web 应用时少费周折，可如果 C# 支持了 continuation，ASP.NET 的复杂度就可以减半，你只需要保存一个 continuation，当用户下次发出 Web 请求时重启它即可。对程序员来说，web 应用程序将不再有中断，程序只是简单的从下一行重启！利用 continuation 这一抽象解决问题真是令人难以置信的便利，考虑到越来越多的胖客户端应用程序正在向服务器端转移，将来 continuation 也会变得越来越重要。&lt;/p&gt;&lt;h2 id=&#34;模式匹配&#34;&gt;模式匹配&lt;/h2&gt;&lt;p&gt;模式匹配不是什么新的创新特性，事实上，它和函数式编程的关系不大。把产生模式匹配归因于函数式编程的唯一的原因是函数式语言早就提供了模式匹配，然而现在的命令式语言还大多做不到。&lt;/p&gt;&lt;p&gt;让我们用一个例子深入了解一下模式匹配。这是一个 Java 的 Fibonacci 函数：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们用 Java 衍生出的函数式语言来支持模式匹配：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两者有什么区别？编译器为我们实现了分支。这有什么大不了？的确没什么，有人注意到很多函数包括了复杂的 switch 语句（尤其是在函数式程序中）所以认为这种抽象形式很好。我们把一个函数定义分离成多个，然后把模式置于参数中（有点象重载）。当这个函数被调用时，编译器比较传入参数和函数定义然后选择其中正确的一个，这一般是通过选择可选的最特定的定义来完成。例如，int fib(int n) 可以在 n 等于 1 时被调用，但是实际上 fib(n) 没有被调用，因为 fib(1) 更加特定。&lt;/p&gt;&lt;p&gt;模式匹配通常要比我这个例子复杂，比如，高级模式匹配系统可以让我们这样做：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*…*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*…*/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;模式匹配什么时候适用？情况太多了！每当你有一个嵌套着 if 的复杂的数据结构，这时就可以用模式匹配以更少的代码完成得更好。一个很好的例子闪现在我脑海，这就是所有 Win32 平台都提供了的标准的 WinProc 函数（即使它通常被抽象了）。通常模式匹配系统能检测集合也可以应付简单的值。例如，当传给函数一个数组后，就可以找出所有首元素为 1 第三个元素大于 3 的所有数组。&lt;/p&gt;&lt;p&gt;模式匹配还有一个好处：如果需要增加或修改条件，那么不必对付一个巨大的函数，只需增加或修改适合的定义即可，这消除了&amp;quot;四人帮&amp;rdquo;（GoF）书中的一大类设计模式。条件越复杂，模式匹配就越有用，一旦习惯了它，你就会担心没有了模式匹配的日子如何打发。&lt;/p&gt;&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;&lt;p&gt;到此我们已经讨论了纯函数式语言——实现了 λ 演算又不包括与丘奇形式系统矛盾的语言——里的特性，可是还有很多在 λ 演算框架之外的函数语言的有用特征。虽然一个公理系统的实现可以让我们象数学表达式那样思考程序但它未必是实际可行的。许多语言选择去合并一些函数式的元素而没有严格的坚持函数式的教条。很多象这样的语言（如 Common Lisp）不要求变量是 final 的——可以对其修改。他们还不要求函数只依赖于其参数——允许函数访问外部状态。但这些语言也的确包含着函数式的特征——如高阶函数，在非纯粹的函数式语言里传递函数作为参数和限制在 λ 演算系统中的作法有些不同，它需要一种常被称为词法闭包（lexical closure）的有趣特性。下面我给出几个例子。记住，这里变量不再是 final 的，函数可以引用其作用域外的变量：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;makePowerFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;powerFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;powerFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;makePowerFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;函数 make-power-fn 返回了一个函数，它有一个参数，并对这个参数进行一定阶的幂运算。如果对 square(3) 求值会有什么结果？变量 power 不在 powerFn 的作用域中，因为 makePowerFn 已经返回它的栈桢而不复存在。那么 square 如何工作？一定是这个语言以某种方式将 power 的值保存了起来以便 square 使用。如果我们再新建一个函数 cube，用来计算参数的立方又会怎样？运行环境必须存储两个 power 的拷贝，每个我们用 make-power-fn 生成的函数都用一个拷贝。保存这些值的现象就被称为 closure。Closure 不只保存宿主函数的参数，例如 closure 可能会是这样：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;makeIncrementer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;makeIncrementer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;makeIncrementer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 1;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 2;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 3;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 1;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 2;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// returns 3;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行时已保存了 n，所以递增器可以访问它，而且运行时为每个递增器都保存了一份 n 的拷贝，即使这些拷贝本应在 makeIncrementer返回时消失。这些代码被如何编译？closure 在底层是如何工作的？很幸运，我们可以去幕后看看。&lt;/p&gt;&lt;p&gt;常识会很有帮助，首先应注意到的是，局部变量的生命周期不再由简单的作用域限定，而变成不确定的，从而可以得出结论它们不能保存在栈上，而必须保存在堆上&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。这样一来，closure 的实现就象我们前面讨论的函数一样了，只是它还有一个指向周围变量的引用。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;some_function_t&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SymbolTable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parentScope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// …&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当一个 closure 引用了一个不在其作用域的变量时，它会在其祖先作用域中查找这个引用，就是这样！Closure 将函数式和面向对象的世界紧密结合。当你创建了一个包含了一些状态的类并把它传到别处时，考虑一下 closure。Closure 就是这样在取出作用域中的变量的同时创建&amp;quot;成员变量&amp;quot;，所以你不必亲自去做这些！&lt;/p&gt;&lt;h2 id=&#34;下一步的计划&#34;&gt;下一步的计划&lt;/h2&gt;&lt;p&gt;关于函数式编程，本文作了浅显地讨论。有时候一次粗浅的涉猎可能会进展为重大的收获，对我们来说这是好事。将来我还计划写写 category 理论、monad、函数式数据结构、函数式语言中的类型（type）体系、函数式并发、函数式数据库等等，可能还有很多。如果我得以（在学习的过程中）写出了上述诸多主题中的一半，我的生命就会完整了。还有，Google 是我们的朋友。&lt;/p&gt;&lt;p&gt;如果你有任何问题，意见或建议，请发到邮箱 &lt;a href=&#34;mailto:coffeemug@gmail.com&#34;&gt;coffeemug@gmail.com&lt;/a&gt;。很高兴收到你的反馈。&lt;/p&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&lt;hr&gt;&lt;ol&gt;&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;2005 年秋天我找工作时常常提出这个问题，当时我得到的是数量可观的一脸茫然，考虑到这些人基本上年薪都在 30 万美元以上，他们理应对他们可以得到的工具有更深入的理解。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;这看上去像是个悖论：物理学家和数学家被迫接受这个现实：他们完全无法确认宇宙万物是否遵循着某种数学家们可以定义的规则。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:3&#34;&gt;&lt;p&gt;我一直厌恶提供了一堆枯燥的日期，人名和地点的纪年式历史课，对我而言，历史是改变了这个世界的人的生活，是他们行为之后的个人动机，是他们得以影响亿万生灵的体制。所以这个关于历史的小节注定无法完整，只讨论了于本文关系密切的人物与事件。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:4&#34;&gt;&lt;p&gt;我在学习函数式编程的时候，很不喜欢术语 λ，因为我没有真正理解它的意义。在这个上下文里，λ 是一个函数，那个希腊字母只是方便书写的数学记法，每当你听到 λ 时，只要在脑中把它翻译成函数即可。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:5&#34;&gt;&lt;p&gt;有趣的是 Java 的字符串是不可变更的，探讨这一离经叛道的设计的原因也非常有趣，不过在这里会分散我们对原目标的注意力。&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:6&#34;&gt;&lt;p&gt;大多数函数式编程语言的编译器能通过将递归尽可能转为迭代来进行优化，这被称为尾递归。&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:7&#34;&gt;&lt;p&gt;反之未必成立，虽然有时可以证明某两段代码等价，但并不是对随意的两段代码都能做到的。&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li id=&#34;fn:8&#34;&gt;&lt;p&gt;这实际上不比存储在栈上慢，因为一旦引入了垃圾回收器，内存分配就成为了一个 O(1) 的操作。&amp;#160;&lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>创与投的悲喜剧</title>
       <link>/posts/vc-drama/</link>
       <pubDate>Fri, 19 Oct 2012 09:57:00 +0800</pubDate>
       
       <guid>/posts/vc-drama/</guid>
       <description>&lt;p&gt;《创业家》杂志的文章原创度大多很高，通常来源于和第一线相关人士的直接接触，在国内同类媒体里是我比较尊敬的一个。9 月号《创业家》封面文章题为「VC 潜规则」，网站上有&lt;a href=&#34;http://www.chuangyejia.com/index1.php?m=content&amp;amp;c=index&amp;amp;a=show&amp;amp;catid=123&amp;amp;id=8192&#34;&gt;主要内容的节选&lt;/a&gt;，里面提到的问题并非危言耸听，基本都有具体案例做支持，同时文章中有意无意的建立了创业和投资双方对立的景象，从市场规律来说这并不正常。&lt;/p&gt;&lt;p&gt;我接触到的不少互联网早期项目的创业者和投资者其实心态是没有问题的：创业者寻求符合自己条件的资本帮助自己更快的迈过下一个坎，而投资者希望创业者（最终或至少阶段性）成功使自己能搭车赚钱。目前越界违规乃至违法的行为，大多因为国内创新环境不佳，真正靠谱的项目不多，创投双方都有短视和投机心理，加之信用和监管方面的缺失，也使违规成本及风险降低，于是有点劣币驱逐良币的势头。但我还是坚信，市场上充分最大化双方利益才是时代的潮流，而在创投领域，通过合理的规则体系及资本运作来鼓励创新和创造价值，是最符合创投双方长远利益的，所以我愿意花点时间来就着上述《创业家》文章中提到的问题逐个评论，为什么这些问题本不该出现，而创投双方只要想明白了，其实可以一起努力做的更好。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最值得创业者警惕的莫过于投资人投成大股东。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这条是显而易见的，但我要说，其实投资人成为大股东是双输的结果。首先对于风投来说，其目的并不是把钱投出去，而是收回来，所以退出才是关键，如果某个投资人握有过多股份，就很难再找到新的投资方，退出机制就成了大问题；其次，即使不考虑退出，一旦投资人持股超过创业团队，创业团队及其领袖很容易就会迷失自己的目标，因为他很难再将产品/公司看作「自己的孩子」，这对产品和公司来说经常是致命的，而产品和公司失败了，投资人自己也就没有任何回报了。另一种情况是企业已经非常稳定，业务蒸蒸日上，股票也通过二级市场或者 IPO 公开流通，这时候创业者非控股甚至非第一大股东都是很正常的，需要的是一些反恶意收购的策略和方法。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最让创业者厌恶的是不尊重创始团队，过度干预企业日常经营。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这往往是不成熟的投资人干出来的事，或者说是一些创业、管理和导师瘾没过足的成功人士跑到投资领域来搅的混水。我倾向于称之为创业导师而不是风险投资人（其实创业需要导师么？）。是的，好的投资者可以对行业对产品有自己的观点与倾向，PG 还教创业者&lt;a href=&#34;http://www.paulgraham.com/ambitious.html&#34;&gt;哪些产品值得去做&lt;/a&gt;呢，但这只是布道，属于利用自己的积累为创新产业做贡献（反过来也可以提升投资者成功几率）。而创业项目风险投资，用一位前辈的话来说，叫金融产品零售，和叫化子类似，能做的只是看和选，有那么多想法与其指导别人还不如自己干一个吧。不过我一直认同的、投资者应该尝试指导创业者的唯一例外，就是关于股份制企业治理，大多数创业者缺乏这方面的经验，我的一位同事每发一份投资意向书（term sheet）就赠送对方一本关于股份制公司融资和治理的书，是个不错的个性化实践，值得推广。&lt;/p&gt;&lt;p&gt;从创业者角度来说，和股东、董事会打交道是自己工作职责的一部分，伟大如 Steve Jobs 也在 35 岁之后才学会和董事会打交道的方法，所以也不用把这问题看得太重，最后很多其实都是交流上的问题，当然一开始就要把股东、董事会、管理团队的责权利明确下来，这是公司长治久安的根基。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最让创业者觉得恶心的是不尊重商业机密，获取企业信息后转投资竞争对手。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;投资之后投资者和创业者应该是伙伴关系，投资前可不是。本质上这是一种商战，投资者、创业者以及各自的竞争者其实是复杂的博弈关系，如果创业者不熟悉这个领域的商业规则，是完全可能在规则框架内被阴了的。投资者在融资过程中不可避免的需要向潜在的投资者披露一些信息，这时候创业者应该有一些考虑：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;尽量选择在对自己有利的时机披露必要的信息，仔细研究自己的业务，划分出不同的级别的可披露信息加以管理。&lt;/li&gt;&lt;li&gt;信息披露和相关的保密义务挂钩，关键信息，尤其是对企业可能产生重大影响的敏感信息应在有足够保护的情况下披露；对违反保密协议的行为完全可以用法律手段保护自己的权益。&lt;/li&gt;&lt;li&gt;要对自己的业务有个正确认知，并不是很多信息都那么敏感，如果因为不披露或者披露之后不如竞争对手而失去被投资机会，这其实没啥可抱怨的。&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;最让创业者觉得可恨的是缺乏投资诚意，投资意向书的实际投资率较低。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;投资意向书（term sheet）是个比较特别的文件，既表示比较确定的意向但又不代表承诺，既明确了大量后续操作的原则但又没有太多法律约束力。当然，在诚信和品牌比较被看重的环境下，投资者会对意向书相当谨慎，主要是考虑到给了意向书而最后不投会损失自己的声誉，从而影响未来的生意，而在其他环境下，投资者可以既不违反纸面上的规则，又可以利用意向书来玩一些诡计。&lt;/p&gt;&lt;p&gt;可能因为资本市场的规则体系基本是资方制定的缘故，框架一般都会偏向投资人一方，在理解到本质上融资过程是一场商战之后，创业者更应该谨慎对待意向书谈判，必须充分了解相关背景知识，必要时可以寻求专业律师或融资顾问的帮助。实际上意向书里几乎所有的条款都是可谈判的，几乎每个关键论述都有对投资者有利、较中性和对创业者有利的三种版本，创业者应该努力避免太悬殊的信息不对称而吃亏。&lt;/p&gt;&lt;p&gt;另外应该时刻记住，这是个有充分选择的商业社会（是的，即使在我国也算是）。除去在尽职调查（DD）中发现严重问题这类情况不算，如果一个投资者签意向书后最终签投资协议的比例不到一半，愿意找他的创业者一定会越来越少，如果不是这样，我只能说，只认钱不认人的笨创业者太多了。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最让创业者觉得闹心的是缺乏耐心，对创业团队的经营目标设定脱离企业发展规律，要求业绩对赌。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我觉得应该这么看：这是个选择的问题。如果觉得条件无法接受，可以不选；如果对自己的业绩没有把握，可以不赌；如果对估值不满意，可以想办法说服对方自己的价值为什么可以更高。所谓「缺乏耐心」，所谓「脱离企业发展规律」，实质上是双方价值观以及对未来的判断和预期不一致，这种情况下强行合作后患无穷。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最让创业者鄙视的是在投资过程中谋求个人占股、回扣等个人利益的投资人。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这种案例中双方都是该谴责甚至承担法律责任的，但目前确实立法和行业规则跟不上市场发展的要求，但这也不是我们能去改变的，我们能做的只能是自律，以及在合法和力所能及的范围内披露真相，所以这个似乎没法太深入去讨论。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>给创业者的十条建议</title>
       <link>/posts/ten-advices-for-entrepreneurs/</link>
       <pubDate>Wed, 10 Oct 2012 17:53:00 +0800</pubDate>
       
       <guid>/posts/ten-advices-for-entrepreneurs/</guid>
       <description>&lt;p&gt;湾区著名的投资人 &lt;a href=&#34;http://blog.guykawasaki.com/&#34;&gt;Guy Kawasaki&lt;/a&gt;，早期是 Apple 的布道师，写过一本著名的书《&lt;a href=&#34;http://www.guykawasaki.com/the-macintosh-way/&#34;&gt;麦金塔之路 The Macintosh Way&lt;/a&gt;》，转行做投资成立 Garage.com 之后仍然保持了言辞犀利、著述颇丰的特点，很久以前我转过他的两篇博客，分别是「&lt;a href=&#34;http://7thgen.info/blog/2008/02/the-top-ten-lies-of-venture-capitalists/&#34;&gt;风险投资家的十大谎言 The Top Ten Lies of Venture Capitalists&lt;/a&gt;」和「&lt;a href=&#34;http://7thgen.info/blog/2006/07/the-top-10-lies-by-entrepreneurs/&#34;&gt;创业者的十大谎言 The Top 10 Lies of Entrepreneurs&lt;/a&gt;」，都是 Guy 在 2006 年写的，但显然它们在很长时间里都有指导意义，属于可以一看再看的有趣文字。&lt;/p&gt;&lt;p&gt;提起这个是因为最近我自己也成了一名风险投资人，回过头来看这两篇东西有了点新的感受。和创新孵化以及投融资体系非常完善的美国相比，中国的创业者和投资者面临的问题除了 Guy 提到的以外还有更多、可能更初级的问题（至少从我创业和投资的经历来看如此），所以我决定为中国的创业者写点建议，作为对 Guy 那两篇妙文的一个拙劣补充吧。&lt;/p&gt;&lt;p&gt;需要着重说明的是，我深信创业的成功同时需要智慧与运气，最后可以决定成败的因素实在太多了，所以没人能教会成功的创业，也没人能复制成功的创业，一切都必须创业者自己去判断和把握。下面要说的只是我站在一个风险投资人的角度提出的一些建议，如果创业者根本不需要风险投资，那其实完全可以无视之。&lt;/p&gt;&lt;h3 id=&#34;1-无论哪个领域创业都首先是一项生意成功标准是唯一且确定的回报--投入&#34;&gt;1. 无论哪个领域创业都首先是一项生意，成功标准是唯一且确定的：回报 &amp;raquo; 投入。&lt;/h3&gt;&lt;p&gt;差别可能只是在于：投资人投入的是资本，预期回报是更多资本；创业者投入的是钱（至少机会成本）、自己的生命（至少一部分）还有其他可见不可见的东西，回报是创业者自己觉得配得上这些投入的东西（财富和成就是最常见的表现形式）。即使您最开始的想法完全基于自娱自乐的兴趣，当希望别人（无论是投资人还是合作伙伴或团队成员）投入时还是必须回到「有限时间内投入与回报」这个基础上来。&lt;/p&gt;&lt;h3 id=&#34;2-不是所有的问题都可以靠钱解决真的需要钱风投也未必是最合适的选择&#34;&gt;2. 不是所有的问题都可以靠钱解决，真的需要钱风投也未必是最合适的选择。&lt;/h3&gt;&lt;p&gt;风险投资又称「创业投资」，是一种主要面向初创团队的早期财务投资形式，由于早期投资必然带来的高风险特性（说白了就是投十家可能最后死掉九家），决定了其预期的成功回报要非常高（十倍以上，不然怎么抵消那死掉的九家呢），这样的成长性和回报率实际上要求项目本身必须有足够的创新性。不少初创公司做的事情可以相当赚钱，但没有爆炸式成长的可能，那其实并不适合风投，如果需要资金可以考虑通过其他金融手段取得（比如银行贷款或者 PE）。&lt;/p&gt;&lt;h3 id=&#34;3-了解用户是成功的基础&#34;&gt;3. 了解用户是成功的基础。&lt;/h3&gt;&lt;p&gt;我接触初创团队最开始问的一定是这几个问题：目标用户群在哪里？欲解决他们的什么问题？没有你们的解决方案之前他们怎么解决这个问题？有了你们的解决方案之后情况有什么变化？我非常建议所有的创业者也试试问自己这些问题，看看能不能用几句话说明白。这里的关键在于：很多人被 Apple 的成功误导，忘记了自己没有 Apple 的品牌积累，做的也不是 Apple 那种高度大众化普遍需求的产品（而且 Apple 并非不做用户研究或者不重视用户需求，以后有时间我会写一篇「关于 Apple 的十大误解」），绝大部分创新产品都需要首先解决「用户从哪里来、他们为什么用这个产品」的核心问题，然后在不断扩大的用户群中去验证和打磨。美国的创业者和布道者 Steven Blank 有本书专门讲他总结出来的、以用户为中心的产品研发和运营方法（国内有华中科技出版社引进的译本《&lt;a href=&#34;http://book.douban.com/subject/11516567/&#34;&gt;四步创业法&lt;/a&gt;》），非常值得每位创业者研读（不过也别陷进去）。&lt;/p&gt;&lt;h3 id=&#34;4-团队比某个产品更重要&#34;&gt;4. 团队比某个产品更重要。&lt;/h3&gt;&lt;p&gt;没错，团队的价值是要通过产品体现的，但创新产品缺省结果是失败，我更感兴趣的是团队能从自己和其他人的失败中得到什么。一个搭配良好、合作无间的精干团队，就算今天失败明天也还是有很大机会成功。我心目中最佳创业团队是这样的：有一个能力比较全面的领袖，几个认同团队愿景和价值观的核心成员很好的分担愿景所要求的关键岗位职责（至少管理、产品、技术、市场角色不可或缺），良好的交流协作气氛和解决冲突机制。稍差的团队也可能成功，但至少得知道自己团队的问题并有办法在可预见的将来解决掉。&lt;/p&gt;&lt;h3 id=&#34;5-请务必再三确认这件事是无论结果如何都愿意投入几年去做的&#34;&gt;5. 请务必再三确认这件事是无论结果如何都愿意投入几年去做的。&lt;/h3&gt;&lt;p&gt;创业之路孤独而曲折，会碰到的困难经常超出预期，创业者的心态对于成功至关重要。当然，真正的好心态并不是自我洗脑「我会成功」或者「必须成功」，而是在看准一个方向的前提下做好周密准备，同时关注每一天的积累和收获，随时给自己留出败中取胜的机会和本钱。这种执着和周到会让投资人在不那么拿得准的时候更愿意和您一起承担风险。&lt;/p&gt;&lt;h3 id=&#34;6-重视品牌用产品品牌形象串起产品技术和市场整个链条&#34;&gt;6. 重视品牌，用产品品牌形象串起产品、技术和市场整个链条。&lt;/h3&gt;&lt;p&gt;品牌认同对于凝聚团队和拓展用户群都有巨大的作用，产品的名称、标志和口号是比产品功能与人机界面更早到达用户的体验，其作用经常超出人们的直觉想象。另外，快速达到内部高度认同的一个品牌形象，也是解决初创团队早期产品定位模糊、方向不明确等常见问题的标志。&lt;/p&gt;&lt;h3 id=&#34;7-尽早制定有效获取用户的市场策略&#34;&gt;7. 尽早制定有效获取用户的市场策略。&lt;/h3&gt;&lt;p&gt;无论产品多么美妙、远景多么诱人，真正决定未来的可能是获取用户的难易程度。尝试考虑产品目标用户群的比如说 1% 或者 0.1%，获得这些用户有哪些市场渠道？大致需要多少市场成本？这数字通常很容易吓跑投资人，而降低这个数字的靠谱办法只能是切切实实做好产品和运营上的策划与准备。&lt;/p&gt;&lt;h3 id=&#34;8-正确理解数据的含义用它来指导你的计划&#34;&gt;8. 正确理解数据的含义，用它来指导你的计划。&lt;/h3&gt;&lt;p&gt;产品运营数据的意义和价值越来越为创业者所认同，数据越好越容易造成病毒营销，也越容易打动投资人，这可能也是刷僵尸、刷榜、刷微博 spam 目前几乎成为初创产品运营「必备良药」的重要原因吧。不过别忘了，最终能评判产品成败的，是一些持续性的、和产品实质关联更紧密的数据，比如活跃用户、用户行为密度与关联性、业务数据价值等，而特定产品会有自己特色的一些标志性业务数据，至少我更关注这些数据及其变化趋势而不是下载量。&lt;/p&gt;&lt;h3 id=&#34;9-从第一天开始想好团队权益的分配方案&#34;&gt;9. 从第一天开始想好团队权益的分配方案。&lt;/h3&gt;&lt;p&gt;这不是必须的，但如果做好了能省下不少以后会颇为棘手的麻烦，也会让团队更团结、效率更高。如果需要具体的方案请参考著名博客作者（同时也拥有自己的软件开发公司并投资了几个颇为成功的互联网创新产品，包括著名的问答网站 StackOverflow）Joel Spolsky 写的「&lt;a href=&#34;http://answers.onstartups.com/questions/6949/forming-a-new-software-startup-how-do-i-allocate-ownership-fairly&#34;&gt;Joel 的完全公平初创企业股权分配指南&lt;/a&gt;」。&lt;/p&gt;&lt;h3 id=&#34;10-搞清楚财务投资和战略投资的差异&#34;&gt;10. 搞清楚财务投资和战略投资的差异。&lt;/h3&gt;&lt;p&gt;这问题其实创业者比较无辜。国内几乎所有大的互联网企业都有专门的人做投资，在某个阶段他们通常都分不清财务投资和战略投资，经常打着风投的名号行企业战略收购之实，直到某天终于明白这是个糟糕的做法，然后就会像我目前就职的盛大资本这样，作为一个独立的风险投资基金管理公司剥离出来，从多样化的来源募资，回到单纯的财务投资与管理上来（不敢说专业化，还在摸索着前进）。对于创业者来说关键在于理解风投基本上是财务投资，并不会附加对初创企业业务上的约束，一般也不会用除了资本投入以外的任何资源来交换股份，如果创业者更需要的是钱以外的东西（比如用户导入、流量导入、推广渠道）那么应该去找相应的合作伙伴而不是风投。就我个人来说，我会对投资的团队提出股份制公司治理的要求，也会很乐意提出我对产品方向甚至实施的建议，但前者是我的工作职责，后者只是兴趣并且只在创业团队要求时才会去做。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;最后，我可以预见到的一些问题，就在这里自问自答以节约大家的时间精力吧，其他问题欢迎在下面提出来讨论。&lt;/p&gt;&lt;h4 id=&#34;q-这些都是废话我早就知道了&#34;&gt;Q: 这些都是废话，我早就知道了！&lt;/h4&gt;&lt;p&gt;A: 这太好了，说明我们的价值观有相当多的认同，如果您有好的创业项目需要融资请务必&lt;a href=&#34;mailto:neo.lee@gmail.com&#34;&gt;告诉我&lt;/a&gt;。&lt;/p&gt;&lt;h4 id=&#34;q-这些是不是有点理想化我看国内火的创业团队产品很多不是这样嘛&#34;&gt;Q: 这些是不是有点理想化？我看国内火的创业团队/产品很多不是这样嘛…&lt;/h4&gt;&lt;p&gt;A: 不可否认，确实有的创业者有意或无意的在「骗」投资，并没有完整的企业愿景，更不用说做成百年老店的愿望了。但我接触的很多创业者还是真正想作出「能改变千百万人生活」的产品的，我相信认同我所描述的价值观的创业者和投资者都会越来越多，毕竟市场经济的规律就是：资源应该趋向能持久高效创造价值的企业。&lt;/p&gt;&lt;h4 id=&#34;q-国内投资者才没有你表演的那么好呢劣迹多着呢&#34;&gt;Q: 国内投资者才没有你表演的那么好呢！劣迹多着呢…&lt;/h4&gt;&lt;p&gt;A: 我觉得国内整个创投环境都还在婴儿期，大家都需要时间来学习和进步，也更需要时间让走正道的无论投资者还是创业者有更多成功，才能击败「劣币驱逐良币」的现状（我说的劣币是指：急功近利、投机心态、欺骗用户等）。我会身体力行我的价值观，我相信这也是对创业者最有利的。&lt;/p&gt;&lt;h4 id=&#34;q-很多创新的产品都是打破所谓的规则的&#34;&gt;Q: 很多创新的产品都是打破所谓的规则的！&lt;/h4&gt;&lt;p&gt;A: 既是也不是。做风投这行的人也经常内部讨论对风投来说到底规律和运气哪个更重要，我个人的观点是，运气很重要（龟仙人：也是实力的一部分！），但价值观和方法论帮助提高成功的概率，从长远来看，按照规律做事创业者会更容易成功，而投资者会更有收益。&lt;/p&gt;&lt;h4 id=&#34;q-我很认同你说的这些并一直在做这样的创业实践你会投资我吗&#34;&gt;Q: 我很认同你说的这些并一直在做这样的创业实践，你会投资我吗？&lt;/h4&gt;&lt;p&gt;A: 我会认真的了解你的团队和产品，如果达到我的标准我会全力帮助你说服我们基金的 LP 来投资你。你最初可以通过电子邮件&lt;a href=&#34;mailto:neo.lee@gmail.com&#34;&gt;和我联系&lt;/a&gt;。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>平台无关的移动应用？</title>
       <link>/posts/the-law-of-universal-apps/</link>
       <pubDate>Wed, 21 Dec 2011 10:29:00 +0800</pubDate>
       
       <guid>/posts/the-law-of-universal-apps/</guid>
       <description>&lt;p&gt;早上看到消极 &lt;a href=&#34;https://twitter.com/cxiaoji&#34;&gt;@cxiaoji&lt;/a&gt; 发的推很有意思，原文在&lt;a href=&#34;https://twitter.com/cxiaoji/status/149167077385707521&#34;&gt;这里&lt;/a&gt;和&lt;a href=&#34;https://twitter.com/cxiaoji/status/149221508567408640&#34;&gt;这里&lt;/a&gt;，引用如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;几大科技企业正在美国推动立法，取消移动应用购买的平台依赖性──即 iOS 上买过的 app，在黑莓，安卓和 WP 使用无需另外付费。在目前黑 Apple 的几个案子里，这一手是最狠的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;上一推是内参消息，远非成形法案，仅代表业内一种势力。如获成功，我可以想到的后果包括：平台转换的成本更小，用户粘性降低；即使对 iOS 应用，苹果也不再是垄断销售商，应用商店们将独立于平台展开竞争，这其实对开发者是利好。受影响最大的就是目前的移动平台既得利益者苹果了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这种尝试是不是真的存在且是认真的，估计大家都不知道，下面的讨论仅限于假设性前提，即上述转引的努力确实存在而且是认真的。这个尝试其实是建立移动应用的 Universal 形态，一个应用包含了所有平台设备上可运行的版本，并且只售一次，如果这个实现，那么 App Store 自然变成了应用开发者主导，不会被任何一个设备平台提供商控制了。那么到底这有多大的可能？是不是真的对应用开发者有利呢？&lt;/p&gt;&lt;p&gt;首先，这样的立法存在不可小视的技术性困难。什么算「相同应用」？相同品牌和名字？相同功能？类似功能？功能重叠有多少算是类似？一般来说对于商品的区分还会包括生产的方法，一个厂商产的吸尘器，可能有很多类似的型号，区别只在很细微之处（比如滤网材料），不可能说买了一个就第二个免费；在软件领域也一样，一模一样的图片缩放功能，在 iOS 和 Android 下的实现天差地别，如果这些都算相同的应用，那对于目前普适的一些基本准则是极大的挑战。由于找不到类似先例，其难度可想而知。&lt;/p&gt;&lt;p&gt;当然，谋求立法者也可以退而求其次，只禁止 Apple 独家运营 iOS 的 App Store，这个威胁对 Apple 来说一直存在，但其实对 Apple 影响不大，Apple 收入主要来自设备销售，它控制 App Store 主要也不是为了 30% 那点收入而更多是关注对 iOS 生态环境的宏观影响，而别家要做到比 Apple 自己更好的 App Store 难度也很大。&lt;/p&gt;&lt;p&gt;另外从美国的社会特点看，过度限制自由的法规历来不讨选民的喜欢，左派和右派都不热衷，反垄断倒是经常用的大棒，不过那是另一回事了，而且也未必能成。&lt;/p&gt;&lt;p&gt;第二，这样的立法带来的影响将是复杂而微妙的，并不容易判断对谁有利或者不利。Apple 可能失去对 App Store 的完全控制（喔，MS 计划中的完全控制也没了），而这对 Apple 的影响很难简单的评估。同时还有另外一些影响，比如：中小开发商可能会放弃其他平台的开发，因为反正赚不到钱还要付出可能数倍的工作量（喂，Android SDK，说你呢！）；还有不少 iOS 版本收费而 Android 版本采用免费广告模式的，对开发者来说其实没啥区别；还有 &lt;a href=&#34;https://twitter.com/Leaskh&#34;&gt;@Leaskh&lt;/a&gt; 提到的可能性：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;立法取消移动应用购买的平台依赖性其实并不见得是黑 Apple 的，等用户发现同一 app 在不同平台的表现，他们仍然会选择 iOS。而对开发者，这样反而能促进 app 消费，因为这样免除了用户购买行为的后顾之忧。在同样膨胀的开发规模中，iOS 更稳健的架构最终会更有优势。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;问题在于，对这么一个影响不明朗，立法难度又很大的法案，什么样的政客会去持续强力的支持他呢？感觉更多是传统软件厂商一厢情愿的希望从移动时代新贵手中夺回控制权的幻想罢了。&lt;/p&gt;&lt;p&gt;最后，「如果」（只是如果）真的立法成功，真的对开发者有利吗？我认为对移动开发者有利的大环境因素包含（但不限于）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;移动互联网的用户持续增长，活跃度不断提高。&lt;/li&gt;&lt;li&gt;平台提供的功能差异减少（二进制兼容这种共产主义梦想真不敢指望啊）。&lt;/li&gt;&lt;li&gt;各平台设备的规格尽量规范化，减少适配代价。&lt;/li&gt;&lt;li&gt;有方便易用的用户支付渠道减少坏账率。&lt;/li&gt;&lt;li&gt;有可靠的推广平台能相对公平的竞争。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;多个平台版本只能卖一次（所以你不能针对平台特点做差异化营销），每个平台都有大量不同厂商运营的 App Store （所以你要增加市场投放的成本）等真不是什么有利的变化。Android 的应用商店可以随便开，最初一众 IT 大佬都乐得合不拢嘴，但现在大家都看清楚了：所有人都可以开就意味着所有人都没啥可赚的，要么退回到过去运营商和手机厂商控制软件来源的黑暗时代，要么就是让开发者和用户面对一大堆门市不知所措。&lt;/p&gt;&lt;p&gt;所以我目前的判断是：这事儿，不靠谱。&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Cyborg 和人类的进化</title>
       <link>/posts/the-evolution/</link>
       <pubDate>Fri, 05 Aug 2011 18:41:00 +0800</pubDate>
       
       <guid>/posts/the-evolution/</guid>
       <description>&lt;p&gt;几天前网上瞟到一个网易公开课，是 TED 的一篇，叫「人会退化成半机器人吗」，忍不住发了条&lt;a href=&#34;https://twitter.com/soulhacker/status/98017371024920576&#34;&gt;吐槽推&lt;/a&gt;说：难道不应该是「进化成半机器人」么…… 和布布（&lt;a href=&#34;https://twitter.com/GossipSama&#34;&gt;@GossipSama&lt;/a&gt;）等交流了几句，并在霍炬（&lt;a href=&#34;https://twitter.com/virushuo&#34;&gt;@virushuo&lt;/a&gt;）的煽动下，决定写个稍长的东西来说说这个我一直很感兴趣的话题：人的进化以及生化机械人（cyborg）。&lt;/p&gt;&lt;p&gt;那篇 TED 演讲我看过，原版叫「&lt;a href=&#34;http://www.ted.com/talks/amber_case_we_are_all_cyborgs_now.html&#34;&gt;We are all cyborgs now&lt;/a&gt;」（所以你看，网易公开课的翻译实在不准确），演讲者是 Amber Case，她是专门研究生化机械人（cyborg）的人类学者，她的观点集中在我们对「外部大脑」（各种帮助我们的电子和机械设备）的依赖，以及由此可能带来的机器反控制反奴役风险。演讲很有趣，有兴趣的朋友可以看看，网易公开课有&lt;a href=&#34;http://v.163.com/movie/2011/1/0/5/M77U8MAFG_M77U8UD05.html&#34;&gt;带字幕的版本&lt;/a&gt;。她关注的这个话题主要是人类学范畴，且相当复杂，就不在这里展开了。作为理工科宅男我看到标题的第一时间就脑补了「攻壳机动队」，所以我心目中的「半机器人」直接就对应草薙素子和巴特那种强化了机体能力但保有人类智能及灵魂的改造人了——事实上，看上去攻壳机动队员们的智能和灵魂似乎也进化了，有的是通过与外部装置互联，有的则可能是自我进化。&lt;/p&gt;&lt;p&gt;关于人类的进化，在科学上是个衔接自然科学、哲学和伦理的、深得不能再深的课题；在各种科幻作品，尤其是强调科学基础和严谨体系的硬科幻中，则是必须说明的要点。简单罗列几个经典的设定：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;攻壳机动队（攻殻機動隊 GHOST IN THE SHELL）&lt;/strong&gt; 人类可以使用各种「义体」来替换身体的一部分，四肢、器官、眼睛鼻子等等都没有问题，义体往往拥有更强大的机能；人脑可以通过脖子后面的插孔直接联入电子网络；人真正的本体意识称为「Ghost」，很可能可以脱离本体存在，甚至融入电子网络，事实上素子和「傀儡師」最后应该都成为了这种形态，在第二部剧场版「Innocence」里素子还演示了将自己的 Ghost 临时下载到玩偶机器人里，从而暂时拥有了另一个躯体和巴特并肩作战。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;星际迷航（Star Trek）&lt;/strong&gt; 里面的 The Borg 种族是典型的 cyborg，是由类似人类的种族通过不断改造和进化而成的半有机（organic）半合成（synthetic）种族。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X 战警（X-Men）&lt;/strong&gt; 普通人类进化的速度实在太慢了，但是基因突变带来了进化的另一种可能性，这就是「X-Men」的主题：突变（mutation），人类对因为突变而拥有各种神奇能力的变种人心怀恐惧，而少数先知型变种人希望保护变种人，进而借助突变的力量加快人类进化，从事着相关的研究（“X教授” Charles Xavier 等）。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;终结者（The Terminator）&lt;/strong&gt; 其实这代表了一大票与机器人相关的科幻作品的典型，那就是人类造出了具有「自我意识」的机器人，他们具有高度智能、不亚于人类的学习能力和部分情感，有自我保护意识，可能破坏阿西莫夫的&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%B8%89%E5%AE%9A%E5%BE%8B&#34;&gt;机器人三定律&lt;/a&gt;。这其实是人类进化的另一种形式：把智能和灵魂移植到电子和金属中。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;质量效应（Mass Effect）&lt;/strong&gt; 那时的人类拥有一种称为「生化（Biotics）」的超能力，能够借助生物能创造出各种「质量效应场」，拥有这种能力需要天赋、后天的生化改造和高强度的训练才能得到；人工智能已经达到足以威胁他们创造者的程度，所以银河系的各种族签订协议禁止制造真正意义的人工智能（AI），而使用受限的「虚拟智能（VI）」技术来制造辅助机器人和自动化设备；另外，明明已经挂掉的 Shepard 可以借助邪恶机构 Cerberus 的秘密实验重新复活，借助各种人造生物组织、机械和电子模块重生。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;第五元素（The 5th Element）&lt;/strong&gt; 飞船坠毁只剩一个细胞的超级人种「第五元素」，可以使用人造方式完成重建。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面是 TV 版「攻壳机动队 S.A.C.」里一个镜头，可以看到看似与常人无异的角色，眼球却是更换过的义体，上面有规格和制造商——看来日本人真的很喜欢蔡司（Carl Zeiss）的镜头呢！不过话说回来，人眼有很多目前技术难以模仿的神奇能力，比如自动局部细节增强（你关注的局部会有比周围更多的细节和更高的解析度），比如自动弱光补偿（1.0 光圈的镜头也比不了），还有几乎实时与大脑中影像处理模块的交互和各种复杂效果计算。&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/gits-carl-zeiss-eye.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;GitS Carl Zeiss Eye&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;所以不难看出，大部分科幻作者都认为，现今的器官移植和义肢以后发展到更高水平之后，是可以取代局部甚至大部分原生人体功能的，甚至会带来改良的机会；而在可预见的未来，如果不借助这类移植改造，人就只能指望极低几率的基因突变了，否则进化在几百几千年这样的时间尺度上压根看不出效果。这种设定非常合乎情理，因为把人的智能、情感与拥有极高强度的机械以及极高信息处理能力的电子计算机结合起来，确实很酷，而且带来很多很炫的可能性，能够帮助作者推进剧情、吸引读者/观众/玩家。但，事实上如何呢？&lt;/p&gt;&lt;p&gt;数年前，DARPA（美国国防部高级研究计划局）资助的「&lt;a href=&#34;http://www.popularmechanics.com/science/health/breakthroughs/4224764&#34;&gt;Proto 2&lt;/a&gt;」项目曝光，得到广泛关注，因为它尝试解决的是义肢移植中关键的里程碑式问题：意识控制，即如何让人可以通过意识而不是电子/机械装置（比如按钮、手柄）来控制自己的义肢。通过将复杂的控制电路与人的神经系统连接，对人的神经脉冲进行响应，去年某期的 National Geographic 上还报道了该项目进行实际人体测试的效果。这些技术目前离实用还有距离，但其未来令人抱有强烈期待。不过也要看到，四肢是所有这类尝试中相对简单的，眼球什么的看上去就要复杂的多，即使四肢也有问题：它们能接受人的意识控制，但目前还不能把触觉返回给人的大脑。所以要达到「攻壳机动队」描绘的未来，路还是很长的。&lt;/p&gt;&lt;figure class=&#34;mid&#34;&gt;&lt;img src=&#34;/images/posts/darpa-proto.jpg&#34;&gt;&lt;figcaption&gt;      &lt;h4&gt;DARPA Proto 2&lt;/h4&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;最后简单说说对两个关键问题的感想。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Cyborg：人类的未来？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;目前人类研究人体的可替换部件主要是出于医疗方面的考虑，借助机械电子技术来强化自身能力的还很少（也许不排除有某些野心家狂想者正在这么干？），而想直接在器质层面强化大脑的应该也不会有（提升大脑能力可以通过人机界面借助计算机来实现），所以可预期的 cyborg 形态还是类似「攻壳机动队」描述的那种强化身体部件的人体。我坚信这是人类的未来，随着技术的发展人的寿命会越来越长（因为偶然损坏或者易老化的部分可以替换），智能也会不断的积累和进化，最终不可替换的部分就是个体真正的本我，它到底是什么（是大脑？还是更无形的什么？），这将是人类面临的终极问题。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有机生命体与机器的融合：进化还是退化？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;「黑客帝国（The Matrix）」中有一幕，睡不着的 Neo 和 Zion 的老议员 Hamann 交流，阐述的就是人和机器之间的控制与反控制问题，最后 Hamann 暗示其实人和机器是互相需要的（好基情），这可能是启发 Neo 找到最终解决方案的事件之一。另外一个例子在 Pixar 的动画「WALL-E」中，为了躲避地球的生态灾难，人类乘坐高科技太空船离开了，太空船上的生活太安逸，人们的生理和心理几乎慢慢退化到无法自理的状态，几乎所有的事情都高度依赖机器去完成，甚至包括一些重要的思考与决定。&lt;/p&gt;&lt;p&gt;这两种可能都会存在，因为我们人类的进化离不开工具，而且现在看起来最好的工具就是制造（至少在某个方面）比我们更聪明和强大的机器。所以问题的关键是：这种进程会导致我们在某方面退化，以至于无法自理或者无法保护自己吗？很难想象人类会这么不小心，所以我们一定会备有某种警惕和防卫措施，除非我们制造的机器超出预期的强大然后起义了。这里有个有趣的理论值得分享。&lt;/p&gt;&lt;p&gt;去年 GamePro 有篇妙文，叫「&lt;a href=&#34;http://www.gamepro.com/article/features/214805/the-real-science-of-mass-effect-2/&#34;&gt;The Real Science of Mass Effect 2&lt;/a&gt;」，采访了一大堆真实的科学家，一起分析经典硬科幻游戏「质量效应（Mass Effect）」中的设定哪些从科学上看是靠谱的。其中机器人造反并控制甚至消灭人类这件事是第一个讨论的话题，下面是关于此的描述：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“正如大部分人工智能的研究者一样，我相信有朝一日人工智能系统会具有自我意识。” David Chin 如是说，他是一位夏威夷大学的人工智能研究者，同时也是一个热心的 Mass Effect 迷。“当然也有不同的观点，有一些杰出的哲学家认为这是不可能的事情。”&lt;/p&gt;&lt;p&gt;所以接下来合理的问题是：我们是否应该对这种“自我意识”感到害怕（显然ME世界中的各族人民是对此相当恐惧的）？对此 Chin 解释说：“无法想象任何 A.I. 会比人更感性化或者更缺乏理性，A.I. 如果要毁灭或者危害人类，它们需要一个相当好的理性的理由。人类和 A.I. 不太像会出现资源上的冲突和竞争，所以看上去找不到一个 A.I. 会要毁灭人类的理性的理由。”&lt;/p&gt;&lt;p&gt;“不过，” Chin 补充道：“如果我们为 A.I. 注入一些生态学方面的道德观念，那么它们也许会认为人类的数量增长会危害到地球，于是建立一种人口控制机制，就好像 ME 中针对 Krogan 研制出的 Genophage 技术一样。”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;最后，我还是觉得人和机器是能和谐融合的，这是人类进化的重要途径。&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
